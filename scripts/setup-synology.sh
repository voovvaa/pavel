#!/usr/bin/env bash
set -euo pipefail

# --- –¶–≤–µ—Ç–∞/–ª–æ–≥–∏ ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; PURPLE='\033[0;35m'; NC='\033[0m'
log(){ echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $*${NC}"; }
warn(){ echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $*${NC}"; }
error(){ echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $*${NC}"; exit 1; }
info(){ echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $*${NC}"; }
success(){ echo -e "${PURPLE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ $*${NC}"; }

# --- –ê—Ä–≥—É–º–µ–Ω—Ç—ã/–ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
if [ $# -ne 1 ]; then
  error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <NAS_IP>"
fi
NAS_IP="$1"
NAS_USER="${NAS_USER:-volodya}"
SSH_KEY_PATH="${SSH_KEY_PATH:-$HOME/.ssh/synology_github_actions}"
PROJECT_DIR="${PROJECT_DIR:-/volume1/docker/geysandr-bot}"

# –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –≤–µ—Ç–∫—É (–∏—Å–ø—Ä–∞–≤—å –ø–æ–¥ —Å–µ–±—è, –ª–∏–±–æ –ø–æ—Ç–æ–º –≤ .nas.env –Ω–∞ NAS)
REPO_SSH_DEFAULT="${REPO_SSH:-git@github.com:USER/REPO.git}"
BRANCH_DEFAULT="${BRANCH:-main}"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Synology NAS –¥–ª—è –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞..."
info "NAS IP: $NAS_IP"
info "SSH User: $NAS_USER"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ NAS ---
log "üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NAS..."
if ! ping -c 2 "$NAS_IP" >/dev/null 2>&1; then warn "Ping –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ SSH"; fi

# --- –ö–ª—é—á–∏ SSH ---
log "üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSH –∫–ª—é—á–∏..."
if [ ! -f "$SSH_KEY_PATH" ]; then
  info "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á: $SSH_KEY_PATH"
  ssh-keygen -t ed25519 -f "$SSH_KEY_PATH" -C "github-actions@geysandr-bot" -N ""
else
  warn "SSH –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $SSH_KEY_PATH"
fi

log "üì§ –ö–æ–ø–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ NAS..."
if ssh-copy-id -i "$SSH_KEY_PATH.pub" "$NAS_USER@$NAS_IP" 2>/dev/null; then
  success "SSH –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ NAS"
else
  warn "ssh-copy-id –Ω–µ –≤—ã—à–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é"
  ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
  PUB=$(cat "$SSH_KEY_PATH.pub")
  ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "echo '$PUB' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"
  success "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω"
fi

# --- –¢–µ—Å—Ç SSH ---
log "üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH..."
ssh -i "$SSH_KEY_PATH" -o StrictHostKeyChecking=no "$NAS_USER@$NAS_IP" "echo SSH OK" >/dev/null 2>&1 || error "SSH –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

# --- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---
log "üìÅ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ NAS..."
ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "mkdir -p $PROJECT_DIR/{data,logs,chat,backups,scripts} && chmod 755 $PROJECT_DIR $PROJECT_DIR/{data,logs,chat,backups,scripts}"
success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

# --- –ü–æ–∏—Å–∫ docker + compose ---
log "üê≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –Ω–∞ NAS..."
DOCKER_BIN=$(ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" '\
for d in docker /usr/local/bin/docker /var/packages/Docker/target/usr/bin/docker /var/packages/ContainerManager/target/usr/bin/docker; do
  if [ -x "$d" ]; then echo "$d"; exit 0; fi
done; exit 1' 2>/dev/null || true)
[ -n "$DOCKER_BIN" ] || error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ NAS. –ü–æ—Å—Ç–∞–≤—å Docker/Container Manager –≤ Package Center."

DOCKER_INFO=$(ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "$DOCKER_BIN --version" 2>/dev/null || true)
success "Docker –Ω–∞–π–¥–µ–Ω: $DOCKER_INFO"

COMPOSE_CMD=$(ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "\
if $DOCKER_BIN compose version >/dev/null 2>&1; then echo '$DOCKER_BIN compose';
elif command -v docker-compose >/dev/null 2>&1; then echo 'docker-compose';
elif [ -x /usr/local/bin/docker-compose ]; then echo '/usr/local/bin/docker-compose';
elif [ -x /var/packages/Docker/target/bin/docker-compose ]; then echo '/var/packages/Docker/target/bin/docker-compose';
else echo ''; fi")
[ -n "$COMPOSE_CMD" ] || error "–ù–µ –Ω–∞–π–¥–µ–Ω docker compose –Ω–∞ NAS."
success "–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $COMPOSE_CMD"

# --- .env.docker ---
log "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env.docker..."
ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/.env.docker << 'EOF'
# Telegram
TELEGRAM_BOT_TOKEN=YOUR_TELEGRAM_BOT_TOKEN
ALLOWED_CHAT_ID=YOUR_CHAT_ID

# OpenAI
OPENAI_API_KEY=YOUR_OPENAI_API_KEY
OPENAI_MODEL=gpt-5-nano
AI_MODE=hybrid
AI_PROBABILITY=0.8

# Memory
DATABASE_PATH=/app/data/memory.db
MEMORY_DAYS=30
SUMMARY_AFTER_MESSAGES=50
SHORT_TERM_LIMIT=25
CONTEXT_RELEVANCE_THRESHOLD=0.7

# Production
DEV_MODE=false
NODE_ENV=production
PERSONALITY_FILE=/app/chat/result_personality.json
EOF
chmod 600 $PROJECT_DIR/.env.docker"
success ".env.docker —Å–æ–∑–¥–∞–Ω"

# --- docker-compose.yml (build –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ NAS) ---
log "üê≥ –°–æ–∑–¥–∞–µ–º docker-compose.yml..."
ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/docker-compose.yml << 'EOF'
services:
  geysandr-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: geysandr-kylovich-bot
    restart: unless-stopped

    env_file:
      - .env.docker

    volumes:
      - bot-data:/app/data
      - bot-logs:/app/logs
      - ./chat/result_personality.json:/app/chat/result_personality.json:ro

    healthcheck:
      test: [\"CMD\", \"bun\", \"run\", \"health-check\", \"--quick\"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

    logging:
      driver: json-file
      options:
        max-size: \"50m\"
        max-file: \"3\"

    networks:
      - bot-network

    labels:
      - \"app=geysandr-bot\"
      - \"version=latest\"

volumes:
  bot-data:
    driver: local
    name: geysandr_bot_data
  bot-logs:
    driver: local
    name: geysandr_bot_logs

networks:
  bot-network:
    driver: bridge
    name: geysandr_network
EOF"
success "docker-compose.yml —Å–æ–∑–¥–∞–Ω"

# --- –ë–∞–∑–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å ---
log "üé≠ –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏..."
ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/chat/result_personality.json << 'EOF'
{ \"patterns\":[{\"id\":\"greeting\",\"keywords\":[\"–ø—Ä–∏–≤–µ—Ç\",\"hello\",\"hi\"],\"responses\":[\"–ü—Ä–∏–≤–µ—Ç!\",\"–ó–¥–∞—Ä–æ–≤–∞!\",\"–ö–∞–∫ –¥–µ–ª–∞?\"],\"weight\":10,\"context\":\"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\"}],
  \"responseStyle\":{\"averageLength\":25,\"commonWords\":[\"–ø—Ä–∏–≤–µ—Ç\",\"–∫–∞–∫\",\"–¥–µ–ª–∞\"],\"commonEmojis\":[\"üòä\",\"üëã\"],\"formalityLevel\":0.3,\"activityLevel\":1},
  \"schedule\":{\"activeHours\":[9,10,11,12,13,14,15,16,17,18,19,20,21,22],\"activeDays\":[0,1,2,3,4,5,6]}
}
EOF"
success "–ë–∞–∑–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞"

# --- .nas.env –Ω–∞ NAS (–¥–ª—è deploy.sh) ---
ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/.nas.env << EOF
NAS_IP=$NAS_IP
NAS_USER=$NAS_USER
SSH_KEY_PATH=$SSH_KEY_PATH
PROJECT_DIR=$PROJECT_DIR
REPO_SSH=$REPO_SSH_DEFAULT
BRANCH=$BRANCH_DEFAULT
EOF"
success "–°–æ–∑–¥–∞–Ω $PROJECT_DIR/.nas.env (–∏—Å–ø—Ä–∞–≤—å REPO_SSH/BRANCH –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"

# --- –°–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è: setup-git-auth.sh + deploy.sh + update.sh + backup.sh + import-chat-history.sh + autostart.sh ---
log "üìú –ö–ª–∞–¥–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è –Ω–∞ NAS..."

ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/scripts/setup-git-auth.sh << 'EOF'
#!/usr/bin/env bash
set -euo pipefail
NAS_IP="\${NAS_IP:-}"; NAS_USER="\${NAS_USER:-volodya}"; SSH_KEY_PATH="\${SSH_KEY_PATH:-\$HOME/.ssh/synology_github_actions}"
DEPLOY_KEY_LOCAL="\${1:-}"; REPO_SSH="\${REPO_SSH:-git@github.com:USER/REPO.git}"
log(){ printf '\\033[0;32m[%(%F %T)T] %s\\033[0m\\n' -1 \"\$*\"; }; error(){ printf '\\033[0;31m[%(%F %T)T] ‚ùå %s\\033[0m\\n' -1 \"\$*\"; exit 1; }
[ -n \"\$DEPLOY_KEY_LOCAL\" ] && [ -f \"\$DEPLOY_KEY_LOCAL\" ] || error \"–£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É (–ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç)\"
mkdir -p ~/.ssh && chmod 700 ~/.ssh
cp \"\$DEPLOY_KEY_LOCAL\" ~/.ssh/id_repo && chmod 600 ~/.ssh/id_repo
ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts 2>/dev/null || true && chmod 600 ~/.ssh/known_hosts
{ echo 'Host github.com'; echo '  HostName github.com'; echo '  User git'; echo '  IdentityFile ~/.ssh/id_repo'; echo '  IdentitiesOnly yes'; } >> ~/.ssh/config
chmod 600 ~/.ssh/config
log \"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ Deploy Keys —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: \$REPO_SSH\"
EOF"

ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/scripts/deploy.sh << 'EOF'
#!/usr/bin/env bash
set -euo pipefail
set -a; [ -f .nas.env ] && source .nas.env || true; set +a
NAS_IP=\"\${NAS_IP:-}\"; NAS_USER=\"\${NAS_USER:-volodya}\"; SSH_KEY_PATH=\"\${SSH_KEY_PATH:-\$HOME/.ssh/synology_github_actions}\"
PROJECT_DIR=\"\${PROJECT_DIR:-/volume1/docker/geysandr-bot}\"; REPO_SSH=\"\${REPO_SSH:-git@github.com:USER/REPO.git}\"; BRANCH=\"\${BRANCH:-main}\"
log(){ printf '\\033[0;32m[%(%F %T)T] %s\\033[0m\\n' -1 \"\$*\"; }; warn(){ printf '\\033[1;33m[%(%F %T)T] ‚ö†Ô∏è  %s\\033[0m\\n' -1 \"\$*\"; }; error(){ printf '\\033[0;31m[%(%F %T)T] ‚ùå %s\\033[0m\\n' -1 \"\$*\"; exit 1; }
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º docker/compose
DOCKER_BIN=\"\$(for d in docker /usr/local/bin/docker /var/packages/Docker/target/usr/bin/docker /var/packages/ContainerManager/target/usr/bin/docker; do [ -x \"\$d\" ] && { echo \"\$d\"; break; }; done)\"
[ -n \"\$DOCKER_BIN\" ] || error \"Docker –Ω–µ –Ω–∞–π–¥–µ–Ω\"
if \$DOCKER_BIN compose version >/dev/null 2>&1; then COMPOSE_CMD=\"\$DOCKER_BIN compose\";
elif command -v docker-compose >/dev/null 2>&1; then COMPOSE_CMD=\"docker-compose\";
elif [ -x /usr/local/bin/docker-compose ]; then COMPOSE_CMD=\"/usr/local/bin/docker-compose\";
elif [ -x /var/packages/Docker/target/bin/docker-compose ]; then COMPOSE_CMD=\"/var/packages/Docker/target/bin/docker-compose\"; else error \"compose –Ω–µ –Ω–∞–π–¥–µ–Ω\"; fi
log \"Compose: \$COMPOSE_CMD\"
# Git clone/pull
cd \"\$PROJECT_DIR\"
if [ -d .git ]; then
  log \"–û–±–Ω–æ–≤–ª—è—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\"
  git remote set-url origin \"\$REPO_SSH\" || true
  git fetch --all --prune
  git reset --hard \"origin/\$BRANCH\"
  git clean -fdx
else
  log \"–ö–ª–æ–Ω–∏—Ä—É—é \$REPO_SSH (–≤–µ—Ç–∫–∞ \$BRANCH)\"
  git clone --depth 1 -b \"\$BRANCH\" \"\$REPO_SSH\" \"\$PROJECT_DIR\"
  cd \"\$PROJECT_DIR\"
fi
# Build & Up
log \"–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤\"
\$COMPOSE_CMD -f docker-compose.yml build --pull
log \"–°—Ç–∞—Ä—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\"
\$COMPOSE_CMD -f docker-compose.yml up -d
# Health-check (–µ—Å–ª–∏ –µ—Å—Ç—å)
if \$COMPOSE_CMD run --rm geysandr-bot bun run health-check --quick >/dev/null 2>&1; then
  log \"‚úÖ Health-check OK\"
else
  warn \"Health-check –Ω–µ –ø—Ä–æ—à—ë–ª/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–≥–∏\"
  \$COMPOSE_CMD logs --tail=200 geysandr-bot || true
fi
EOF"

ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/scripts/update.sh << 'EOF'
#!/usr/bin/env bash
set -euo pipefail
set -a; [ -f .nas.env ] && source .nas.env || true; set +a
PROJECT_DIR=\"\${PROJECT_DIR:-/volume1/docker/geysandr-bot}\"
DOCKER_BIN=\"\$(for d in docker /usr/local/bin/docker /var/packages/Docker/target/usr/bin/docker /var/packages/ContainerManager/target/usr/bin/docker; do [ -x \"\$d\" ] && { echo \"\$d\"; break; }; done)\"
[ -n \"\$DOCKER_BIN\" ] || { echo \"Docker –Ω–µ –Ω–∞–π–¥–µ–Ω\"; exit 1; }
if \$DOCKER_BIN compose version >/dev/null 2>&1; then COMPOSE_CMD=\"\$DOCKER_BIN compose\";
elif command -v docker-compose >/dev/null 2>&1; then COMPOSE_CMD=\"docker-compose\";
elif [ -x /usr/local/bin/docker-compose ]; then COMPOSE_CMD=\"/usr/local/bin/docker-compose\";
elif [ -x /var/packages/Docker/target/bin/docker-compose ]; then COMPOSE_CMD=\"/var/packages/Docker/target/bin/docker-compose\"; else echo \"compose –Ω–µ –Ω–∞–π–¥–µ–Ω\"; exit 1; fi
cd \"\$PROJECT_DIR\" && \$COMPOSE_CMD build --pull && \$COMPOSE_CMD up -d
EOF"

ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/scripts/backup.sh << 'EOF'
#!/usr/bin/env bash
set -euo pipefail
set -a; [ -f .nas.env ] && source .nas.env || true; set +a
PROJECT_DIR=\"\${PROJECT_DIR:-/volume1/docker/geysandr-bot}\"; KEEP=\"\${KEEP:-10}\"
TS=\"\$(date +%Y%m%d_%H%M%S)\"
cd \"\$PROJECT_DIR\"
tar -czf \"backups/backup_\$TS.tar.gz\" data/ chat/ .env.docker docker-compose.yml 2>/dev/null || true
ls -1t backups/backup_*.tar.gz | tail -n +\$((KEEP+1)) | xargs -r rm -f
echo \"–ì–æ—Ç–æ–≤–æ: backups/backup_\$TS.tar.gz\"
EOF"

ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/scripts/import-chat-history.sh << 'EOF'
#!/usr/bin/env bash
set -euo pipefail
FILE=\"\${1:-}\"; [ -n \"\$FILE\" ] && [ -f \"\$FILE\" ] || { echo \"–£–∫–∞–∂–∏ —Ñ–∞–π–ª –ª–∏—á–Ω–æ—Å—Ç–∏\"; exit 1; }
set -a; [ -f .nas.env ] && source .nas.env || true; set +a
PROJECT_DIR=\"\${PROJECT_DIR:-/volume1/docker/geysandr-bot}\"
cp \"\$FILE\" \"\$PROJECT_DIR/chat/result_personality.json\"
DOCKER_BIN=\"\$(for d in docker /usr/local/bin/docker /var/packages/Docker/target/usr/bin/docker /var/packages/ContainerManager/target/usr/bin/docker; do [ -x \"\$d\" ] && { echo \"\$d\"; break; }; done)\"
if \$DOCKER_BIN compose version >/dev/null 2>&1; then COMPOSE_CMD=\"\$DOCKER_BIN compose\"; else COMPOSE_CMD=\"docker-compose\"; fi
cd \"\$PROJECT_DIR\" && \$COMPOSE_CMD up -d
EOF"

ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cat > $PROJECT_DIR/scripts/autostart.sh << 'EOF'
#!/usr/bin/env bash
set -euo pipefail
set -a; [ -f .nas.env ] && source .nas.env || true; set +a
PROJECT_DIR=\"\${PROJECT_DIR:-/volume1/docker/geysandr-bot}\"
DOCKER_BIN=\"\$(for d in docker /usr/local/bin/docker /var/packages/Docker/target/usr/bin/docker /var/packages/ContainerManager/target/usr/bin/docker; do [ -x \"\$d\" ] && { echo \"\$d\"; break; }; done)\"
if \$DOCKER_BIN compose version >/dev/null 2>&1; then COMPOSE_CMD=\"\$DOCKER_BIN compose\"; else COMPOSE_CMD=\"docker-compose\"; fi
cd \"\$PROJECT_DIR\" && \$COMPOSE_CMD up -d
EOF"

# --- –ü—Ä–∞–≤–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã ---
ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "chmod +x $PROJECT_DIR/scripts/*.sh"

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è compose ---
info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker Compose..."
if ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "cd $PROJECT_DIR && $COMPOSE_CMD -f docker-compose.yml config" >/dev/null 2>&1; then
  success "Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
else
  warn "Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏"
fi

# --- Summary ---
ssh -i "$SSH_KEY_PATH" "$NAS_USER@$NAS_IP" "bash -lc 'cat > $PROJECT_DIR/SETUP_SUMMARY.md <<EOF
# Synology NAS Setup Summary

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: \$(date)

### –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
- $PROJECT_DIR/data
- $PROJECT_DIR/logs
- $PROJECT_DIR/chat
- $PROJECT_DIR/backups
- $PROJECT_DIR/scripts

### –§–∞–π–ª—ã:
- .env.docker
- docker-compose.yml
- chat/result_personality.json
- scripts: setup-git-auth.sh, deploy.sh, update.sh, backup.sh, import-chat-history.sh, autostart.sh
- .nas.env

### Docker:
- \$(/usr/local/bin/docker --version 2>/dev/null || docker --version 2>/dev/null || echo docker not found)
- \$(/usr/local/bin/docker compose version 2>/dev/null || docker compose version 2>/dev/null || /usr/local/bin/docker-compose --version 2>/dev/null || echo compose not found)

EOF'"
success "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Synology NAS –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
info "üìÑ Summary: $PROJECT_DIR/SETUP_SUMMARY.md"

echo
info "–î–∞–ª—å—à–µ:"
echo "1) –ù–∞ NAS: –∑–∞–ø–æ–ª–Ω–∏—Ç—å $PROJECT_DIR/.env.docker —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"
echo "2) –ù–∞ NAS: –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å $PROJECT_DIR/.nas.env (REPO_SSH, BRANCH)"
echo "3) –ù–∞ NAS: –¥–æ–±–∞–≤–∏—Ç—å deploy key –≤ GitHub –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:"
echo "   $PROJECT_DIR/scripts/setup-git-auth.sh /path/to/private_deploy_key"
echo "4) –õ–æ–∫–∞–ª—å–Ω–æ (–Ω–∞ —Ç–≤–æ—ë–º –∫–æ–º–ø–µ):"
echo "   ssh -i $SSH_KEY_PATH $NAS_USER@$NAS_IP 'bash $PROJECT_DIR/scripts/deploy.sh'"