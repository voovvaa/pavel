import { promises as fs } from 'fs';
import { TelegramExport, TelegramExportMessage } from './types.js';

interface MockUser {
  name: string;
  messageStyle: string[];
  emojis: string[];
  activityPattern: number[]; // 24 —á–∞—Å–∞, –≤–µ—Å–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  wordsPool: string[];
}

export class MockChatGenerator {
  private users: MockUser[] = [
    {
      name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
      messageStyle: ['–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!', '–ö–∞–∫ –¥–µ–ª–∞?', '–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ?', '–°–æ–≥–ª–∞—Å–µ–Ω', '–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ'],
      emojis: ['üòÑ', 'üëç', 'üî•', 'üí™'],
      activityPattern: [0,0,0,0,0,0,1,2,3,4,3,2,3,4,5,6,4,3,2,1,1,1,0,0], // —É—Ç—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–µ–µ
      wordsPool: ['—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '–¥–µ–¥–ª–∞–π–Ω', '–≤—Å—Ç—Ä–µ—á–∞', '–∫–æ–¥', '–±–∞–≥', '—Ñ–∏—á–∞', '—Ä–µ–ª–∏–∑']
    },
    {
      name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞', 
      messageStyle: ['–û—Ñ–∏–≥–µ—Ç—å', '–ö—Ä—É—Ç–æ!', '–ê —è –¥—É–º–∞—é', '–ö—Å—Ç–∞—Ç–∏', '–ú–µ–∂–¥—É –ø—Ä–æ—á–∏–º', '–í–æ–æ–±—â–µ'],
      emojis: ['üòä', '‚ù§Ô∏è', 'üéâ', '‚ú®', 'üå∏'],
      activityPattern: [0,0,0,0,0,1,1,2,2,1,1,2,3,2,3,4,5,6,4,3,2,1,1,0], // –≤–µ—á–µ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–µ–µ
      wordsPool: ['–¥–∏–∑–∞–π–Ω', '–∫—Ä–∞—Å–∏–≤–æ', '—Å—Ç–∏–ª—å', '—Ü–≤–µ—Ç', '—à—Ä–∏—Ñ—Ç', '–º–∞–∫–µ—Ç', '–∏–¥–µ—è', '–∫–æ–Ω—Ü–µ–ø—Ç', '–±—Ä–µ–Ω–¥']
    },
    {
      name: '–î–º–∏—Ç—Ä–∏–π –ö.',
      messageStyle: ['–•–º', '–õ–æ–≥–∏—á–Ω–æ', '–° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã', '–° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã', '–í–æ–∑–º–æ–∂–Ω–æ', '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ'],
      emojis: ['ü§î', 'üßê', 'üìä', 'üí°'],
      activityPattern: [0,0,0,0,0,0,0,1,2,4,5,6,5,4,3,2,2,1,1,1,0,0,0,0], // —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
      wordsPool: ['–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–¥–∞–Ω–Ω—ã–µ', '–º–µ—Ç—Ä–∏–∫–∏', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Ç—Ä–µ–Ω–¥', '—Ä–æ—Å—Ç', '–∫–æ–Ω–≤–µ—Ä—Å–∏—è', '–≤–æ—Ä–æ–Ω–∫–∞']
    },
    {
      name: '–ê–Ω–Ω–∞ Smile',
      messageStyle: ['–†–µ–±—è—Ç', '–ù–∞—Ä–æ–¥', '–°–ª—É—à–∞–π—Ç–µ', '–ê –≤—ã –∑–Ω–∞–ª–∏', '–ü—Ä–∏–∫–∏–Ω—å—Ç–µ', '–ñ–µ—Å—Ç—å –∫–∞–∫–∞—è'],
      emojis: ['üòç', 'ü•≥', 'üéä', 'üåü', 'üí´', 'ü¶Ñ'],
      activityPattern: [1,0,0,0,0,0,1,1,1,1,2,3,4,3,3,4,5,6,5,4,3,2,2,1], // –≤–µ—á–µ—Ä–Ω–∏–π —Ç–∏–ø
      wordsPool: ['–≤–µ—á–µ—Ä–∏–Ω–∫–∞', '–º—É–∑—ã–∫–∞', '—Ñ–∏–ª—å–º', '—Å–µ—Ä–∏–∞–ª', '–∫–Ω–∏–≥–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–∫–∞—Ñ–µ', '–≤—ã—Ö–æ–¥–Ω—ã–µ']
    },
    {
      name: '–°–µ—Ä–≥–µ–π –¢–µ—Ö',
      messageStyle: ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏', '–í –ø—Ä–∏–Ω—Ü–∏–ø–µ', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥'],
      emojis: ['‚ö°', 'üöÄ', 'üíª', '‚öôÔ∏è'],
      activityPattern: [2,1,1,0,0,0,0,1,3,4,5,4,3,3,4,5,4,3,2,2,3,4,3,2], // –Ω–æ—á–Ω–æ–π –∫–æ–¥–µ—Ä
      wordsPool: ['—Å–µ—Ä–≤–µ—Ä', '–±–∞–∑–∞', '–∞–ø–∏', '–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å', '–¥–æ–∫–µ—Ä', '–∫—É–±–µ—Ä–Ω–µ—Ç–µ—Å', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', '–ª–æ–≥–∏']
    }
  ];

  private templates: string[] = [
    '–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –ø—Ä–æ {topic}?',
    '–ê –ø–æ–º–Ω–∏—Ç–µ –∫–∞–∫ –º—ã {action}',
    '–ö—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–æ–±–æ–≤–∞–ª {topic}?',
    '–£ –º–µ–Ω—è {feeling} –æ—Ç {topic}',
    '–ù–∞—Ä–æ–¥, –∞ –∫–∞–∫ –≤–∞–º {topic}?',
    '–í—á–µ—Ä–∞ –≤–∏–¥–µ–ª {topic}, –ø—Ä–∏–∫–æ–ª—å–Ω–æ',
    '–ê —è —Å—á–∏—Ç–∞—é —á—Ç–æ {topic} - —ç—Ç–æ {opinion}',
    '–ö—Å—Ç–∞—Ç–∏ –ø—Ä–æ {topic} - {opinion}',
    '–ú–æ–∂–µ—Ç –æ–±—Å—É–¥–∏–º {topic}?',
    '–ò–º—Ö–æ {topic} {opinion}'
  ];

  private topics: string[] = [
    '–Ω–æ–≤—ã–π –∞–π—Ñ–æ–Ω', '–ø–æ–≥–æ–¥–∞', '–ø—Ä–æ–±–∫–∏', '—Ä–∞–±–æ—Ç–∞', '–≤—ã—Ö–æ–¥–Ω—ã–µ', '–æ—Ç–ø—É—Å–∫', '–∫–∏–Ω–æ', '—Å–µ—Ä–∏–∞–ª—ã',
    '–∏–≥—Ä—ã', '—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', '–∞–∫—Ü–∏–∏', '—Å—Ç–∞—Ä—Ç–∞–ø—ã',
    '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'AI', '—á–∞—Ç-–±–æ—Ç—ã', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–∏–∑–∞–π–Ω', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–±–ª–æ–∫—á–µ–π–Ω'
  ];

  private actions: string[] = [
    '–æ–±—Å—É–∂–¥–∞–ª–∏ —ç—Ç–æ', '—Å–º–µ—è–ª–∏—Å—å –Ω–∞–¥ —ç—Ç–∏–º', '—Å–ø–æ—Ä–∏–ª–∏ –æ–± —ç—Ç–æ–º', '—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ —ç—Ç–∏–º', 
    '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ', '–¥–µ–ª–∞–ª–∏ —ç—Ç–æ', '–∏–∑—É—á–∞–ª–∏ —ç—Ç–æ', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ'
  ];

  private feelings: string[] = [
    '–≤–æ—Å—Ç–æ—Ä–≥', '—Å–æ–º–Ω–µ–Ω–∏—è', '–≤–æ–ø—Ä–æ—Å—ã', '–∏–¥–µ–∏', '–ø–ª–∞–Ω—ã', '–º—ã—Å–ª–∏', '–æ–ø–∞—Å–µ–Ω–∏—è', '–Ω–∞–¥–µ–∂–¥—ã'
  ];

  private opinions: string[] = [
    '–∫—Ä—É—Ç–æ', '—Ç–∞–∫ —Å–µ–±–µ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ', '–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ', '—É—Å—Ç–∞—Ä–µ–ª–æ',
    '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '–ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω–æ', '–Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–æ', '—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ', '–æ–±—ã—á–Ω–æ', '–≥–µ–Ω–∏–∞–ª—å–Ω–æ'
  ];

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private generateMessage(user: MockUser, timestamp: Date): string {
    const rand = Math.random();
    
    if (rand < 0.3) {
      // –ü—Ä–æ—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞ –∏–∑ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return this.pickRandom(user.messageStyle) + (Math.random() < 0.3 ? ' ' + this.pickRandom(user.emojis) : '');
    } else if (rand < 0.6) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –∏ —Å–ª–æ–≤–∞–º–∏ –∏–∑ –ø—É–ª–∞
      const words = this.pickRandom(user.wordsPool, 2, 4);
      const emoji = Math.random() < 0.5 ? ' ' + this.pickRandom(user.emojis) : '';
      return words.join(' ') + emoji;
    } else {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É
      const template = this.pickRandom(this.templates);
      const topic = this.pickRandom(this.topics);
      const action = this.pickRandom(this.actions);
      const feeling = this.pickRandom(this.feelings);
      const opinion = this.pickRandom(this.opinions);
      
      const message = template
        .replace('{topic}', topic)
        .replace('{action}', action)
        .replace('{feeling}', feeling)
        .replace('{opinion}', opinion);
        
      return message + (Math.random() < 0.2 ? ' ' + this.pickRandom(user.emojis) : '');
    }
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  private pickRandom<T>(array: T[], min: number = 1, max: number = 1): T | T[] {
    if (min === 1 && max === 1) {
      return array[Math.floor(Math.random() * array.length)];
    }
    
    const count = Math.floor(Math.random() * (max - min + 1)) + min;
    const result = [];
    const used = new Set();
    
    while (result.length < count && result.length < array.length) {
      const index = Math.floor(Math.random() * array.length);
      if (!used.has(index)) {
        used.add(index);
        result.push(array[index]);
      }
    }
    
    return result;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —Å —É—á–µ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private generateTimestamp(user: MockUser, baseTime: Date): Date {
    // –í—ã–±–∏—Ä–∞–µ–º —á–∞—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const weights = user.activityPattern;
    const totalWeight = weights.reduce((sum, w) => sum + w, 0);
    
    let random = Math.random() * totalWeight;
    let hour = 0;
    
    for (let i = 0; i < weights.length; i++) {
      random -= weights[i];
      if (random <= 0) {
        hour = i;
        break;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω—É—Ç—ã
    const minutes = Math.floor(Math.random() * 60);
    const seconds = Math.floor(Math.random() * 60);
    
    const timestamp = new Date(baseTime);
    timestamp.setHours(hour, minutes, seconds);
    
    return timestamp;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private generateMediaMessage(user: MockUser, timestamp: Date): TelegramExportMessage {
    const mediaTypes = ['photo', 'sticker', 'document', 'voice_message'] as const;
    const mediaType = this.pickRandom(mediaTypes) as any;
    
    const baseMessage: TelegramExportMessage = {
      id: Math.floor(Math.random() * 1000000),
      type: 'message',
      date: timestamp.toISOString(),
      date_unixtime: Math.floor(timestamp.getTime() / 1000),
      from: user.name,
      media_type: mediaType
    };

    switch (mediaType) {
      case 'photo':
        return { ...baseMessage, file: 'photo.jpg', width: 1920, height: 1080 };
      case 'sticker':
        return { ...baseMessage, file: 'sticker.webp', sticker_emoji: this.pickRandom(user.emojis) as string };
      case 'document':
        return { ...baseMessage, file: 'document.pdf', mime_type: 'application/pdf' };
      case 'voice_message':
        return { ...baseMessage, file: 'voice.oga', duration_seconds: Math.floor(Math.random() * 60) + 5 };
      default:
        return baseMessage;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-—á–∞—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async generateMockChat(messageCount: number = 1000): Promise<TelegramExport> {
    console.log(`üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫-—á–∞—Ç —Å ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...`);
    
    const messages: TelegramExportMessage[] = [];
    const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    
    for (let i = 0; i < messageCount; i++) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = this.pickRandom(this.users) as MockUser;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ 30 –¥–Ω—è–º)
      const dayOffset = Math.floor(i / (messageCount / 30));
      const baseTime = new Date(startDate.getTime() + dayOffset * 24 * 60 * 60 * 1000);
      const timestamp = this.generateTimestamp(user, baseTime);
      
      // 10% —à–∞–Ω—Å –Ω–∞ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (Math.random() < 0.1) {
        messages.push(this.generateMediaMessage(user, timestamp));
      } else {
        // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const text = this.generateMessage(user, timestamp);
        
        messages.push({
          id: i + 1,
          type: 'message',
          date: timestamp.toISOString(),
          date_unixtime: Math.floor(timestamp.getTime() / 1000),
          from: user.name,
          text: text
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    messages.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    const mockExport: TelegramExport = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      type: 'private_supergroup',
      id: -123456789,
      messages: messages
    };
    
    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ${this.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    return mockExport;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–∫-—á–∞—Ç –≤ —Ñ–∞–π–ª
   */
  async saveMockChat(filePath: string, messageCount: number = 1000): Promise<void> {
    const mockChat = await this.generateMockChat(messageCount);
    await fs.writeFile(filePath, JSON.stringify(mockChat, null, 2), 'utf-8');
    console.log(`üíæ –ú–æ–∫-—á–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const generator = new MockChatGenerator();
  const messageCount = parseInt(process.argv[2]) || 1000;
  const fileName = process.argv[3] || 'mock-chat.json';
  generator.saveMockChat(fileName, messageCount)
    .then(() => console.log('üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: bun run analyze ' + fileName))
    .catch(console.error);
}