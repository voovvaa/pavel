/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞ (–≠–¢–ê–ü 9)
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞
 * –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import { Database } from 'bun:sqlite';
import { Logger } from '../utils/logger.js';
import { config } from './config.js';

export interface ActivityPattern {
  currentHour: number;
  currentDay: number;
  hourlyActivity: { [hour: number]: number };  // –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  weeklyActivity: { [day: number]: number };   // –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
  recentTrend: 'increasing' | 'decreasing' | 'stable'; // —Ç—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  lastUpdate: Date;
}

export interface ActivityModifiers {
  responseMultiplier: number;    // 0.1-3.0 - –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
  delayMultiplier: number;       // 0.5-2.0 - –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
  isActiveTime: boolean;         // –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å?
  inactivityPeriod: number;      // –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
}

export class ActivityManager {
  private db: Database;
  private chatId: string;
  private activityPattern: ActivityPattern;
  private checkInterval: NodeJS.Timeout | null = null;

  constructor(chatId: string) {
    this.chatId = chatId;
    this.db = new Database(config.databasePath || './memory.db');
    
    this.activityPattern = {
      currentHour: new Date().getHours(),
      currentDay: new Date().getDay(),
      hourlyActivity: {},
      weeklyActivity: {},
      recentTrend: 'stable',
      lastUpdate: new Date()
    };

    this.initializeActivityTracking();
    this.startPeriodicUpdate();
    
    Logger.info('üìä ActivityManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ ' + chatId);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private initializeActivityTracking(): void {
    this.updateActivityPattern();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
   */
  private startPeriodicUpdate(): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    this.checkInterval = setInterval(() => {
      this.updateActivityPattern();
    }, 15 * 60 * 1000);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  public updateActivityPattern(): void {
    try {
      const now = new Date();
      this.activityPattern.currentHour = now.getHours();
      this.activityPattern.currentDay = now.getDay();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      this.activityPattern.hourlyActivity = this.analyzeHourlyActivity();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
      this.activityPattern.weeklyActivity = this.analyzeWeeklyActivity();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
      this.activityPattern.recentTrend = this.calculateActivityTrend();
      
      this.activityPattern.lastUpdate = now;
      
      Logger.debug(`üìä –ü–∞—Ç—Ç–µ—Ä–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–π —á–∞—Å: ${this.activityPattern.currentHour}, —Ç—Ä–µ–Ω–¥: ${this.activityPattern.recentTrend}`);
      
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
   */
  private analyzeHourlyActivity(): { [hour: number]: number } {
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    
    const hourlyStats = this.db.prepare(`
      SELECT 
        CAST(strftime('%H', timestamp) AS INTEGER) as hour,
        COUNT(*) as count
      FROM messages 
      WHERE chat_id = ? 
        AND is_from_bot = 0 
        AND timestamp >= ?
        AND timestamp <= datetime('now')
      GROUP BY hour
      ORDER BY hour
    `).all(this.chatId, sevenDaysAgo.toISOString()) as { hour: number; count: number }[];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —á–∞—Å—ã
    const hourlyActivity: { [hour: number]: number } = {};
    for (let i = 0; i < 24; i++) {
      hourlyActivity[i] = 0;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
    hourlyStats.forEach(stat => {
      hourlyActivity[stat.hour] = stat.count;
    });

    return hourlyActivity;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
   */
  private analyzeWeeklyActivity(): { [day: number]: number } {
    const fourWeeksAgo = new Date();
    fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28);
    
    const weeklyStats = this.db.prepare(`
      SELECT 
        CAST(strftime('%w', timestamp) AS INTEGER) as day_of_week,
        COUNT(*) as count
      FROM messages 
      WHERE chat_id = ? 
        AND is_from_bot = 0 
        AND timestamp >= ?
        AND timestamp <= datetime('now')
      GROUP BY day_of_week
      ORDER BY day_of_week
    `).all(this.chatId, fourWeeksAgo.toISOString()) as { day_of_week: number; count: number }[];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏
    const weeklyActivity: { [day: number]: number } = {};
    for (let i = 0; i < 7; i++) {
      weeklyActivity[i] = 0;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
    weeklyStats.forEach(stat => {
      weeklyActivity[stat.day_of_week] = stat.count;
    });

    return weeklyActivity;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 4 –¥–Ω—è–º–∏)
   */
  private calculateActivityTrend(): 'increasing' | 'decreasing' | 'stable' {
    const now = new Date();
    const threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);
    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    const recent = this.db.prepare(`
      SELECT COUNT(*) as count
      FROM messages 
      WHERE chat_id = ? 
        AND is_from_bot = 0 
        AND timestamp >= ?
        AND timestamp <= datetime('now')
    `).get(this.chatId, threeDaysAgo.toISOString()) as { count: number } | undefined;

    // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 4 –¥–Ω—è (7-3 –¥–Ω—è –Ω–∞–∑–∞–¥)  
    const previous = this.db.prepare(`
      SELECT COUNT(*) as count
      FROM messages 
      WHERE chat_id = ? 
        AND is_from_bot = 0 
        AND timestamp >= ?
        AND timestamp < ?
    `).get(this.chatId, sevenDaysAgo.toISOString(), threeDaysAgo.toISOString()) as { count: number } | undefined;

    const recentCount = recent?.count || 0;
    const previousCount = previous?.count || 0;
    
    if (previousCount === 0) return 'stable';
    
    const recentPerDay = recentCount / 3;
    const previousPerDay = previousCount / 4;
    const changeRatio = (recentPerDay - previousPerDay) / previousPerDay;

    if (changeRatio > 0.2) return 'increasing';
    if (changeRatio < -0.2) return 'decreasing';
    return 'stable';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
   */
  public getActivityModifiers(): ActivityModifiers {
    const now = new Date();
    const currentHour = now.getHours();
    const currentDay = now.getDay();
    
    // –ë–∞–∑–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
    const hourlyActivity = this.activityPattern.hourlyActivity[currentHour] || 0;
    const maxHourlyActivity = Math.max(...Object.values(this.activityPattern.hourlyActivity));
    const hourActivity = maxHourlyActivity > 0 ? hourlyActivity / maxHourlyActivity : 0.5;

    // –ë–∞–∑–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    const weeklyActivity = this.activityPattern.weeklyActivity[currentDay] || 0;
    const maxWeeklyActivity = Math.max(...Object.values(this.activityPattern.weeklyActivity));
    const dayActivity = maxWeeklyActivity > 0 ? weeklyActivity / maxWeeklyActivity : 0.5;

    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const combinedActivity = (hourActivity * 0.7) + (dayActivity * 0.3);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (–≤—ã—à–µ 30% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
    const isActiveTime = combinedActivity > 0.3;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
    let responseMultiplier = 0.5 + (combinedActivity * 1.5); // 0.5-2.0
    let delayMultiplier = 2.0 - (combinedActivity * 1.0); // 1.0-2.0

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —Ç—Ä–µ–Ω–¥—É
    switch (this.activityPattern.recentTrend) {
      case 'increasing':
        responseMultiplier *= 1.2;
        delayMultiplier *= 0.8;
        break;
      case 'decreasing':
        responseMultiplier *= 0.8;
        delayMultiplier *= 1.2;
        break;
      // 'stable' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    responseMultiplier = Math.max(0.1, Math.min(3.0, responseMultiplier));
    delayMultiplier = Math.max(0.5, Math.min(2.0, delayMultiplier));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
    const inactivityPeriod = this.getInactivityPeriod();

    return {
      responseMultiplier,
      delayMultiplier,
      isActiveTime,
      inactivityPeriod
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
   */
  private getInactivityPeriod(): number {
    const lastMessage = this.db.prepare(`
      SELECT MAX(timestamp) as last_timestamp
      FROM messages 
      WHERE chat_id = ? AND is_from_bot = 0
    `).get(this.chatId) as { last_timestamp: string } | undefined;

    if (!lastMessage?.last_timestamp) return 0;

    const lastMessageTime = new Date(lastMessage.last_timestamp);
    const now = new Date();
    const diffMs = now.getTime() - lastMessageTime.getTime();
    
    return Math.floor(diffMs / (1000 * 60)); // –≤ –º–∏–Ω—É—Ç–∞—Ö
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  public getActivityStats(): string {
    const modifiers = this.getActivityModifiers();
    const currentHour = this.activityPattern.currentHour;
    const hourActivity = this.activityPattern.hourlyActivity[currentHour] || 0;
    
    return `—á–∞—Å ${currentHour}: ${hourActivity} —Å–æ–æ–±—â–µ–Ω–∏–π, –º–Ω–æ–∂–∏—Ç–µ–ª—å ${modifiers.responseMultiplier.toFixed(2)}x, ${modifiers.isActiveTime ? '–∞–∫—Ç–∏–≤–Ω–æ–µ' : '—Å–ø–æ–∫–æ–π–Ω–æ–µ'} –≤—Ä–µ–º—è, –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${modifiers.inactivityPeriod}–º–∏–Ω`;
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  public close(): void {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
    Logger.info('üìä ActivityManager –∑–∞–∫—Ä—ã—Ç');
  }
}