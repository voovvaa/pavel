import TelegramBot from 'node-telegram-bot-api';
import { config } from './config.js';
import { Logger } from '../utils/logger.js';
import { ResponseEngine } from '../ai/response-engine.js';
import { ImageAnalyzer, ImageContext } from '../ai/image-analyzer.js';
import { BotPersonality } from './types.js';
import { HealthMonitor, HealthStatus } from './health-monitor.js';
import { promises as fs } from 'fs';
import { join } from 'path';

export class DigitalPersonalityBot {
  private bot: TelegramBot;
  private isRunning: boolean = false;
  private responseEngine: ResponseEngine | null = null;
  private imageAnalyzer: ImageAnalyzer | null = null;
  private chatId: string | null = null;
  private processingImages: Set<string> = new Set(); // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private healthMonitor: HealthMonitor | null = null;
  private lastHealthCheck: Date | null = null;

  constructor() {
    this.bot = new TelegramBot(config.telegramBotToken, { polling: true });
    this.setupEventHandlers();
  }

  private setupEventHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    this.bot.on('message', async (msg) => {
      try {
        await this.handleMessage(msg);
      } catch (error) {
        Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error) => {
      Logger.error('–û—à–∏–±–∫–∞ polling:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ webhook
    this.bot.on('webhook_error', (error) => {
      Logger.error('–û—à–∏–±–∫–∞ webhook:', error);
    });
  }

  private async handleMessage(msg: TelegramBot.Message): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ text –∏–ª–∏ caption)
    const messageText = msg.text || msg.caption || '';
    
    if (config.devMode) {
      Logger.debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        chatId: msg.chat.id,
        messageId: msg.message_id,
        chatTitle: msg.chat.title,
        from: msg.from?.first_name,
        text: messageText.substring(0, 100) + (messageText.length > 100 ? '...' : '')
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    if (config.allowedChatId && msg.chat.id.toString() !== config.allowedChatId) {
      Logger.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: ${msg.chat.id}`);
      return;
    }
    if (msg.from?.is_bot) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    const hasText = !!(msg.text || msg.caption);
    const hasImage = !!(msg.photo && msg.photo.length > 0);
    const hasDocument = !!(msg.document && msg.document.mime_type?.startsWith('image/'));
    const hasVoice = !!msg.voice;
    const hasAudio = !!msg.audio;
    const hasVideo = !!msg.video;
    const hasVideoNote = !!msg.video_note;
    const hasSticker = !!msg.sticker;
    const hasAnimation = !!msg.animation;
    const hasOtherDocument = !!(msg.document && !msg.document.mime_type?.startsWith('image/'));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const hasAnyContent = hasText || hasImage || hasDocument || hasVoice || 
                         hasAudio || hasVideo || hasVideoNote || hasSticker || 
                         hasAnimation || hasOtherDocument;

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (!hasAnyContent) return;

    const userName = msg.from?.first_name || msg.from?.username || 'Unknown';
    const currentChatId = msg.chat.id.toString();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if (this.responseEngine && this.chatId !== currentChatId) {
      this.chatId = currentChatId;
      this.responseEngine.initializeMemory(this.chatId);
      Logger.info(`üß† –ü–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞: ${this.chatId}`);
    } else if (this.responseEngine && !this.chatId) {
      // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
      this.chatId = currentChatId;
      this.responseEngine.initializeMemory(this.chatId);
      Logger.info(`üß† –ü–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞: ${this.chatId}`);
    }

    // –≠–¢–ê–ü 7: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let imageAnalysis = null;
    const hasAnalyzableImage = (hasImage || hasDocument) && this.imageAnalyzer;
    
    // –†–µ—à–∞–µ–º —Å—Ç–æ–∏—Ç –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏—è API calls)
    const shouldAnalyzeImage = hasAnalyzableImage && this.shouldAnalyzeImage(msg, userName, messageText);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
    if (this.responseEngine) {
      let memorySaveText = messageText;
      let messageType: 'text' | 'image' | 'media' = 'text';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
      if (hasImage || hasDocument) {
        memorySaveText = messageText ? `[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${messageText}]` : '[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]'; // –î–æ–±–∞–≤–ª—è–µ–º caption –µ—Å–ª–∏ –µ—Å—Ç—å
        messageType = 'image';
      } else if (hasVoice) {
        memorySaveText = '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]';
        messageType = 'media';
      } else if (hasAudio) {
        const audioTitle = msg.audio?.title || '–∞—É–¥–∏–æ—Ñ–∞–π–ª';
        memorySaveText = `[–ê—É–¥–∏–æ: ${audioTitle}]`;
        messageType = 'media';
      } else if (hasVideo) {
        memorySaveText = '[–í–∏–¥–µ–æ]';
        messageType = 'media';
      } else if (hasVideoNote) {
        memorySaveText = '[–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ]';
        messageType = 'media';
      } else if (hasSticker) {
        const stickerEmoji = msg.sticker?.emoji || 'üî•';
        memorySaveText = `[–°—Ç–∏–∫–µ—Ä ${stickerEmoji}]`;
        messageType = 'media';
      } else if (hasAnimation) {
        memorySaveText = '[GIF/–∞–Ω–∏–º–∞—Ü–∏—è]';
        messageType = 'media';
      } else if (hasOtherDocument) {
        const fileName = msg.document?.file_name || '–¥–æ–∫—É–º–µ–Ω—Ç';
        memorySaveText = `[–î–æ–∫—É–º–µ–Ω—Ç: ${fileName}]`;
        messageType = 'media';
      } else if (!hasText) {
        memorySaveText = '[–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞]';
        messageType = 'media';
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
      // –ï—Å–ª–∏ –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å - —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–∑–∂–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
      if (!(hasImage || hasDocument) || !shouldAnalyzeImage) {
        this.responseEngine.updateContext(
          userName, 
          memorySaveText, 
          msg.message_id, 
          messageType,
          undefined
        );
      }
    }

    // –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ì–µ–π—Å–∞–Ω–¥—Ä —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (this.responseEngine) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const shouldRespondToText = hasText && messageText && this.responseEngine.shouldRespond(messageText, userName);
      const shouldRespondToMedia = this.shouldRespondToMedia(msg, userName);
      
      if (shouldRespondToText || shouldAnalyzeImage || shouldRespondToMedia) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        await this.bot.sendChatAction(msg.chat.id, 'typing');
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        const baseThinking = hasImage || hasDocument ? 3000 : 2000;
        const thinkingTime = Math.random() * 3000 + baseThinking;
        await new Promise(resolve => setTimeout(resolve, thinkingTime));
        
        let response = null;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ—à–∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
        if (shouldAnalyzeImage && this.imageAnalyzer) {
          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (messageId + userId)
          const imageKey = `${msg.message_id}_${msg.from?.id || 'unknown'}`;
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (this.processingImages.has(imageKey)) {
            Logger.debug(`üö´ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageKey} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –í–ï–°–¨ –ø—Ä–æ—Ü–µ—Å—Å`);
            // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            const skipMemoryText = messageText ? `[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] ${messageText}` : '[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]';
            this.responseEngine.updateContext(
              userName, 
              skipMemoryText, 
              msg.message_id, 
              'image',
              undefined
            );
            return; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
          this.processingImages.add(imageKey);
          Logger.debug(`üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageKey}`);
          
          try {
            Logger.debug(`üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç ${userName} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...`);
            const imageBuffer = await this.downloadImage(msg);
            if (imageBuffer) {
              const imageContext: ImageContext = {
                chatContext: this.responseEngine.getRecentMessages() || [],
                userName,
                userProfile: this.responseEngine.getUserProfile?.(userName) || undefined,
                personality: this.responseEngine.getPersonality() || {} as BotPersonality,
                messageText: messageText // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
              };
              
              imageAnalysis = await this.imageAnalyzer.analyzeImage(imageBuffer, imageContext);
              
              if (imageAnalysis) {
                Logger.info(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç ${userName}: ${imageAnalysis.description}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
                const imageMemoryText = messageText 
                  ? `[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageAnalysis.description}] ${messageText}` 
                  : `[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageAnalysis.description}]`;
                this.responseEngine.updateContext(
                  userName, 
                  imageMemoryText, 
                  msg.message_id, 
                  'image',
                  imageAnalysis
                );
              }
              
              if (imageAnalysis && this.shouldRespondToImage(imageAnalysis, userName, messageText)) {
                response = await this.imageAnalyzer.generateImageResponse(imageAnalysis, imageContext);
              }
            }
          } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            const errorMemoryText = messageText ? `[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] ${messageText}` : '[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]';
            this.responseEngine.updateContext(
              userName, 
              errorMemoryText, 
              msg.message_id, 
              'image',
              undefined
            );
          } finally {
            // –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.processingImages.delete(imageKey);
          }
        } else if (hasAnalyzableImage) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –º—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å - –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
          Logger.debug(`üñºÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç ${userName}`);
          const skipMemoryText = messageText ? `[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] ${messageText}` : '[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]';
          this.responseEngine.updateContext(
            userName, 
            skipMemoryText, 
            msg.message_id, 
            'image',
            undefined
          );
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (!response && shouldRespondToText && messageText) {
          response = await this.responseEngine.generateResponse(messageText, userName, msg.message_id);
        } else if (!response && shouldRespondToMedia) {
          response = this.generateMediaResponse(msg, userName);
        }
        
        if (response) {
          try {
            const sentMessage = await this.bot.sendMessage(msg.chat.id, response);
            let logContent = '';
            if (hasImage || hasDocument) {
              logContent = `–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (${imageAnalysis?.type}): "${response.substring(0, 100)}..."`;
            } else if (hasVoice || hasAudio || hasVideo || hasVideoNote || hasSticker || hasAnimation || hasOtherDocument) {
              logContent = `–º–µ–¥–∏–∞: "${response.substring(0, 100)}..."`;
            } else {
              logContent = `—Ç–µ–∫—Å—Ç: "${response.substring(0, 100)}..."`;
            }
            Logger.info(`–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${logContent}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
            if (sentMessage.message_id) {
              this.responseEngine.updateContext('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', response, sentMessage.message_id);
            }
          } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
          }
        } else {
          Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å');
        }
      } else {
        Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —Ä–µ—à–∏–ª –Ω–µ –≤—Å—Ç—Ä–µ–≤–∞—Ç—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä');
      }
    } else {
      // Fallback –µ—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –≤ —Å—Ç–∏–ª–µ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞
      const responses = [
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ-—Ç–æ –±–∞—à–∫–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–∞—Ä–∏—Ç, –∑–∞–±—ã–ª –æ —á–µ–º –±–∞–∑–∞—Ä–∏–ª–∏...",
        "–ô–æ! –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –µ—â–µ –Ω–µ –≤—Ä—É–±–∏–ª—Å—è –≤ —Ç–µ–º—É",  
        "–ó–¥–∞—Ä–æ–≤–∞! –ú–æ–∑–≥–∏ –ø–æ–∫–∞ –≥—Ä—É–∑—è—Ç—Å—è, –¥–∞–π –º–∏–Ω—É—Ç–∫—É",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—Ç–æ-—Ç–æ –æ—Ç–≤–ª–µ–∫—Å—è –Ω–∞ –∑–∞–≤–æ–¥—Å–∫–∏–µ –¥–µ–ª–∞, –æ —á–µ–º —Ä–µ—á—å?",
        "–•–∞–π! –¢–æ–ª—å–∫–æ –ø–æ–¥—Ç—è–Ω—É–ª—Å—è, —á—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
        "–î–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤—Å–µ, –ø—Ä–æ—Å—Ç–æ –≥–æ–ª–æ–≤–∞ –ø–æ–∫–∞ —Ç—É–≥–æ —Å–æ–æ–±—Ä–∞–∂–∞–µ—Ç",
        "–°–∞–ª—é—Ç! –ï—â–µ –Ω–µ –≤—Ä—É–±–∏–ª—Å—è —á—Ç–æ –∫ —á–µ–º—É, –ø–æ—è—Å–Ω–∏",
        "–ô–æ-–π–æ! –ë–∞—à–∫–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –Ω–µ –æ—á–µ–Ω—å, –Ω–∞–ø–æ–º–Ω–∏ –æ —á–µ–º –≥–æ–≤–æ—Ä–∏–ª–∏"
      ];
      const response = responses[Math.floor(Math.random() * responses.length)];
      
      try {
        await this.bot.sendMessage(msg.chat.id, response);
        Logger.info(`Fallback –æ—Ç–≤–µ—Ç –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞: "${response}"`);
      } catch (error) {
        Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback –æ—Ç–≤–µ—Ç–∞:', error);
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
   */
  private async downloadImage(msg: TelegramBot.Message): Promise<Buffer | null> {
    try {
      let fileId: string | undefined;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
      if (msg.photo && msg.photo.length > 0) {
        const photo = msg.photo[msg.photo.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω–µ–µ = –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        fileId = photo.file_id;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      else if (msg.document && msg.document.mime_type?.startsWith('image/')) {
        fileId = msg.document.file_id;
      }
      
      if (!fileId) {
        Logger.debug('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω file_id –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return null;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileInfo = await this.bot.getFile(fileId);
      
      if (!fileInfo.file_path) {
        Logger.debug('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω file_path –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return null;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª - downloadFile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –Ω–µ Buffer  
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const filePath = await this.bot.downloadFile(fileId, './temp') as string;
      
      if (typeof filePath === 'string' && filePath.length > 0) {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ Buffer - –ø—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
        const fs = await import('fs');
        const path = await import('path');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—É—Ç—è–º
        let actualPath = filePath;
        if (!fs.existsSync(filePath)) {
          // –ü—Ä–æ–±—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
          actualPath = path.resolve(filePath);
        }
        
        if (!fs.existsSync(actualPath)) {
          Logger.debug(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –ø—É—Ç–∏ ${filePath}, –Ω–∏ –ø–æ –ø—É—Ç–∏ ${actualPath}`);
          return null;
        }
        
        const fileBuffer = fs.readFileSync(actualPath);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(actualPath);
        
        Logger.debug(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${fileBuffer.length} –±–∞–π—Ç`);
        return fileBuffer;
      } else {
        Logger.debug(`‚ùå downloadFile –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${typeof filePath}`);
      }
      
      return null;
      
    } catch (error: any) {
      Logger.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏—Ç –ª–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  /**
   * –†–µ—à–∞–µ—Ç —Å—Ç–æ–∏—Ç –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π (—ç–∫–æ–Ω–æ–º–∏—è API calls)
   */
  private shouldAnalyzeImage(msg: TelegramBot.Message, userName: string, messageText: string): boolean {
    // –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú RATE LIMIT - –¥–∞–∂–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤  
    if (this.imageAnalyzer) {
      const usageStats = this.imageAnalyzer.getUsageStats();
      if (usageStats.rateLimitedUsers.includes(userName)) {
        Logger.debug(`‚è∞ Rate limit –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç ${userName}`);
        return false;
      }
    }
    
    // –í–°–ï–ì–î–ê –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
    if (messageText && messageText.trim()) {
      return true;
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    const random = Math.random();
    
    // 60% —à–∞–Ω—Å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    // (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –±—é–¥–∂–µ—Ç)
    return random < 0.6;
  }

  private shouldRespondToImage(imageAnalysis: any, userName: string, messageText: string): boolean {
    // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ –∞–Ω–∞–ª–∏–∑–∞ - –∑–Ω–∞—á–∏—Ç —É–∂–µ —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—á–∞—Ç—å
    // –ù–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    
    // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if (messageText && messageText.trim()) {
      return true;
    }
    
    // –í—Å–µ–≥–¥–∞ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —é–º–æ—Ä –∏ –º–µ–º—ã
    if (imageAnalysis.isHumorous || imageAnalysis.type === 'meme') {
      return true;
    }
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º (OCR)
    if (imageAnalysis.containsText && imageAnalysis.textContent) {
      return true;
    }
    
    // –ù–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - 80% —à–∞–Ω—Å (–º—ã —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑, —Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å)
    return Math.random() < 0.8;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏—Ç –ª–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  private shouldRespondToMedia(msg: TelegramBot.Message, userName: string): boolean {
    // –ß–∞—â–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã (–æ–Ω–∏ –æ–±—ã—á–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
    if (msg.sticker) {
      return Math.random() < 0.4; // 40% —à–∞–Ω—Å
    }
    
    // –°—Ä–µ–¥–Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (msg.voice || msg.video_note) {
      return Math.random() < 0.3; // 30% —à–∞–Ω—Å
    }
    
    // –†–µ–∂–µ –Ω–∞ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
    if (msg.audio || msg.video) {
      return Math.random() < 0.2; // 20% —à–∞–Ω—Å
    }
    
    // –†–µ–¥–∫–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    if (msg.document || msg.animation) {
      return Math.random() < 0.15; // 15% —à–∞–Ω—Å
    }
    
    return false;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  private generateMediaResponse(msg: TelegramBot.Message, userName: string): string | null {
    const responses = {
      sticker: [
        "–ù–æ—Ä–º —Å—Ç–∏–∫–µ—Ä",
        "–•–∞—Ö, –≤ —Ç–æ—á–∫—É",
        "–ù–µ–ø–ª–æ—Ö–æ–π —Å—Ç–∏–∫–µ—Ä", 
        "üëç",
        "–õ–æ–ª",
        "–ü—Ä–∏–∫–æ–ª—å–Ω–æ",
        "–í —Ç–µ–º—É"
      ],
      voice: [
        "–°–ª—ã—à—É, —Å–ª—ã—à—É",
        "–ì–æ–ª–æ—Å–æ–≤—É—Ö—É –ø—Ä–∏—Å–ª–∞–ª, —Å–µ—Ä—å–µ–∑–Ω—ã–µ –¥–µ–ª–∞ —á—Ç–æ –ª–∏",
        "–ù–µ –º–æ–≥—É –ø–æ—Å–ª—É—à–∞—Ç—å —â–∞—Å, –Ω–æ –ø—Ä–∏–Ω—è–ª",
        "–ß—Ç–æ —Ç–∞–º –≥–æ–≤–æ—Ä–∏—à—å?",
        "–ì–æ–ª–æ—Å–æ–º –±–∞–∑–∞—Ä–∏–º, —Å–æ–ª–∏–¥–Ω–æ",
        "–ù—É –¥–∞–≤–∞–π, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π"
      ],
      video_note: [
        "–ö—Ä—É–∂–æ—á–µ–∫ –∑–∞–ø–∏—Å–∞–ª, —á–µ —Ç–∞–º?",
        "–í–∏–¥–æ—Å–∏–∫ –≥–ª—è–Ω—É–ª",
        "–ß—Ç–æ —Ç–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å?",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        "–ü—Ä–∏–Ω—è–ª, –ø–æ—Å–º–æ—Ç—Ä—é",
        "–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏?"
      ],
      audio: [
        "–ú—É–∑—ã–∫–∞ —á—Ç–æ –ª–∏?",
        "–ß—Ç–æ –∑–∞ —Ç—Ä–µ–∫ –ø—Ä–∏—Å–ª–∞–ª?",
        "–ü–æ—Å–ª—É—à–∞—é –ø–æ–ø–æ–∑–∂–µ",
        "–ß—Ç–æ –∑–∞ –∞—É–¥–∏–æ?",
        "–ú—É–∑–æ–Ω?"
      ],
      video: [
        "–í–∏–¥–æ—Å –ø—Ä–∏—Å–ª–∞–ª, –≥–ª—è–Ω–µ–º",
        "–ß—Ç–æ —Ç–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ?",
        "–í–∏–¥–µ–æ –ø—Ä–∏–Ω—è–ª",
        "–ü–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç–∞–º",
        "–ß–µ –∑–∞ –≤–∏–¥–µ–æ?"
      ],
      animation: [
        "–ì–∏—Ñ–∫–∞ –Ω–æ—Ä–º",
        "–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞—á–µ—Ç–Ω–∞—è",
        "–î–≤–∏–∂—É—Ö–∞",
        "–ü—Ä–∏–∫–æ–ª—å–Ω–∞—è –≥–∏—Ñ–∫–∞",
        "–ù–µ–ø–ª–æ—Ö–∞—è –∞–Ω–∏–º–∞—Ü–∏—è"
      ],
      document: [
        "–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω",
        "–ß—Ç–æ –∑–∞ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å–ª–∞–ª?",
        "–ü–æ—Å–º–æ—Ç—Ä—é —á—Ç–æ —Ç—É—Ç",
        "–§–∞–π–ª—ã –ø—Ä–∏–Ω—è–ª",
        "–ß–µ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã?"
      ]
    };

    let mediaType: string | null = null;
    
    if (msg.sticker) mediaType = 'sticker';
    else if (msg.voice) mediaType = 'voice';
    else if (msg.video_note) mediaType = 'video_note';
    else if (msg.audio) mediaType = 'audio';
    else if (msg.video) mediaType = 'video';
    else if (msg.animation) mediaType = 'animation';
    else if (msg.document) mediaType = 'document';

    if (mediaType && responses[mediaType as keyof typeof responses]) {
      const mediaResponses = responses[mediaType as keyof typeof responses];
      return mediaResponses[Math.floor(Math.random() * mediaResponses.length)];
    }

    return null;
  }

  public async stop(): Promise<void> {
    if (!this.isRunning) return;

    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∞–º—è—Ç—å—é
      if (this.responseEngine) {
        this.responseEngine.close();
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º health monitor
      if (this.healthMonitor) {
        this.healthMonitor.close();
      }
      
      await this.bot.stopPolling();
      this.isRunning = false;
      Logger.info('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –∑–∞—Å–Ω—É–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è');
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—ã–ø–ª–µ–Ω–∏–∏ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å
   */
  async loadPersonality(personalityPath: string): Promise<void> {
    try {
      Logger.info(`–ò–∑—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${personalityPath}`);
      
      const personalityData = await fs.readFile(personalityPath, 'utf-8');
      const personality: BotPersonality = JSON.parse(personalityData);
      
      // –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ë–ï–ó –ø–∞–º—è—Ç–∏ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º chatId
      this.responseEngine = new ResponseEngine(personality);
      
      // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      this.imageAnalyzer = new ImageAnalyzer(personality);
      
      Logger.info(`‚úÖ –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –∏–∑—É—á–∏–ª —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: ${personality.patterns.length} –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π`);
      Logger.info(`–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${config.aiMode} (–º–æ–¥–µ–ª—å: ${config.openaiModel})`);
      Logger.info(`–û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${(personality.responseStyle.activityLevel * 100).toFixed(1)}%`);
      Logger.info(`‚è≥ –ü–∞–º—è—Ç—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏`);
      
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:', error);
      throw error;
    }
  }

  public async start(): Promise<void> {
    if (this.isRunning) {
      Logger.warn('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }

    try {
      const botInfo = await this.bot.getMe();
      Logger.info(`–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –ø—Ä–æ—Å–Ω—É–ª—Å—è: @${botInfo.username} (${botInfo.first_name})`);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
      if (!this.responseEngine) {
        const personalityPath = 'chat/result_personality.json';
        try {
          await this.loadPersonality(personalityPath);
        } catch (error) {
          Logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –∏–∑ ${personalityPath}: ${error}`);
          Logger.info('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ fallback —Ä–µ–∂–∏–º–µ');
        }
      }
      
      this.isRunning = true;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º health monitor
      this.healthMonitor = new HealthMonitor(this.chatId || undefined);
      
      // –ü—Ä–æ–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
      try {
        const healthStatus = await this.healthMonitor.getHealthStatus();
        Logger.info(`ü•∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: ${healthStatus.status.toUpperCase()}`);
        if (healthStatus.status !== 'healthy') {
          Logger.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: bun run health-check');
        }
        this.lastHealthCheck = new Date();
      } catch (error) {
        Logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è:', error);
      }
      
      if (this.responseEngine) {
        Logger.info('üß† –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –≤—Å–ø–æ–º–Ω–∏–ª —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!');
        Logger.info(`ü§ñ AI —Ä–µ–∂–∏–º: ${config.aiMode} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(config.aiProbability * 100).toFixed(0)}%)`);
        Logger.info(`üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${this.imageAnalyzer?.isAvailable() ? this.imageAnalyzer.getModelInfo() : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
        Logger.info(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${config.databasePath} (–ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)`);
      } else {
        Logger.warn('‚ö†Ô∏è –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —á—Ç–æ-—Ç–æ –ø–æ–¥–∑–∞–±—ã–ª —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ (fallback —Ä–µ–∂–∏–º)');
        Logger.info('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –ª–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π: bun run patterns result_analysis.json');
      }

    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞:', error);
      throw error;
    }
  }

  public getBotInfo(): any {
    return this.bot.getMe();
  }

  public getContextStats() {
    return this.responseEngine?.getContextStats() || null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  public async getHealthStatus(): Promise<HealthStatus | null> {
    if (!this.healthMonitor) {
      return null;
    }
    
    try {
      const status = await this.healthMonitor.getHealthStatus();
      this.lastHealthCheck = new Date();
      return status;
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è:', error);
      return null;
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
   */
  public async quickHealthCheck(): Promise<{ status: string; message: string } | null> {
    if (!this.healthMonitor) {
      return null;
    }
    
    try {
      return await this.healthMonitor.quickHealthCheck();
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
      return { status: 'error', message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏' };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
   */
  private shouldUpdateHealthStatus(): boolean {
    if (!this.lastHealthCheck) return true;
    
    const thirtyMinutes = 30 * 60 * 1000;
    return (Date.now() - this.lastHealthCheck.getTime()) > thirtyMinutes;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  public initializeMemoryForChat(chatId: string): void {
    if (this.responseEngine) {
      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º chatId
      this.chatId = chatId;
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      Logger.info(`–ü–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
    }
  }
}