import TelegramBot from 'node-telegram-bot-api';
import { config } from './config.js';
import { Logger } from '../utils/logger.js';
import { ResponseEngine } from '../ai/response-engine.js';
import { BotPersonality } from './types.js';
import { promises as fs } from 'fs';

export class DigitalPersonalityBot {
  private bot: TelegramBot;
  private isRunning: boolean = false;
  private responseEngine: ResponseEngine | null = null;
  private chatId: string | null = null;

  constructor() {
    this.bot = new TelegramBot(config.telegramBotToken, { polling: true });
    this.setupEventHandlers();
  }

  private setupEventHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      try {
        await this.handleMessage(msg);
      } catch (error) {
        Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error) => {
      Logger.error('–û—à–∏–±–∫–∞ polling:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ webhook
    this.bot.on('webhook_error', (error) => {
      Logger.error('–û—à–∏–±–∫–∞ webhook:', error);
    });
  }

  private async handleMessage(msg: TelegramBot.Message): Promise<void> {
    if (config.devMode) {
      Logger.debug('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        chatId: msg.chat.id,
        messageId: msg.message_id,
        chatTitle: msg.chat.title,
        from: msg.from?.first_name,
        text: msg.text?.substring(0, 100) + (msg.text && msg.text.length > 100 ? '...' : '')
      });
    }

    if (!msg.text) return;
    if (config.allowedChatId && msg.chat.id.toString() !== config.allowedChatId) {
      Logger.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: ${msg.chat.id}`);
      return;
    }
    if (msg.from?.is_bot) return;

    const userName = msg.from?.first_name || msg.from?.username || 'Unknown';
    const currentChatId = msg.chat.id.toString();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    Logger.debug(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏: currentChatId=${currentChatId}, this.chatId=${this.chatId}, responseEngine=${!!this.responseEngine}`);
    
    if (this.responseEngine && this.chatId !== currentChatId) {
      this.chatId = currentChatId;
      this.responseEngine.initializeMemory(this.chatId);
      Logger.info(`üß† –ü–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞: ${this.chatId}`);
    } else if (this.responseEngine && !this.chatId) {
      // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
      this.chatId = currentChatId;
      this.responseEngine.initializeMemory(this.chatId);
      Logger.info(`üß† –ü–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞: ${this.chatId}`);
    } else if (this.responseEngine && this.chatId === currentChatId) {
      Logger.debug(`–ü–∞–º—è—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞: ${this.chatId}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
    if (this.responseEngine) {
      this.responseEngine.updateContext(userName, msg.text, msg.message_id);
    }

    // –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –≠–¢–ê–ü–ê 5: –ì–µ–π—Å–∞–Ω–¥—Ä —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é
    if (this.responseEngine) {
      if (this.responseEngine.shouldRespond(msg.text, userName)) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        await this.bot.sendChatAction(msg.chat.id, 'typing');
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ (—É–≤–µ–ª–∏—á–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é)
        const thinkingTime = Math.random() * 3000 + 2000; // 2-5 —Å–µ–∫—É–Ω–¥ (–ø–∞–º—è—Ç—å —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏)
        await new Promise(resolve => setTimeout(resolve, thinkingTime));
        
        const response = await this.responseEngine.generateResponse(msg.text, userName, msg.message_id);
        
        if (response) {
          try {
            const sentMessage = await this.bot.sendMessage(msg.chat.id, response);
            Logger.info(`–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –æ—Ç–≤–µ—Ç–∏–ª –≤ —á–∞—Ç ${msg.chat.id}: "${response.substring(0, 100)}..."`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
            if (sentMessage.message_id) {
              this.responseEngine.updateContext('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', response, sentMessage.message_id);
            }
          } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
          }
        } else {
          Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å');
        }
      } else {
        Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —Ä–µ—à–∏–ª –Ω–µ –≤—Å—Ç—Ä–µ–≤–∞—Ç—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä');
      }
    } else {
      // Fallback –µ—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      const responses = [
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ-—Ç–æ –≥–æ–ª–æ–≤–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–∞—Ä–∏—Ç, –∑–∞–±—ã–ª –æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏...",
        "–ô–æ! –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –µ—â–µ –Ω–µ –≤–∫–ª—é—á–∏–ª—Å—è –≤ —Ç–µ–º—É",  
        "–ó–¥–∞—Ä–æ–≤–∞! –ú–æ–∑–≥ –ø–æ–∫–∞ –≥—Ä—É–∑–∏—Ç—Å—è, –¥–∞–π –º–∏–Ω—É—Ç–∫—É",
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ-—Ç–æ –æ—Ç–≤–ª–µ–∫—Å—è, –æ —á–µ–º —Ä–µ—á—å?",
        "–•–∞–π! –¢–æ–ª—å–∫–æ –∑–∞—à–µ–ª, —á—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
      ];
      const response = responses[Math.floor(Math.random() * responses.length)];
      
      try {
        await this.bot.sendMessage(msg.chat.id, response);
        Logger.info(`Fallback –æ—Ç–≤–µ—Ç –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞: "${response}"`);
      } catch (error) {
        Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback –æ—Ç–≤–µ—Ç–∞:', error);
      }
    }
  }


  public async stop(): Promise<void> {
    if (!this.isRunning) return;

    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∞–º—è—Ç—å—é
      if (this.responseEngine) {
        this.responseEngine.close();
      }
      
      await this.bot.stopPolling();
      this.isRunning = false;
      Logger.info('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –∑–∞—Å–Ω—É–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è');
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—ã–ø–ª–µ–Ω–∏–∏ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å
   */
  async loadPersonality(personalityPath: string): Promise<void> {
    try {
      Logger.info(`–ò–∑—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${personalityPath}`);
      
      const personalityData = await fs.readFile(personalityPath, 'utf-8');
      const personality: BotPersonality = JSON.parse(personalityData);
      
      // –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ë–ï–ó –ø–∞–º—è—Ç–∏ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º chatId
      this.responseEngine = new ResponseEngine(personality);
      
      Logger.info(`‚úÖ –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –∏–∑—É—á–∏–ª —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: ${personality.patterns.length} –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π`);
      Logger.info(`–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${config.aiMode} (–º–æ–¥–µ–ª—å: ${config.openaiModel})`);
      Logger.info(`–û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${(personality.responseStyle.activityLevel * 100).toFixed(1)}%`);
      Logger.info(`‚è≥ –ü–∞–º—è—Ç—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏`);
      
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:', error);
      throw error;
    }
  }

  public async start(): Promise<void> {
    if (this.isRunning) {
      Logger.warn('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }

    try {
      const botInfo = await this.bot.getMe();
      Logger.info(`–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –ø—Ä–æ—Å–Ω—É–ª—Å—è: @${botInfo.username} (${botInfo.first_name})`);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
      if (!this.responseEngine) {
        const personalityPath = 'chat/result_personality.json';
        try {
          await this.loadPersonality(personalityPath);
        } catch (error) {
          Logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å –∏–∑ ${personalityPath}: ${error}`);
          Logger.info('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ fallback —Ä–µ–∂–∏–º–µ');
        }
      }
      
      this.isRunning = true;
      
      if (this.responseEngine) {
        Logger.info('üß† –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –≤—Å–ø–æ–º–Ω–∏–ª —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é!');
        Logger.info(`ü§ñ AI —Ä–µ–∂–∏–º: ${config.aiMode} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(config.aiProbability * 100).toFixed(0)}%)`);
        Logger.info(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${config.databasePath} (–ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)`);
      } else {
        Logger.warn('‚ö†Ô∏è –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —á—Ç–æ-—Ç–æ –ø–æ–¥–∑–∞–±—ã–ª —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ (fallback —Ä–µ–∂–∏–º)');
        Logger.info('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –ª–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π: bun run patterns result_analysis.json');
      }

    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞:', error);
      throw error;
    }
  }

  public getBotInfo(): any {
    return this.bot.getMe();
  }

  public getContextStats() {
    return this.responseEngine?.getContextStats() || null;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  public initializeMemoryForChat(chatId: string): void {
    if (this.responseEngine) {
      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º chatId
      this.chatId = chatId;
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      Logger.info(`–ü–∞–º—è—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞: ${chatId}`);
    }
  }
}