import { TelegramParser } from './parser.js';
import { ChatAnalyzer } from './analytics.js';
import { Logger } from './logger.js';
import { promises as fs } from 'fs';
import { 
  TelegramExport, 
  TelegramExportMessage, 
  ChatAnalytics,
  ResponsePattern,
  TriggerPattern,
  BotPersonality 
} from './types.js';

export class PatternExtractor {
  private export: TelegramExport;
  private analytics: ChatAnalytics;
  private messagesForPatterns: TelegramExportMessage[];

  constructor(exportData: TelegramExport, analytics: ChatAnalytics) {
    this.export = exportData;
    this.analytics = analytics;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–≤–∫–ª—é—á–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏)
    this.messagesForPatterns = TelegramParser.filterMessagesForPatterns(exportData.messages);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞
   */
  extractPersonality(): BotPersonality {
    Logger.info('üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...');
    
    const patterns = this.extractTriggerPatterns();
    const responseStyle = this.analyzeResponseStyle();
    const schedule = this.analyzeActivitySchedule();
    
    const personality: BotPersonality = {
      patterns,
      responseStyle,
      schedule
    };

    Logger.info(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${patterns.length}`);
    return personality;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã "–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç" –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  private extractTriggerPatterns(): TriggerPattern[] {
    const patterns: TriggerPattern[] = [];
    const questionWords = ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ', '–∫–∞–∫–æ–π'];
    const responseMap = new Map<string, string[]>();

    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    for (let i = 0; i < this.messagesForPatterns.length - 1; i++) {
      const currentMsg = this.messagesForPatterns[i];
      const nextMsg = this.messagesForPatterns[i + 1];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–µ–≥–æ–≤
      const currentText = TelegramParser.extractCleanText(currentMsg).toLowerCase();
      const nextText = TelegramParser.extractCleanText(nextMsg);
      
      if (!currentText || !nextText) continue;
      if (currentMsg.from === nextMsg.from) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
      
      // –ò—â–µ–º –≤–æ–ø—Ä–æ—Å—ã
      const isQuestion = currentText.includes('?') || 
                        questionWords.some(word => currentText.includes(word));
      
      if (isQuestion && nextText.length > 5 && nextText.length < 200) {
        const key = this.normalizeText(currentText);
        if (!responseMap.has(key)) {
          responseMap.set(key, []);
        }
        responseMap.get(key)!.push(nextText);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä
    let patternId = 1;
    for (const [trigger, responses] of responseMap) {
      if (responses.length >= 2) {
        const keywords = this.extractKeywords(trigger);
        patterns.push({
          id: `pattern_${patternId++}`,
          keywords,
          responses: [...new Set(responses)],
          weight: responses.length,
          context: trigger.substring(0, 100)
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤ (–±–µ–∑ —Ç–µ–≥–æ–≤)
    const popularWords = this.analytics.popularWords.slice(0, 20);
    for (const wordData of popularWords) {
      const relatedResponses = this.findResponsesToWord(wordData.word);
      if (relatedResponses.length >= 3) {
        patterns.push({
          id: `word_${wordData.word}`,
          keywords: [wordData.word],
          responses: relatedResponses,
          weight: wordData.count / 10,
          context: `–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–ª–æ–≤–æ "${wordData.word}"`
        });
      }
    }

    return patterns.sort((a, b) => b.weight - a.weight).slice(0, 50);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –≤ —á–∞—Ç–µ —Å —á–∏—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
   */
  private analyzeResponseStyle() {
    const allTexts = this.messagesForPatterns
      .map(msg => TelegramParser.extractCleanText(msg))
      .filter(text => text.length > 0);

    const totalLength = allTexts.reduce((sum, text) => sum + text.length, 0);
    const averageLength = Math.round(totalLength / allTexts.length);

    const commonPhrases = this.extractCommonPhrases();
    
    return {
      averageLength,
      commonWords: this.analytics.popularWords.slice(0, 30).map(w => w.word),
      commonEmojis: this.analytics.popularEmojis.slice(0, 15).map(e => e.emoji),
      formalityLevel: this.calculateFormalityLevel(),
      activityLevel: this.calculateActivityLevel()
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private analyzeActivitySchedule() {
    // –ù–∞—Ö–æ–¥–∏–º —á–∞—Å—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    const hourlyActivity = this.analytics.timeActivity;
    const averageHourly = Object.values(hourlyActivity).reduce((a, b) => a + b, 0) / 24;
    
    const activeHours = Object.entries(hourlyActivity)
      .filter(([_, count]) => count > averageHourly * 0.5)
      .map(([hour, _]) => parseInt(hour));

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    const dailyActivity = this.analytics.dayActivity;
    const averageDaily = Object.values(dailyActivity).reduce((a, b) => a + b, 0) / 7;
    
    const activeDays = Object.entries(dailyActivity)
      .filter(([_, count]) => count > averageDaily * 0.3)
      .map(([day, _]) => parseInt(day));

    return {
      activeHours: activeHours.sort((a, b) => a - b),
      activeDays: activeDays.sort((a, b) => a - b)
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractKeywords(text: string): string[] {
    const words = TelegramParser.extractWords(text);
    return words.slice(0, 5); // –¢–æ–ø 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private normalizeText(text: string): string {
    return TelegramParser.cleanTextForWordAnalysis(text)
      .replace(/\s+/g, ' ')
      .trim()
      .substring(0, 100);
  }

  /**
   * –ò—â–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
   */
  private findResponsesToWord(word: string): string[] {
    const responses: string[] = [];
    
    for (let i = 0; i < this.messagesForPatterns.length - 1; i++) {
      const currentMsg = this.messagesForPatterns[i];
      const nextMsg = this.messagesForPatterns[i + 1];
      
      const currentText = TelegramParser.extractCleanText(currentMsg).toLowerCase();
      const nextText = TelegramParser.extractCleanText(nextMsg);
      
      if (currentText.includes(word.toLowerCase()) && 
          nextText && 
          nextText.length > 3 && 
          nextText.length < 150 &&
          currentMsg.from !== nextMsg.from) {
        responses.push(nextText);
      }
    }
    
    return [...new Set(responses)].slice(0, 10);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—Ä–∞–∑—ã (–±–µ–∑ —Ç–µ–≥–æ–≤)
   */
  private extractCommonPhrases(): string[] {
    const phraseCount = new Map<string, number>();
    
    for (const message of this.messagesForPatterns) {
      const text = TelegramParser.extractCleanText(message);
      if (text.length < 5) continue;
      
      const phrases = text.split(/[.!?]+/).map(p => p.trim()).filter(p => p.length > 10);
      
      for (const phrase of phrases) {
        const normalized = this.normalizeText(phrase);
        if (normalized.length > 10) {
          phraseCount.set(normalized, (phraseCount.get(normalized) || 0) + 1);
        }
      }
    }
    
    return Array.from(phraseCount.entries())
      .filter(([_, count]) => count >= 3)
      .sort(([_, a], [__, b]) => b - a)
      .slice(0, 20)
      .map(([phrase, _]) => phrase);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
   */
  private calculateFormalityLevel(): number {
    const allText = this.messagesForPatterns
      .map(msg => TelegramParser.extractCleanText(msg))
      .join(' ')
      .toLowerCase();

    const formalMarkers = ['–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–ø—Ä–æ—Å—Ç–∏—Ç–µ'];
    const informalMarkers = ['–ø—Ä–∏–≤–µ—Ç', '–ø–æ–∫–∞', '—Å–ø–∞—Å–∏–±–æ', '–¥–∞—Ä–æ–≤–∞', '–∑–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', '–±–∞–π'];
    
    const formalCount = formalMarkers.reduce((count, word) => {
      return count + (allText.match(new RegExp(word, 'g')) || []).length;
    }, 0);
    
    const informalCount = informalMarkers.reduce((count, word) => {
      return count + (allText.match(new RegExp(word, 'g')) || []).length;
    }, 0);
    
    if (formalCount + informalCount === 0) return 0.5;
    return formalCount / (formalCount + informalCount);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private calculateActivityLevel(): number {
    const totalMessages = this.messagesForPatterns.length;
    const uniqueUsers = new Set(this.messagesForPatterns.map(msg => 
      TelegramParser.normalizeUserName(msg)
    )).size;
    
    if (uniqueUsers === 0) return 0.1;
    
    const messagesPerUser = totalMessages / uniqueUsers;
    return Math.min(1, messagesPerUser / 1000);
  }
}