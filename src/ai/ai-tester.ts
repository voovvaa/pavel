import { TelegramParser } from '../analysis/parser.js';
import { ChatAnalyzer } from '../analysis/analytics.js';
import { PatternExtractor } from '../analysis/pattern-extractor.js';
import { AIEngine } from './ai-engine.js';
import { Logger } from '../utils/logger.js';
import { promises as fs } from 'fs';
import { validateConfig } from '../core/config.js';
import { ModelSelector } from './model-selector.js';

async function main() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
    const modelSelector = new ModelSelector();
    await modelSelector.ensureModelConfigured();
    
    validateConfig();
    
    const personalityPath = process.argv[2] || './personality.json';
    
    try {
      await fs.access(personalityPath);
    } catch {
      Logger.error(`–§–∞–π–ª –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${personalityPath}`);
      Logger.error('–°–æ–∑–¥–∞–π—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–æ–π: bun run patterns result_analysis.json');
      process.exit(1);
    }

    Logger.info('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –¥–≤–∏–∂–æ–∫...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å
    const personalityData = JSON.parse(await fs.readFile(personalityPath, 'utf-8'));
    const aiEngine = new AIEngine(personalityData);
    
    if (!aiEngine.isAvailable()) {
      Logger.error('AI –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY');
      process.exit(1);
    }

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const testMessages = [
      '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',
      '–ß—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?',
      '–ì–µ–π—Å–∞–Ω–¥—Ä, —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç',
      '–ö–∞–∫ –ø—Ä–æ—à–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ?',
      '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?'
    ];

    const context = {
      recentMessages: [],
      activeUsers: new Set(['–¢–µ—Å—Ç–µ—Ä']),
      messagesSinceLastResponse: 0
    };

    console.log('\n' + '='.repeat(60));
    console.log('ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –û–¢–í–ï–¢–û–í');
    console.log('='.repeat(60));

    for (const message of testMessages) {
      console.log(`\nüë§ –¢–µ—Å—Ç–µ—Ä: ${message}`);
      console.log('ü§ñ –ì–µ–π—Å–∞–Ω–¥—Ä –¥—É–º–∞–µ—Ç...');
      
      const response = await aiEngine.generateResponse(message, '–¢–µ—Å—Ç–µ—Ä', context);
      
      if (response) {
        console.log(`üé≠ –ì–µ–π—Å–∞–Ω–¥—Ä: ${response}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        (context.recentMessages as Array<{text: string; author: string; timestamp: Date}>).push(
          { text: message, author: '–¢–µ—Å—Ç–µ—Ä', timestamp: new Date() },
          { text: response, author: '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', timestamp: new Date() }
        );
      } else {
        console.log('ü§ê –ì–µ–π—Å–∞–Ω–¥—Ä –ø—Ä–æ–º–æ–ª—á–∞–ª');
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('\n' + '='.repeat(60));
    console.log('\uD83E\uDD16 –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –û–¢–í–ï–¢–û–í');
    console.log('='.repeat(60));

    for (const message of testMessages) {
      console.log(`\n\uD83D\uDC64 –¢–µ—Å—Ç–µ—Ä: ${message}`);
      console.log('\uD83E\uDD16 –ì–µ–π—Å–∞–Ω–¥—Ä –¥—É–º–∞–µ—Ç...');
      
      const response = await aiEngine.generateResponse(message, '–¢–µ—Å—Ç–µ—Ä', context);
      
      if (response) {
        console.log(`\uD83C\uDFAD –ì–µ–π—Å–∞–Ω–¥—Ä: ${response}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        (context.recentMessages as Array<{text: string; author: string; timestamp: Date}>).push(
          { text: message, author: '–¢–µ—Å—Ç–µ—Ä', timestamp: new Date() },
          { text: response, author: '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', timestamp: new Date() }
        );
      } else {
        console.log('\uD83E\uDD10 –ì–µ–π—Å–∞–Ω–¥—Ä –ø—Ä–æ–º–æ–ª—á–∞–ª');
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('='.repeat(60) + '\n');

  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}