import { ResponseEngine } from './response-engine.js';
import { UserProfiler } from '../analysis/user-profiler.js';
import { Logger } from '../utils/logger.js';
import { validateConfig } from '../core/config.js';
import { promises as fs } from 'fs';

async function main() {
  try {
    validateConfig();
    
    const personalityPath = 'chat/result_personality.json';
    const chatId = '316537427';
    
    try {
      await fs.access(personalityPath);
    } catch {
      Logger.error(`–§–∞–π–ª –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${personalityPath}`);
      process.exit(1);
    }

    console.log('\n' + '='.repeat(80));
    console.log('‚ö° –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò: Reasoning vs Non-Reasoning');
    console.log('='.repeat(80));
    
    const personalityData = JSON.parse(await fs.readFile(personalityPath, 'utf-8'));
    const profiler = new UserProfiler(chatId);
    const profiles = await profiler.analyzeAllUsers();
    const topUser = profiles.sort((a, b) => b.messageCount - a.messageCount)[0];
    
    console.log(`\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å: ${topUser.userName}\n`);
    
    const testMessage = '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?';
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const configs = [
      {
        name: 'GPT-5 Nano (reasoning: low)',
        model: 'gpt-5-nano',
        reasoning: 'low',
        description: '–° —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –Ω–∞ –º–∏–Ω–∏–º—É–º–µ'
      },
      {
        name: 'GPT-5 Nano (reasoning: minimal)',
        model: 'gpt-5-nano', 
        reasoning: 'minimal',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è'
      },
      {
        name: 'GPT-5 Chat Latest',
        model: 'gpt-5-chat-latest',
        reasoning: null,
        description: '–ë–µ–∑ reasoning —Ç–æ–∫–µ–Ω–æ–≤'
      }
    ];
    
    const results: Array<{
      name: string;
      time: number;
      response: string;
      reasoningTokens: number;
      totalTokens: number;
    }> = [];
    
    for (const testConfig of configs) {
      console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testConfig.name}`);
      console.log(`   üìù ${testConfig.description}`);
      
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        process.env.OPENAI_MODEL = testConfig.model;
        const { config } = await import('../core/config.js');
        (config as any).openaiModel = testConfig.model;
        
        // –ï—Å–ª–∏ —ç—Ç–æ nano —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–º –∫–æ–¥
        let originalReasoning: string | undefined;
        if (testConfig.reasoning === 'minimal') {
          // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª ai-engine.ts –∏ –º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
          const aiEnginePath = '/Users/voovaa/projects/pavel/src/ai/ai-engine.ts';
          let aiEngineContent = await fs.readFile(aiEnginePath, 'utf-8');
          
          if (aiEngineContent.includes("requestParams.reasoning_effort = 'low';")) {
            originalReasoning = 'low';
            aiEngineContent = aiEngineContent.replace(
              "requestParams.reasoning_effort = 'low';",
              "requestParams.reasoning_effort = 'minimal';"
            );
            await fs.writeFile(aiEnginePath, aiEngineContent);
            console.log(`   üîß –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ reasoning –Ω–∞ 'minimal'`);
          }
        }
        
        const responseEngine = new ResponseEngine(personalityData, chatId);
        
        console.log(`   ‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...`);
        const startTime = Date.now();
        const response = await responseEngine.generateResponse(testMessage, topUser.userName, Date.now());
        const endTime = Date.now();
        
        const time = endTime - startTime;
        
        if (response) {
          console.log(`   üí≠ "${response}"`);
          console.log(`   ‚è±Ô∏è  ${time}ms`);
          console.log(`   üìè ${response.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          
          results.push({
            name: testConfig.name,
            time,
            response,
            reasoningTokens: 0, // –ò–∑–≤–ª–µ—á–µ–º –∏–∑ –ª–æ–≥–æ–≤
            totalTokens: 0
          });
        } else {
          console.log(`   ü§ê –ù–µ –æ—Ç–≤–µ—Ç–∏–ª`);
        }
        
        responseEngine.close();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (originalReasoning && testConfig.reasoning === 'minimal') {
          const aiEnginePath = '/Users/voovaa/projects/pavel/src/ai/ai-engine.ts';
          let aiEngineContent = await fs.readFile(aiEnginePath, 'utf-8');
          aiEngineContent = aiEngineContent.replace(
            "requestParams.reasoning_effort = 'minimal';",
            "requestParams.reasoning_effort = 'low';"
          );
          await fs.writeFile(aiEnginePath, aiEngineContent);
          console.log(`   üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ reasoning –Ω–∞ '${originalReasoning}'`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error}`);
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log(`\n${'='.repeat(80)}`);
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:');
    console.log('‚îÄ'.repeat(80));
    
    results.sort((a, b) => a.time - b.time);
    
    results.forEach((result, index) => {
      const medal = ['ü•á', 'ü•à', 'ü•â'][index] || 'üèÖ';
      console.log(`${medal} ${result.name}:`);
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${result.time}ms`);
      console.log(`   üìè –î–ª–∏–Ω–∞: ${result.response.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   üí≠ –û—Ç–≤–µ—Ç: "${result.response}"`);
      console.log('');
    });
    
    console.log('üîç –û–ë–™–Ø–°–ù–ï–ù–ò–ï –†–ê–ó–ù–ò–¶–´ –í –°–ö–û–†–û–°–¢–ò:');
    console.log('‚îú‚îÄ GPT-5 Nano –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reasoning tokens –¥–∞–∂–µ –Ω–∞ minimal/low');
    console.log('‚îú‚îÄ Chat Latest - —ç—Ç–æ non-reasoning –º–æ–¥–µ–ª—å (0 reasoning tokens)');  
    console.log('‚îú‚îÄ Reasoning —Ç–æ–∫–µ–Ω—ã = –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π"');
    console.log('‚îî‚îÄ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—â–µ–Ω–∏—è –ª—É—á—à–µ Chat Latest');
    console.log('');
    console.log('üí∞ –≠–ö–û–ù–û–ú–ò–ö–ê:');
    console.log('‚îú‚îÄ Nano: $0.05/1M –≤—Ö–æ–¥—è—â–∏—Ö, $0.40/1M –∏—Å—Ö–æ–¥—è—â–∏—Ö (~$0.03/–º–µ—Å)');
    console.log('‚îú‚îÄ Chat Latest: $1.25/1M –≤—Ö–æ–¥—è—â–∏—Ö, $10/1M –∏—Å—Ö–æ–¥—è—â–∏—Ö (~$0.64/–º–µ—Å)');
    console.log('‚îî‚îÄ Chat Latest –≤ 20+ —Ä–∞–∑ –¥–æ—Ä–æ–∂–µ, –Ω–æ –±—ã—Å—Ç—Ä–µ–µ');
    
    console.log('\n' + '='.repeat(80));
    console.log('‚úÖ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('='.repeat(80) + '\n');
    
    profiler.close();
    
  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏:', error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}