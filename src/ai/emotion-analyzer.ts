import { Logger } from '../utils/logger.js';
import { MemoryEntry, UserRelationship } from '../core/types.js';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —ç–º–æ—Ü–∏–π –¥–ª—è –≠–¢–ê–ü–ê 8
export interface EmotionAnalysis {
  // –ë–∞–∑–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏ (Plutchik's wheel)
  primary: {
    joy: number;       // 0-1
    sadness: number;
    anger: number;
    fear: number;
    surprise: number;
    disgust: number;
    trust: number;
    anticipation: number;
  };
  
  // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
  social: {
    friendly: number;    // 0-1
    hostile: number;
    sarcastic: number;
    supportive: number;
    playful: number;
    serious: number;
  };
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏
  contextual: {
    enthusiasm: number;  // 0-1
    boredom: number;
    stress: number;
    curiosity: number;
    confidence: number;
    uncertainty: number;
  };
  
  // –ò—Ç–æ–≥–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  dominant: string;        // –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è
  intensity: number;       // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å 0-1
  valence: number;         // –ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å -1 –¥–æ 1
  arousal: number;         // –í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ 0-1
  confidence: number;      // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ 0-1
}

export interface EmotionalProfile {
  userId: string;
  
  // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  temperament: 'sanguine' | 'choleric' | 'melancholic' | 'phlegmatic';
  expressiveness: number; // –ù–∞—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è 0-1
  stability: number;      // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å 0-1
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —ç–º–æ—Ü–∏–π
  typicalEmotions: string[];     // –ß–∞—Å—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏
  emotionalTriggers: {           // –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏
    topic: string;
    emotion: string;
    strength: number;
  }[];
  
  // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –≤ –≥—Ä—É–ø–ø–µ
  socialRole: 'entertainer' | 'supporter' | 'challenger' | 'observer' | 'mediator' | 'leader';
  
  // –¶–∏–∫–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  moodPatterns: {
    timeOfDay?: { [hour: string]: number };    // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º
    dayOfWeek?: { [day: string]: number };     // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º
  };
  
  // –ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π
  recentMoods: {
    date: Date;
    dominantEmotion: string;
    intensity: number;
    context: string;
  }[];
}

export interface GroupEmotionalState {
  // –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  groupMood: {
    dominant: string;
    intensity: number;
    stability: number;  // –ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  };
  
  // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
  dynamics: {
    harmony: number;     // 0-1 –ì–∞—Ä–º–æ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    tension: number;     // 0-1 –ù–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å
    energy: number;      // 0-1 –≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è
    engagement: number;  // 0-1 –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  };
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
  emotionalTopics: {
    topic: string;
    associatedEmotion: string;
    intensity: number;
    participants: string[];
  }[];
  
  // –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
  conflicts: {
    participants: string[];
    topic?: string;
    intensity: number;
    status: 'active' | 'cooling' | 'resolved';
    firstDetected: Date;
  }[];
}

export class EmotionAnalyzer {
  private emotionKeywords: { [emotion: string]: string[] } = {};
  private socialCues: { [pattern: string]: string[] } = {};
  
  constructor() {
    this.initializeEmotionPatterns();
  }
  
  private initializeEmotionPatterns(): void {
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
    this.emotionKeywords = {
      joy: ['—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '–≤–µ—Å–µ–ª–æ', '–∫–ª–∞—Å—Å–Ω–æ', '–∫—Ä—É—Ç–æ', '–∞—Ö–∞—Ö–∞', '—Ö–∞—Ö–∞', '–ª–æ–ª', '–∫–µ–∫', '–ø—Ä–∏–∫–æ–ª—å–Ω–æ', '–∫–ª–µ–≤–æ', '—Å—É–ø–µ—Ä', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', 'üòÑ', 'üòÇ', 'üéâ', 'üëç', 'üî•', 'üí™'],
      sadness: ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å–Ω–æ', '–ø–ª–æ—Ö–æ', '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç–æ—Å–∫–∞', '—É–Ω—ã–Ω–∏–µ', '–ø–µ—á–∞–ª—å', '–≥–æ—Ä–µ', '—Å–ª–µ–∑—ã', 'üò¢', 'üò≠', 'üíî', 'üòû', 'üòî'],
      anger: ['–∑–ª–æ—Å—Ç—å', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–¥–æ—Å—Ç–∞–ª–æ', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Å–≤–æ–ª–æ—á—å', '—Ç–≤–∞—Ä—å', '—É–±—å—é', '–∑–∞–¥–æ–ª–±–∞–ª', '–Ω–∞–¥–æ–µ–ª–æ', 'üò†', 'üò°', 'ü§¨', '–±–ª—è—Ç—å', '—Å—É–∫–∞'],
      fear: ['—Å—Ç—Ä–∞—à–Ω–æ', '–±–æ—é—Å—å', '–≤–æ–ª–Ω—É—é—Å—å', '—Ç—Ä–µ–≤–æ–∂–Ω–æ', '–ø–∞–Ω–∏–∫–∞', '—É–∂–∞—Å', '–∫–æ—à–º–∞—Ä', '–∂—É—Ç—å', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—Ä–∏—Å–∫', 'üò®', 'üò∞', 'üò±'],
      surprise: ['–≤–∞—É', '–æ–≥–æ', '–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ', '–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å', '—Å–µ—Ä—å–µ–∑–Ω–æ', '–æ—Ñ–∏–≥–µ—Ç—å', '–æ—Ö—Ä–µ–Ω–µ—Ç—å', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–Ω–µ—Ä–µ–∞–ª—å–Ω–æ', 'üò≤', 'üòØ', 'ü§Ø', 'üò±'],
      trust: ['–¥–æ–≤–µ—Ä—è—é', '–≤–µ—Ä—é', '–Ω–∞–¥–µ–∂–Ω—ã–π', '—á–µ—Å—Ç–Ω—ã–π', '–∏—Å–∫—Ä–µ–Ω–Ω–µ', '–ø—Ä–∞–≤–¥–∞', '—Ç–æ—á–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é', 'ü§ù', 'üí™'],
      anticipation: ['–∂–¥—É', '–ø—Ä–µ–¥–≤–∫—É—à–∞—é', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ª—é–±–æ–ø—ã—Ç–Ω–æ', '—á—Ç–æ –¥–∞–ª—å—à–µ', '—Å–∫–æ—Ä–æ', '–Ω–∞–∫–æ–Ω–µ—Ü', '–∂–¥–µ–º', '–∫–æ–≥–¥–∞', 'ü§î', 'üëÄ']
    };
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
    this.socialCues = {
      sarcastic: ['–∞–≥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '—è—Å–Ω–æ', '–Ω—É –¥–∞', '—Ç–æ—á–Ω–æ-—Ç–æ—á–Ω–æ', '/s', '—Å–∞—Ä–∫–∞–∑–º', '–æ—á–µ–Ω—å "—É–º–Ω–æ"', '–æ–π –∫–∞–∫', '–∫–∞–∫ –∂–µ', '–≤–æ—Ç —Ç–∞–∫ –≤–æ—Ç', '–º–æ–ª–æ–¥–µ—Ü', '–≥–µ–Ω–∏–π'],
      supportive: ['–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–ø–æ–º–æ–≥—É', '–ø–æ–Ω–∏–º–∞—é', '—Å–æ—á—É–≤—Å—Ç–≤—É—é', '+1', '—ç—Ç–æ', '–¥–∞–≤–∞–π', '–≤–º–µ—Å—Ç–µ', '–ø–æ–º–æ–∂–µ–º', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–æ–ª–∏–¥–∞—Ä–µ–Ω'],
      playful: ['–∏–≥—Ä–∞', '–ø—Ä–∏–∫–æ–ª', '—à—É—Ç–∫–∞', '—Ä–æ–∑—ã–≥—Ä—ã—à', '–≤–µ—Å–µ–ª—å–µ', '—É–≥–∞—Ä', '–ø–æ—Ç–µ—Ö–∞', '–∑–∞–±–∞–≤–∞', '—Ä–∂–∞–∫–∞', 'üòú', 'üòè', 'üòã', 'ü§£'],
      serious: ['—Å–µ—Ä—å–µ–∑–Ω–æ', '–≤–∞–∂–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–¥–µ–ª–æ', '–≤–æ–ø—Ä–æ—Å', '–Ω–∞–¥–æ', '–Ω—É–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '—Å—Ä–æ—á–Ω–æ', '–≤–Ω–∏–º–∞–Ω–∏–µ', '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ'],
      hostile: ['–ø—Ä–æ—Ç–∏–≤', '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '–µ—Ä—É–Ω–¥–∞', '–≥–ª—É–ø–æ—Å—Ç—å', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—Å–ø–æ—Ä', '–±—Ä–µ–¥', '—á—É—à—å', '–ª–æ–∂—å', '–≤—Ä–∞–Ω—å—ë', '—Ñ–∏–≥–Ω—è'],
      friendly: ['–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '—Ä–∞–¥', '–ø—Ä–∏—è—Ç–Ω–æ', '–¥—Ä—É–∂–∏—â–µ', '–±—Ä–∞—Ç–∞–Ω', '–ø—Ä–∏—è—Ç–µ–ª—å', '–∑–¥–æ—Ä–æ–≤–æ', '–∫–∞–∫ –¥–µ–ª–∞', 'üòä', 'ü§ó', 'üëã']
    };
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  analyzeMessageEmotion(content: string, author: string, context?: {
    recentMessages?: MemoryEntry[];
    userProfile?: EmotionalProfile;
  }): EmotionAnalysis {
    const text = content.toLowerCase();
    
    // –ê–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π
    const primary = this.analyzePrimaryEmotions(text);
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–π
    const social = this.analyzeSocialEmotions(text, context?.recentMessages);
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —ç–º–æ—Ü–∏–π
    const contextual = this.analyzeContextualEmotions(text, context);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
    const dominant = this.findDominantEmotion(primary, social, contextual);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const intensity = this.calculateIntensity(text, primary, social, contextual);
    const valence = this.calculateValence(primary, social);
    const arousal = this.calculateArousal(primary, contextual);
    const confidence = this.calculateConfidence(text, dominant);
    
    Logger.debug(`üé≠ –≠–º–æ—Ü–∏—è "${dominant}" (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${intensity.toFixed(2)}) –¥–ª—è: "${content.substring(0, 50)}..."`);
    
    return {
      primary,
      social,
      contextual,
      dominant,
      intensity,
      valence,
      arousal,
      confidence
    };
  }
  
  private analyzePrimaryEmotions(text: string): EmotionAnalysis['primary'] {
    const emotions = {
      joy: 0, sadness: 0, anger: 0, fear: 0,
      surprise: 0, disgust: 0, trust: 0, anticipation: 0
    };
    
    for (const [emotion, keywords] of Object.entries(this.emotionKeywords)) {
      const matches = keywords.filter(keyword => text.includes(keyword)).length;
      if (emotions.hasOwnProperty(emotion)) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å 0.3 –¥–æ 0.5 –¥–ª—è –ª—É—á—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        emotions[emotion as keyof typeof emotions] = Math.min(matches * 0.5, 1.0);
      }
    }
    
    return emotions;
  }
  
  private analyzeSocialEmotions(text: string, recentMessages?: MemoryEntry[]): EmotionAnalysis['social'] {
    const emotions = {
      friendly: 0, hostile: 0, sarcastic: 0,
      supportive: 0, playful: 0, serious: 0
    };
    
    for (const [pattern, keywords] of Object.entries(this.socialCues)) {
      const matches = keywords.filter(keyword => text.includes(keyword)).length;
      if (emotions.hasOwnProperty(pattern)) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å 0.4 –¥–æ 0.6 –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–π
        emotions[pattern as keyof typeof emotions] = Math.min(matches * 0.6, 1.0);
      }
    }
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (recentMessages && recentMessages.length > 0) {
      const recentText = recentMessages.slice(-3).map(m => m.content.toLowerCase()).join(' ');
      
      // –ï—Å–ª–∏ –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø–æ–≤—ã—à–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
      if (recentText.includes('—Å–ø–æ—Ä') || recentText.includes('–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω')) {
        emotions.serious = Math.min(emotions.serious + 0.2, 1.0);
      }
      
      // –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–º–µ—Ö–∞, –ø–æ–≤—ã—à–∞–µ–º –∏–≥—Ä–∏–≤–æ—Å—Ç—å
      if ((recentText.match(/—Ö–∞+/g) || []).length > 2) {
        emotions.playful = Math.min(emotions.playful + 0.3, 1.0);
      }
    }
    
    return emotions;
  }
  
  private analyzeContextualEmotions(text: string, context?: {
    recentMessages?: MemoryEntry[];
    userProfile?: EmotionalProfile;
  }): EmotionAnalysis['contextual'] {
    const emotions = {
      enthusiasm: 0, boredom: 0, stress: 0,
      curiosity: 0, confidence: 0, uncertainty: 0
    };
    
    // –≠–Ω—Ç—É–∑–∏–∞–∑–º - –º–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤, –∫–∞–ø—Å, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞
    const exclamationCount = (text.match(/!/g) || []).length;
    const capsRatio = (text.match(/[A-Z–ê-–Ø]/g) || []).length / text.length;
    const enthusiasmWords = ['–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–≤–∞—É', '–∫–ª–µ–≤–æ', '–∫—Ä—É—Ç–æ', '–ø–æ—Ç—Ä—è—Å–∞—é—â–µ', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'];
    const enthusiasmMatches = enthusiasmWords.filter(word => text.includes(word)).length;
    emotions.enthusiasm = Math.min((exclamationCount * 0.3) + (capsRatio * 2) + (enthusiasmMatches * 0.4), 1.0);
    
    // –°–∫—É–∫–∞ - –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã, "–æ–∫", "–¥–∞", "–Ω–µ –∑–Ω–∞—é"
    const boringWords = ['–æ–∫', '–¥–∞', '–Ω–µ –∑–Ω–∞—é', '–ø–æ—Ñ–∏–≥', '–≤—Å–µ —Ä–∞–≤–Ω–æ'];
    const boringMatches = boringWords.filter(word => text.includes(word)).length;
    emotions.boredom = Math.min(boringMatches * 0.3, 1.0);
    
    // –°—Ç—Ä–µ—Å—Å - —Å–ª–æ–≤–∞ —Å–ø–µ—à–∫–∏, –ø—Ä–æ–±–ª–µ–º
    const stressWords = ['–±—ã—Å—Ç—Ä–æ', '—Å—Ä–æ—á–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ–∫–æ–≥–¥–∞', '–¥–µ–¥–ª–∞–π–Ω', '–∞–≤—Ä–∞–ª'];
    const stressMatches = stressWords.filter(word => text.includes(word)).length;
    emotions.stress = Math.min(stressMatches * 0.4, 1.0);
    
    // –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ - –≤–æ–ø—Ä–æ—Å—ã
    const questionCount = (text.match(/\?/g) || []).length;
    const curiosityWords = ['–ø–æ—á–µ–º—É', '–∫–∞–∫', '—á—Ç–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–∞ —á—Ç–æ –µ—Å–ª–∏'];
    const curiosityMatches = curiosityWords.filter(word => text.includes(word)).length;
    emotions.curiosity = Math.min((questionCount * 0.2) + (curiosityMatches * 0.3), 1.0);
    
    // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å vs –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const confidentWords = ['—Ç–æ—á–Ω–æ', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ', '—É–≤–µ—Ä–µ–Ω', '–∑–Ω–∞—é'];
    const uncertainWords = ['–º–æ–∂–µ—Ç –±—ã—Ç—å', '–Ω–∞–≤–µ—Ä–Ω–æ–µ', '–Ω–µ —É–≤–µ—Ä–µ–Ω', '–¥—É–º–∞—é'];
    
    emotions.confidence = Math.min(confidentWords.filter(w => text.includes(w)).length * 0.4, 1.0);
    emotions.uncertainty = Math.min(uncertainWords.filter(w => text.includes(w)).length * 0.4, 1.0);
    
    return emotions;
  }
  
  private findDominantEmotion(
    primary: EmotionAnalysis['primary'],
    social: EmotionAnalysis['social'],
    contextual: EmotionAnalysis['contextual']
  ): string {
    const allEmotions = { ...primary, ...social, ...contextual };
    
    let maxValue = 0;
    let dominantEmotion = 'neutral';
    
    for (const [emotion, value] of Object.entries(allEmotions)) {
      if (value > maxValue) {
        maxValue = value;
        dominantEmotion = emotion;
      }
    }
    
    // –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —Å 0.2 –¥–æ 0.1 –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
    return maxValue > 0.1 ? dominantEmotion : 'neutral';
  }
  
  private calculateIntensity(
    text: string,
    primary: EmotionAnalysis['primary'],
    social: EmotionAnalysis['social'],
    contextual: EmotionAnalysis['contextual']
  ): number {
    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ç —ç–º–æ—Ü–∏–π
    const allValues = [...Object.values(primary), ...Object.values(social), ...Object.values(contextual)];
    const baseIntensity = Math.max(...allValues);
    
    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    const exclamationCount = (text.match(/!/g) || []).length;
    const capsRatio = (text.match(/[A-Z–ê-–Ø]/g) || []).length / text.length;
    const lengthFactor = Math.min(text.length / 100, 1.0); // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è = –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–π
    
    const intensityModifier = (exclamationCount * 0.1) + (capsRatio * 0.5) + (lengthFactor * 0.2);
    
    return Math.min(baseIntensity + intensityModifier, 1.0);
  }
  
  private calculateValence(
    primary: EmotionAnalysis['primary'],
    social: EmotionAnalysis['social']
  ): number {
    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    const positive = primary.joy + primary.trust + primary.surprise * 0.5 + 
                    social.friendly + social.supportive + social.playful;
    
    // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    const negative = primary.sadness + primary.anger + primary.fear + primary.disgust +
                    social.hostile + social.sarcastic * 0.3;
    
    return Math.max(-1, Math.min(1, (positive - negative) * 0.5));
  }
  
  private calculateArousal(
    primary: EmotionAnalysis['primary'],
    contextual: EmotionAnalysis['contextual']
  ): number {
    // –í–æ–∑–±—É–∂–¥–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏
    const highArousal = primary.anger + primary.fear + primary.joy + primary.surprise +
                       contextual.enthusiasm + contextual.stress;
    
    // –£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏
    const lowArousal = primary.sadness + primary.trust + contextual.boredom;
    
    return Math.max(0, Math.min(1, highArousal - lowArousal * 0.5));
  }
  
  private calculateConfidence(text: string, dominantEmotion: string): number {
    // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è —è–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    const emotionalIndicators = (text.match(/[!?]|[\u{1F600}-\u{1F64F}]|\u{1F300}-\u{1F5FF}|\u{1F680}-\u{1F6FF}|\u{1F700}-\u{1F77F}|\u{1F780}-\u{1F7FF}|\u{1F800}-\u{1F8FF}|\u{2600}-\u{26FF}|\u{2700}-\u{27BF}/gu) || []).length;
    const textLength = text.length;
    
    let confidence = Math.min(emotionalIndicators * 0.1 + Math.min(textLength / 50, 1.0) * 0.3, 0.9);
    
    // –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è neutral
    if (dominantEmotion === 'neutral') {
      confidence *= 0.5;
    }
    
    return Math.max(0.1, confidence);
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
   */
  buildEmotionalProfile(
    userId: string,
    messageHistory: MemoryEntry[],
    relationship?: UserRelationship
  ): EmotionalProfile {
    Logger.info(`üé≠ –°—Ç—Ä–æ–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${userId} (${messageHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const emotionAnalyses = messageHistory.map(msg => 
      this.analyzeMessageEmotion(msg.content, msg.author)
    );
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç
    const temperament = this.determineTemperament(emotionAnalyses);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const expressiveness = this.calculateExpressiveness(emotionAnalyses);
    const stability = this.calculateEmotionalStability(emotionAnalyses);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–∏–ø–∏—á–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    const typicalEmotions = this.findTypicalEmotions(emotionAnalyses);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Ä–æ–ª—å
    const socialRole = this.determineSocialRole(emotionAnalyses, messageHistory);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const recentMoods = emotionAnalyses.slice(-10).map((analysis, i) => ({
      date: messageHistory[messageHistory.length - 10 + i]?.timestamp || new Date(),
      dominantEmotion: analysis.dominant,
      intensity: analysis.intensity,
      context: messageHistory[messageHistory.length - 10 + i]?.content.substring(0, 50) || ''
    }));
    
    Logger.info(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å ${userId}: ${temperament}, —Ä–æ–ª—å: ${socialRole}, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${(expressiveness * 100).toFixed(0)}%`);
    
    return {
      userId,
      temperament,
      expressiveness,
      stability,
      typicalEmotions,
      emotionalTriggers: [], // TODO: Analyze topics and their emotional triggers
      socialRole,
      moodPatterns: {}, // TODO: Analyze time patterns
      recentMoods
    };
  }
  
  private determineTemperament(analyses: EmotionAnalysis[]): EmotionalProfile['temperament'] {
    if (analyses.length === 0) return 'phlegmatic';
    
    const avgPositive = analyses.reduce((sum, a) => sum + a.valence, 0) / analyses.length;
    const avgArousal = analyses.reduce((sum, a) => sum + a.arousal, 0) / analyses.length;
    
    if (avgPositive > 0.2 && avgArousal > 0.6) return 'sanguine';     // –í–µ—Å–µ–ª—å—á–∞–∫
    if (avgPositive < -0.2 && avgArousal > 0.6) return 'choleric';    // –í—Å–ø—ã–ª—å—á–∏–≤—ã–π
    if (avgPositive < -0.2 && avgArousal < 0.4) return 'melancholic'; // –ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫
    return 'phlegmatic'; // –°–ø–æ–∫–æ–π–Ω—ã–π
  }
  
  private calculateExpressiveness(analyses: EmotionAnalysis[]): number {
    const avgIntensity = analyses.reduce((sum, a) => sum + a.intensity, 0) / analyses.length;
    return Math.min(avgIntensity * 1.2, 1.0);
  }
  
  private calculateEmotionalStability(analyses: EmotionAnalysis[]): number {
    if (analyses.length < 2) return 0.5;
    
    const valences = analyses.map(a => a.valence);
    const variance = this.calculateVariance(valences);
    
    // –ú–µ–Ω—å—à–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ = –±–æ–ª—å—à–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    return Math.max(0, 1 - variance);
  }
  
  private calculateVariance(values: number[]): number {
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const squaredDiffs = values.map(val => Math.pow(val - mean, 2));
    return squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;
  }
  
  private findTypicalEmotions(analyses: EmotionAnalysis[]): string[] {
    const emotionCounts: { [key: string]: number } = {};
    
    analyses.forEach(analysis => {
      if (analysis.dominant !== 'neutral') {
        emotionCounts[analysis.dominant] = (emotionCounts[analysis.dominant] || 0) + 1;
      }
    });
    
    return Object.entries(emotionCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([emotion]) => emotion);
  }
  
  private determineSocialRole(
    analyses: EmotionAnalysis[],
    messages: MemoryEntry[]
  ): EmotionalProfile['socialRole'] {
    if (analyses.length === 0) return 'observer';
    
    const avgPlayfulness = analyses.reduce((sum, a) => sum + a.social.playful, 0) / analyses.length;
    const avgSupport = analyses.reduce((sum, a) => sum + a.social.supportive, 0) / analyses.length;
    const avgHostile = analyses.reduce((sum, a) => sum + a.social.hostile, 0) / analyses.length;
    const messageLength = messages.reduce((sum, m) => sum + m.content.length, 0) / messages.length;
    
    if (avgPlayfulness > 0.4) return 'entertainer';
    if (avgSupport > 0.4) return 'supporter';
    if (avgHostile > 0.3) return 'challenger';
    if (messageLength > 100) return 'leader';
    if (messages.length < 10) return 'observer';
    
    return 'mediator';
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  analyzeGroupEmotions(
    recentMessages: MemoryEntry[],
    userProfiles: Map<string, EmotionalProfile>
  ): GroupEmotionalState {
    Logger.info(`üé≠ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (${recentMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, ${userProfiles.size} –ø—Ä–æ—Ñ–∏–ª–µ–π)`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    const analyses = recentMessages.map(msg => 
      this.analyzeMessageEmotion(msg.content, msg.author, {
        userProfile: userProfiles.get(msg.author)
      })
    );
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    const groupMood = this.calculateGroupMood(analyses);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É
    const dynamics = this.analyzeSocialDynamics(analyses, recentMessages);
    
    // –ù–∞—Ö–æ–¥–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
    const emotionalTopics = this.extractEmotionalTopics(recentMessages, analyses);
    
    // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    const conflicts = this.detectConflicts(recentMessages, analyses);
    
    Logger.info(`‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${groupMood.dominant} (–≥–∞—Ä–º–æ–Ω–∏—è: ${(dynamics.harmony * 100).toFixed(0)}%)`);
    
    return {
      groupMood,
      dynamics,
      emotionalTopics,
      conflicts
    };
  }
  
  private calculateGroupMood(analyses: EmotionAnalysis[]): GroupEmotionalState['groupMood'] {
    if (analyses.length === 0) {
      return { dominant: 'neutral', intensity: 0, stability: 0.5 };
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é –≥—Ä—É–ø–ø—ã
    const emotionCounts: { [key: string]: number } = {};
    let totalIntensity = 0;
    
    analyses.forEach(analysis => {
      emotionCounts[analysis.dominant] = (emotionCounts[analysis.dominant] || 0) + 1;
      totalIntensity += analysis.intensity;
    });
    
    const dominant = Object.entries(emotionCounts)
      .sort(([,a], [,b]) => b - a)[0][0];
      
    const intensity = totalIntensity / analyses.length;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ –æ–±—Ä–∞—Ç–Ω–æ–µ –∫ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é —ç–º–æ—Ü–∏–π
    const uniqueEmotions = Object.keys(emotionCounts).length;
    const stability = Math.max(0, 1 - (uniqueEmotions - 1) * 0.2);
    
    return { dominant, intensity, stability };
  }
  
  private analyzeSocialDynamics(
    analyses: EmotionAnalysis[],
    messages: MemoryEntry[]
  ): GroupEmotionalState['dynamics'] {
    if (analyses.length === 0) {
      return { harmony: 0.5, tension: 0, energy: 0, engagement: 0 };
    }
    
    // –ì–∞—Ä–º–æ–Ω–∏—è = –±–æ–ª—å—à–µ –¥—Ä—É–∂–µ–ª—é–±–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –º–µ–Ω—å—à–µ –≤—Ä–∞–∂–¥–µ–±–Ω–æ—Å—Ç–∏
    const avgFriendly = analyses.reduce((sum, a) => sum + a.social.friendly, 0) / analyses.length;
    const avgSupportive = analyses.reduce((sum, a) => sum + a.social.supportive, 0) / analyses.length;
    const avgHostile = analyses.reduce((sum, a) => sum + a.social.hostile, 0) / analyses.length;
    const harmony = Math.max(0, (avgFriendly + avgSupportive - avgHostile));
    
    // –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ = –≤—Ä–∞–∂–¥–µ–±–Ω–æ—Å—Ç—å + —Å—Ç—Ä–µ—Å—Å + –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const avgStress = analyses.reduce((sum, a) => sum + a.contextual.stress, 0) / analyses.length;
    const tension = Math.min(1, avgHostile + avgStress);
    
    // –≠–Ω–µ—Ä–≥–∏—è = –æ–±—â–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–π
    const energy = analyses.reduce((sum, a) => sum + a.intensity, 0) / analyses.length;
    
    // –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å = —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    const uniqueParticipants = new Set(messages.map(m => m.author)).size;
    const avgMessageLength = messages.reduce((sum, m) => sum + m.content.length, 0) / messages.length;
    const engagement = Math.min(1, (uniqueParticipants * 0.2) + Math.min(avgMessageLength / 50, 1) * 0.4);
    
    return { harmony, tension, energy, engagement };
  }
  
  private extractEmotionalTopics(
    messages: MemoryEntry[],
    analyses: EmotionAnalysis[]
  ): GroupEmotionalState['emotionalTopics'] {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    const topicEmotions: { [topic: string]: { emotions: string[], participants: Set<string>, intensity: number } } = {};
    
    messages.forEach((msg, i) => {
      const analysis = analyses[i];
      if (analysis && analysis.dominant !== 'neutral' && msg.topics) {
        msg.topics.forEach(topic => {
          if (!topicEmotions[topic]) {
            topicEmotions[topic] = { emotions: [], participants: new Set(), intensity: 0 };
          }
          
          topicEmotions[topic].emotions.push(analysis.dominant);
          topicEmotions[topic].participants.add(msg.author);
          topicEmotions[topic].intensity = Math.max(topicEmotions[topic].intensity, analysis.intensity);
        });
      }
    });
    
    return Object.entries(topicEmotions)
      .map(([topic, data]) => ({
        topic,
        associatedEmotion: data.emotions[0] || 'neutral', // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —ç–º–æ—Ü–∏—é
        intensity: data.intensity,
        participants: Array.from(data.participants)
      }))
      .filter(t => t.participants.length >= 1);
  }
  
  private detectConflicts(
    messages: MemoryEntry[],
    analyses: EmotionAnalysis[]
  ): GroupEmotionalState['conflicts'] {
    const conflicts: GroupEmotionalState['conflicts'] = [];
    
    // –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è - –∏—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    for (let i = 1; i < analyses.length; i++) {
      const current = analyses[i];
      const prev = analyses[i - 1];
      const currentMsg = messages[i];
      const prevMsg = messages[i - 1];
      
      if (current.social.hostile > 0.3 && 
          prev.social.hostile > 0.3 &&
          currentMsg.author !== prevMsg.author) {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç
        const existingConflict = conflicts.find(c => 
          c.participants.includes(currentMsg.author) && c.participants.includes(prevMsg.author)
        );
        
        if (!existingConflict) {
          conflicts.push({
            participants: [prevMsg.author, currentMsg.author],
            intensity: (current.social.hostile + prev.social.hostile) / 2,
            status: 'active',
            firstDetected: prevMsg.timestamp
          });
        }
      }
    }
    
    return conflicts;
  }
}