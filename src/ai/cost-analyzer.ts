#!/usr/bin/env bun

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –≠–¢–ê–ü–ê 7
 * –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ OpenAI Vision API
 */

import { Logger } from '../utils/logger.js';

interface CostEstimate {
  imagesPerDay: number;
  costPerImage: number;
  dailyCost: number;
  monthlyCost: number;
  yearlyCost: number;
}

export class CostAnalyzer {
  // –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã OpenAI (—è–Ω–≤–∞—Ä—å 2025)
  private static readonly PRICING = {
    // GPT-4o Vision API (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    gpt4o_per_image: 0.01, // $0.01 –∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    gpt4o_mini_per_image: 0.01, // –¢–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —á—Ç–æ —É –æ–±—ã—á–Ω–æ–≥–æ GPT-4o
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ)
    gpt4o_input_per_1k_tokens: 0.0025,  // $2.50 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ input
    gpt4o_output_per_1k_tokens: 0.01,   // $10.00 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ output
    
    // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tokens_per_image_input: 255,  // ~255 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tokens_per_response: 100      // ~100 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
  };

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–æ–∫–µ–Ω–∞–º
   */
  private static calculateTokenCost(imageCount: number): number {
    const inputTokens = imageCount * this.PRICING.tokens_per_image_input;
    const outputTokens = imageCount * this.PRICING.tokens_per_response;
    
    const inputCost = (inputTokens / 1000) * this.PRICING.gpt4o_input_per_1k_tokens;
    const outputCost = (outputTokens / 1000) * this.PRICING.gpt4o_output_per_1k_tokens;
    
    return inputCost + outputCost;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  static analyzeCosts(): void {
    Logger.info('üí∞ –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    Logger.info('');

    const scenarios = [
      {
        name: '–ú–∞–ª–µ–Ω—å–∫–∏–π —á–∞—Ç',
        description: '2-3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ–Ω—å',
        imagesPerDay: 2.5
      },
      {
        name: '–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç',
        description: '5-10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å',
        imagesPerDay: 7.5
      },
      {
        name: '–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç',
        description: '15-20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å',
        imagesPerDay: 17.5
      },
      {
        name: '–ú–µ–º-—á–∞—Ç',
        description: '30-50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å',
        imagesPerDay: 40
      }
    ];

    for (const scenario of scenarios) {
      const simpleCost = this.calculateSimpleCost(scenario.imagesPerDay);
      const tokenCost = this.calculateTokenCost(scenario.imagesPerDay);
      
      Logger.info(`üìä ${scenario.name} (${scenario.description}):`);
      Logger.info(`   üí∏ –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: $${simpleCost.dailyCost.toFixed(3)}/–¥–µ–Ω—å, $${simpleCost.monthlyCost.toFixed(2)}/–º–µ—Å—è—Ü`);
      Logger.info(`   üéØ –¢–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:  $${tokenCost.toFixed(3)}/–¥–µ–Ω—å, $${(tokenCost * 30).toFixed(2)}/–º–µ—Å—è—Ü`);
      Logger.info(`   üìà –í —Ä—É–±–ª—è—Ö (~100‚ÇΩ/$): ${(tokenCost * 30 * 100).toFixed(0)}‚ÇΩ/–º–µ—Å—è—Ü`);
      Logger.info('');
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —Ü–µ–Ω–µ –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  private static calculateSimpleCost(imagesPerDay: number): CostEstimate {
    const costPerImage = this.PRICING.gpt4o_per_image;
    const dailyCost = imagesPerDay * costPerImage;
    
    return {
      imagesPerDay,
      costPerImage,
      dailyCost,
      monthlyCost: dailyCost * 30,
      yearlyCost: dailyCost * 365
    };
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–æ—Å–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
   */
  static showOptimizations(): void {
    Logger.info('üîß –°–ø–æ—Å–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:');
    Logger.info('');
    
    Logger.info('1. üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞:');
    Logger.info('   ‚Ä¢ –°–µ–π—á–∞—Å: –º–µ–º—ã 100%, —Ñ–æ—Ç–æ 30%, –¥–æ–∫—É–º–µ–Ω—Ç—ã 60%');
    Logger.info('   ‚Ä¢ –ú–æ–∂–Ω–æ: –º–µ–º—ã 80%, —Ñ–æ—Ç–æ 15%, –¥–æ–∫—É–º–µ–Ω—Ç—ã 40%');
    Logger.info('   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: ~35% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤');
    Logger.info('');
    
    Logger.info('2. üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
    Logger.info('   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è > 50KB');
    Logger.info('   ‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–ª–∫–∏–µ —Å—Ç–∏–∫–µ—Ä—ã –∏ –ø—Ä–µ–≤—å—é');
    Logger.info('   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: ~25% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤');
    Logger.info('');
    
    Logger.info('3. ‚è∞ –õ–∏–º–∏—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏:');
    Logger.info('   ‚Ä¢ –ù–µ –±–æ–ª–µ–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Å –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    Logger.info('   ‚Ä¢ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏: 30 —Å–µ–∫—É–Ω–¥');
    Logger.info('   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞');
    Logger.info('');
    
    Logger.info('4. üîÑ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    Logger.info('   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    Logger.info('   ‚Ä¢ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
    Logger.info('   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: ~20% –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤');
    Logger.info('');
    
    Logger.info('5. üíæ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:');
    Logger.info('   ‚Ä¢ Ollama + LLaVA –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)');
    Logger.info('   ‚Ä¢ OpenAI —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤');
    Logger.info('   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: –¥–æ 70% –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ');
    Logger.info('');
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –Ω–∞—à–∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞
   */
  static calculateRealWorldCost(): void {
    Logger.info('üé≤ –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞:');
    Logger.info('');
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ
    const imageDistribution = {
      memes: 0.2,      // 20% –º–µ–º–æ–≤ (100% –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º)
      photos: 0.5,     // 50% —Ñ–æ—Ç–æ (30% –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º) 
      screenshots: 0.2, // 20% —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (60% –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º)
      other: 0.1       // 10% –ø—Ä–æ—á–µ–µ (20% –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º)
    };
    
    const analysisRate = 
      imageDistribution.memes * 1.0 +
      imageDistribution.photos * 0.3 +
      imageDistribution.screenshots * 0.6 +
      imageDistribution.other * 0.2;
      
    Logger.info(`üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${(analysisRate * 100).toFixed(1)}%`);
    Logger.info('');
    
    const scenarios = [5, 15, 30]; // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å
    
    for (const totalImages of scenarios) {
      const analyzedImages = totalImages * analysisRate;
      const cost = this.calculateTokenCost(analyzedImages);
      
      Logger.info(`üì± ${totalImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–¥–µ–Ω—å ‚Üí ${analyzedImages.toFixed(1)} –∞–Ω–∞–ª–∏–∑–æ–≤ ‚Üí $${cost.toFixed(3)}/–¥–µ–Ω—å`);
      Logger.info(`   üí∞ –ú–µ—Å—è—Ü: $${(cost * 30).toFixed(2)} (~${(cost * 30 * 100).toFixed(0)}‚ÇΩ)`);
    }
    
    Logger.info('');
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏
   */
  static compareAlternatives(): void {
    Logger.info('‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏:');
    Logger.info('');
    
    Logger.info('üèÜ OpenAI GPT-4o Vision (—Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ):');
    Logger.info('   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞');
    Logger.info('   ‚úÖ –ü–æ–Ω–∏–º–∞–µ—Ç –º–µ–º—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç');
    Logger.info('   ‚úÖ –ù–∞–¥–µ–∂–Ω—ã–π OCR');
    Logger.info('   ‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.65/1000 —Ç–æ–∫–µ–Ω–æ–≤');
    Logger.info('');
    
    Logger.info('ü•à Google Vision API:');
    Logger.info('   ‚úÖ –î–µ—à–µ–≤–ª–µ: $1.50/1000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    Logger.info('   ‚úÖ –•–æ—Ä–æ—à–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è');
    Logger.info('   ‚ùå –ù–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞');
    Logger.info('   ‚ùå –°–ª–∞–±–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–µ–º–æ–≤');
    Logger.info('');
    
    Logger.info('ü•â –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (LLaVA, MiniGPT):');
    Logger.info('   ‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    Logger.info('   ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–∞–Ω–Ω—ã—Ö');
    Logger.info('   ‚ùå –¢—Ä–µ–±—É–µ—Ç –º–æ—â–Ω–æ–µ –∂–µ–ª–µ–∑–æ');
    Logger.info('   ‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ GPT-4o');
    Logger.info('   ‚ùå –°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    Logger.info('');
  }
}

// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
function main() {
  Logger.info('üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ Vision API –¥–ª—è –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞');
  Logger.info('='.repeat(60));
  Logger.info('');
  
  CostAnalyzer.analyzeCosts();
  CostAnalyzer.calculateRealWorldCost();
  CostAnalyzer.showOptimizations();
  CostAnalyzer.compareAlternatives();
  
  Logger.info('üìã –ò—Ç–æ–≥–∏:');
  Logger.info('‚Ä¢ –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∞—Ç–∞: ~$2-5 –≤ –º–µ—Å—è—Ü (200-500‚ÇΩ)');
  Logger.info('‚Ä¢ –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞: ~$10-15 –≤ –º–µ—Å—è—Ü (1000-1500‚ÇΩ)'); 
  Logger.info('‚Ä¢ –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –º–æ–∂–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –Ω–∞ 50-70%');
  Logger.info('‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–∏—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥');
  Logger.info('');
  Logger.info('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—á–∞—Ç—å —Å –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
main();