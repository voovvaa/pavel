import { ImageAnalyzer, ImageContext } from './image-analyzer.js';
import { BotPersonality } from '../core/types.js';
import { Logger } from '../utils/logger.js';
import { promises as fs } from 'fs';
import { join } from 'path';

/**
 * –¢–µ—Å—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≠–¢–ê–ü–ê 7
 */
export class ImageTester {
  private imageAnalyzer: ImageAnalyzer;

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testPersonality: BotPersonality = {
      patterns: [],
      responseStyle: {
        averageLength: 50,
        commonWords: ['–Ω–æ—Ä–º', '–∫–µ–∫', '–ª–æ–ª'],
        commonEmojis: ['üòÇ', 'üëç', 'ü§î'],
        formalityLevel: 0.3,
        activityLevel: 0.7
      },
      schedule: {
        activeHours: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
        activeDays: [1, 2, 3, 4, 5, 6, 7]
      }
    };

    this.imageAnalyzer = new ImageAnalyzer(testPersonality, true); // –û—Ç–∫–ª—é—á–∞–µ–º rate limit –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async testImageAnalysis(): Promise<void> {
    Logger.info('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

    if (!this.imageAnalyzer.isAvailable()) {
      Logger.error('‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY');
      return;
    }

    Logger.info(`üìä –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${this.imageAnalyzer.getModelInfo()}`);

    // –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ chat/files
    const testImagesPath = 'chat/files';
    
    try {
      const files = await fs.readdir(testImagesPath);
      const imageFiles = files.filter(file => 
        file.toLowerCase().match(/\.(jpg|jpeg|png|gif|webp)$/) && 
        !file.includes('thumb')
      ).slice(0, 3); // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

      if (imageFiles.length === 0) {
        Logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ chat/files/');
        Logger.info('–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ chat/files/');
        return;
      }

      Logger.info(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

      for (const imageFile of imageFiles) {
        await this.testSingleImage(join(testImagesPath, imageFile), imageFile);
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      }

    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:', error);
      
      // Fallback: —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      Logger.info('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å –º–æ–∫–∞–ø –¥–∞–Ω–Ω—ã–º–∏...');
      await this.testMockImageAnalysis();
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private async testSingleImage(imagePath: string, fileName: string): Promise<void> {
    Logger.info(`\nüì∑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fileName}`);
    
    try {
      const imageBuffer = await fs.readFile(imagePath);
      Logger.info(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${imageBuffer.length} –±–∞–π—Ç`);

      const imageContext: ImageContext = {
        chatContext: [
          '–ë–æ–¥—è: —Å–º–æ—Ç—Ä–∏ —á—Ç–æ –Ω–∞—à–µ–ª',
          '–ú–∞–∫—Å: –æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
          '–°–∞–Ω—è: —Å–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é'
        ],
        userName: 'TestUser',
        userProfile: undefined, // –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
        personality: {} as BotPersonality
      };

      Logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
      const startTime = Date.now();
      
      const analysis = await this.imageAnalyzer.analyzeImage(imageBuffer, imageContext);
      
      const analysisTime = Date.now() - startTime;
      Logger.info(`‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${analysisTime}–º—Å`);

      if (analysis) {
        Logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        Logger.info('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
        Logger.info(`   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${analysis.description}`);
        Logger.info(`   ‚Ä¢ –¢–∏–ø: ${analysis.type}`);
        Logger.info(`   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${analysis.mood || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}`);
        Logger.info(`   ‚Ä¢ –Æ–º–æ—Ä: ${analysis.isHumorous ? '–¥–∞' : '–Ω–µ—Ç'}`);
        Logger.info(`   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç: ${analysis.containsText ? '–¥–∞' : '–Ω–µ—Ç'}`);
        if (analysis.textContent) {
          Logger.info(`   ‚Ä¢ –¢–µ–∫—Å—Ç: "${analysis.textContent}"`);
        }
        Logger.info(`   ‚Ä¢ –¢–µ–≥–∏: [${analysis.tags.join(', ')}]`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        Logger.info('\nüí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ì–µ–π—Å–∞–Ω–¥—Ä–∞...');
        const responseStartTime = Date.now();
        
        const response = await this.imageAnalyzer.generateImageResponse(analysis, imageContext);
        
        const responseTime = Date.now() - responseStartTime;
        Logger.info(`‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${responseTime}–º—Å`);

        if (response) {
          Logger.info(`‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: "${response}"`);
        } else {
          Logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç');
        }

      } else {
        Logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }

    } catch (error) {
      Logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ${fileName}:`, error);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å –º–æ–∫–∞–ø –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
   */
  private async testMockImageAnalysis(): Promise<void> {
    Logger.info('\nüé≠ –¢–µ—Å—Ç —Å –º–æ–∫–∞–ø –¥–∞–Ω–Ω—ã–º–∏ (—Å–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞)...');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    const mockAnalysis = {
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–µ–º–æ–º',
      content: '–ó–∞–±–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º',
      type: 'meme' as const,
      mood: 'funny',
      containsText: true,
      textContent: '–ö–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª –Ω–æ–≤—É—é —Ñ–∏—á—É –≤ –ø—Ä–æ–µ–∫—Ç–µ',
      isHumorous: true,
      tags: ['–º–µ–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—é–º–æ—Ä']
    };

    const imageContext: ImageContext = {
      chatContext: [
        '–ë–æ–¥—è: –∫–µ–∫, —Å–º–µ—à–Ω–æ',
        '–ú–∞–∫—Å: –∞—Ö–∞—Ö–∞, –≤ —Ç–æ—á–∫—É',
        '–°–∞–Ω—è: –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –∏ –±—ã–ª–æ'
      ],
      userName: 'MockUser',
      userProfile: undefined,
      personality: {} as BotPersonality
    };

    Logger.info('üìã –ú–æ–∫–∞–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:');
    Logger.info(`   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${mockAnalysis.description}`);
    Logger.info(`   ‚Ä¢ –¢–∏–ø: ${mockAnalysis.type}`);
    Logger.info(`   ‚Ä¢ –Æ–º–æ—Ä: ${mockAnalysis.isHumorous ? '–¥–∞' : '–Ω–µ—Ç'}`);
    Logger.info(`   ‚Ä¢ –¢–µ–≥–∏: [${mockAnalysis.tags.join(', ')}]`);

    Logger.info('\nüí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –º–æ–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö...');
    try {
      const response = await this.imageAnalyzer.generateImageResponse(mockAnalysis, imageContext);
      
      if (response) {
        Logger.info(`‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: "${response}"`);
      } else {
        Logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –º–æ–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      Logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
   */
  showSystemInfo(): void {
    Logger.info('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
    Logger.info(`üîß –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: ${this.imageAnalyzer.isAvailable() ? '–¥–∞' : '–Ω–µ—Ç'}`);
    Logger.info(`ü§ñ –ú–æ–¥–µ–ª—å: ${this.imageAnalyzer.getModelInfo()}`);
    
    if (!this.imageAnalyzer.isAvailable()) {
      Logger.info('\n‚ùó –î–ª—è —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:');
      Logger.info('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª');
      Logger.info('   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ AI_MODE –Ω–µ —Ä–∞–≤–µ–Ω "patterns_only"');
      Logger.info('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ OpenAI API');
    }
  }
}

// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function runImageTests(): Promise<void> {
  const tester = new ImageTester();
  
  tester.showSystemInfo();
  await tester.testImageAnalysis();
  
  Logger.info('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}