import select from '@inquirer/select';
import { Logger } from '../utils/logger.js';

export interface ModelConfig {
  model: string;
  displayName: string;
  description: string;
  pricing: string;
  isReasoning: boolean;
}

export const AVAILABLE_MODELS: ModelConfig[] = [
  {
    model: 'gpt-5-nano',
    displayName: 'GPT-5 Nano (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)',
    description: '–°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ reasoning',
    pricing: '$0.05/1M –≤—Ö–æ–¥—è—â–∏—Ö, $0.40/1M –∏—Å—Ö–æ–¥—è—â–∏—Ö (~$0.03/–º–µ—Å—è—Ü)',
    isReasoning: false
  },
  {
    model: 'gpt-5-chat-latest', 
    displayName: 'GPT-5 Chat Latest (–ü–†–ï–ú–ò–£–ú)',
    description: '–°–∞–º–∞—è —É–º–Ω–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ reasoning —Ç–æ–∫–µ–Ω–æ–≤',
    pricing: '$1.25/1M –≤—Ö–æ–¥—è—â–∏—Ö, $10/1M –∏—Å—Ö–æ–¥—è—â–∏—Ö (~$0.64/–º–µ—Å—è—Ü)',
    isReasoning: false
  }
];

export class ModelSelector {
  async ensureModelConfigured(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
    if (process.env.OPENAI_MODEL) {
      Logger.info(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: ${process.env.OPENAI_MODEL}`);
      return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
    Logger.info('ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º...');
    const model = await selectModel();
    process.env.OPENAI_MODEL = model;
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º config –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const { config } = await import('../core/config.js');
    (config as any).openaiModel = model;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ .env —Ñ–∞–π–ª –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    await this.saveModelToEnv(model);
  }
  
  private async saveModelToEnv(model: string): Promise<void> {
    try {
      const { promises: fs } = await import('fs');
      const envPath = '.env';
      
      let envContent = '';
      try {
        envContent = await fs.readFile(envPath, 'utf-8');
      } catch {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º OPENAI_MODEL
      const lines = envContent.split('\n');
      let modelLineExists = false;
      
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].startsWith('OPENAI_MODEL=')) {
          lines[i] = `OPENAI_MODEL=${model}`;
          modelLineExists = true;
          break;
        }
      }
      
      if (!modelLineExists) {
        lines.push(`OPENAI_MODEL=${model}`);
      }
      
      await fs.writeFile(envPath, lines.join('\n'));
      Logger.info(`üíæ –ú–æ–¥–µ–ª—å ${model} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env`);
    } catch (error) {
      Logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –≤ .env: ${error}`);
    }
  }
}

export async function selectModel(): Promise<string> {
  console.log('\nü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞:\n');
  
  const choices = AVAILABLE_MODELS.map(config => ({
    name: config.displayName,
    value: config.model,
    description: `${config.description} | ${config.pricing}`
  }));

  try {
    const selectedModel = await select({
      message: '–ö–∞–∫—É—é –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
      choices,
      pageSize: 10
    });

    const selectedConfig = AVAILABLE_MODELS.find(c => c.model === selectedModel);
    if (selectedConfig) {
      console.log(`\n‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${selectedConfig.displayName}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${selectedConfig.pricing}`);
      console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${selectedConfig.description}\n`);
    }

    return selectedModel;
  } catch (error: any) {
    if (error.name === 'ExitPromptError') {
      console.log('\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
      process.exit(0);
    }
    throw error;
  }
}