import OpenAI from "openai";
import { config } from "../core/config.js";
import { Logger } from "../utils/logger.js";
import { BotPersonality, ChatContext, MemoryContext } from "../core/types.js";
import { UserProfiler, UserProfile } from "../analysis/user-profiler.js";

export class AIEngine {
  private openai: OpenAI | null = null;
  private personality: BotPersonality;
  private isEnabled: boolean;
  private profiler: UserProfiler | null = null;

  constructor(personality: BotPersonality, chatId?: string) {
    this.personality = personality;
    this.isEnabled = config.aiMode !== "patterns_only" && !!config.openaiApiKey;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω chatId
    if (chatId) {
      this.profiler = new UserProfiler(chatId);
      Logger.info('üë§ –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    if (this.isEnabled) {
      this.openai = new OpenAI({
        apiKey: config.openaiApiKey,
      });
      Logger.info(`ü§ñ AI –¥–≤–∏–∂–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: ${config.openaiModel})`);
    } else {
      Logger.info("üîß AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã");
    }
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ - —Ç–æ–ª—å–∫–æ –¥–ª—è non-reasoning –º–æ–¥–µ–ª–µ–π
   */
  private calculateMaxTokens(): number {
    const baseLength = this.personality.responseStyle.averageLength;
    
    if (config.openaiModel === 'gpt-5-nano') {
      // GPT-5 nano –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è reasoning + –æ—Ç–≤–µ—Ç
      const multiplier = 12;
      return Math.max(500, Math.min(2000, Math.round(baseLength * multiplier)));
    } else if (config.openaiModel === 'gpt-5-chat-latest') {
      // GPT-5-chat-latest - –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—å, –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      const multiplier = 8;
      return Math.max(800, Math.min(3000, Math.round(baseLength * multiplier)));
    } else {
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
      const multiplier = 3;
      return Math.max(300, Math.min(1200, Math.round(baseLength * multiplier)));
    }
  }

  /**
   * –£–±—Ä–∞—Ç—å –≤—Å–µ reasoning/verbosity –ª–æ–≥–∏–∫—É
   */
  async generateResponse(
    messageText: string,
    author: string,
    context: ChatContext
  ): Promise<string | null> {
    if (!this.isEnabled) {
      Logger.debug("AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
      return null;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      let userProfile: UserProfile | null = null;
      if (this.profiler) {
        userProfile = await this.profiler.getProfile(author);
        if (!userProfile) {
          // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –±—ã—Å—Ç—Ä–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            userProfile = await this.profiler.analyzeUser(author);
            Logger.debug(`üìã –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${author}`);
          } catch (error) {
            Logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${author}: ${error}`);
          }
        }
      }
      
      const prompt = this.buildPromptWithMemory(messageText, author, context, userProfile);
      const maxTokens = this.calculateMaxTokens();
      
      Logger.debug(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª—å: ${config.openaiModel}, maxTokens: ${maxTokens}`);
      Logger.debug(`–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${prompt.system.substring(0, 100)}...`);
      
      const requestParams: any = {
        model: config.openaiModel,
        messages: [
          {
            role: 'system',
            content: prompt.system
          },
          {
            role: 'user', 
            content: prompt.user
          }
        ],
        max_completion_tokens: maxTokens
      };

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      if (config.openaiModel === 'gpt-5-nano') {
        // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–∏—Ç—å reasoning –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        // requestParams.reasoning_effort = 'minimal'; // –µ—â–µ –±—ã—Å—Ç—Ä–µ–µ
        requestParams.reasoning_effort = 'low';
        requestParams.verbosity = 'low';
      } else if (config.openaiModel === 'gpt-5-chat-latest') {
        // GPT-5-chat-latest –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞
        requestParams.temperature = 0.7;    // –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
        requestParams.top_p = 0.95;         // –ù–µ–º–Ω–æ–≥–æ —Å—É–∂–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
        requestParams.store = true;         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      } else if (config.openaiModel.startsWith('gpt-5')) {
        // –î—Ä—É–≥–∏–µ GPT-5 –º–æ–¥–µ–ª–∏
        requestParams.verbosity = 'medium';
      } else {
        // –°—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏
        requestParams.temperature = 0.9;
        requestParams.presence_penalty = 0.8;
        requestParams.frequency_penalty = 0.5;
      }

      const response = await this.openai!.chat.completions.create(requestParams);
      
      Logger.debug(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI: ${JSON.stringify(response, null, 2)}`);

      const aiResponse = response.choices[0]?.message?.content?.trim();
      
      if (aiResponse) {
        // –ß–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        let cleanResponse = aiResponse;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∏ –≤ –Ω–∞—á–∞–ª–µ
        const namePatterns = [
          /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*–ö—É–ª–æ–≤–∏—á\s*:\s*/i,
          /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*:\s*/i,
          /^–ì–µ—è—Å–∞–Ω–¥—Ä\s*:\s*/i,
          /^–°–∞–Ω—è\s*:\s*/i,
          /^–®—É—Ä–∏–∫\s*:\s*/i,
          /^–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\s*:\s*/i,
          /^–ê–ª–µ–∫—Å\s*:\s*/i,
        ];

        for (const pattern of namePatterns) {
          cleanResponse = cleanResponse.replace(pattern, "");
        }

        cleanResponse = cleanResponse.trim();
        
        if (cleanResponse) {
          Logger.info(`üß† AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç: "${cleanResponse.substring(0, 50)}..."`);
          return cleanResponse;
        }
      }
      
      return null;
    } catch (error) {
      Logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:", error);
      Logger.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
      return null;
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
   */
  private buildPromptWithMemory(
    messageText: string,
    author: string,
    context: ChatContext,
    userProfile?: UserProfile | null
  ): { system: string; user: string; } {
    const isNano = config.openaiModel === 'gpt-5-nano';
    
    if (isNano) {
      return this.buildNanoPrompt(messageText, author, context, userProfile);
    } else {
      return this.buildFullPrompt(messageText, author, context, userProfile);
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-5 nano - –±—ã—Å—Ç—Ä–æ –∏ —ç–∫–æ–Ω–æ–º–Ω–æ
   */
  private buildNanoPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    userProfile?: UserProfile | null
  ): { system: string; user: string; } {
    const memoryContext = context.memoryContext;
    const recentContext = context.recentMessages
      .slice(-3)
      .map((msg) => `${msg.author}: ${msg.text}`)
      .join("\n");

    let memoryPrompt = "";
    if (memoryContext) {
      const userRelation = memoryContext.userRelationships.get(author);
      if (userRelation && userRelation.interactionCount > 1) {
        memoryPrompt += `\n${author}: –∑–Ω–∞–∫–æ–º—ã ${userRelation.interactionCount} –¥–Ω–µ–π`;
      }

      // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (memoryContext.relevantHistory && memoryContext.relevantHistory.length > 0) {
        const bestMemory = memoryContext.relevantHistory[0];
        memoryPrompt += `\n–í—Å–ø–æ–º–∏–Ω–∞—é: "${bestMemory.content}"`;
      }

      // –¢–æ–ø-3 —Ç–µ–º—ã
      if (memoryContext.activeTopics.length > 0) {
        const topics = memoryContext.activeTopics.slice(0, 3).map(t => t.topic).join(", ");
        memoryPrompt += `\n–û–±—Å—É–∂–¥–∞–ª–∏: ${topics}`;
      }
    }

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let stylePrompt = "";
    if (userProfile) {
      const style = userProfile.communicationStyle;
      const social = userProfile.socialBehavior;
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
      if (style.formalityLevel < 0.3) {
        stylePrompt += "\n–û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–µ–∂–ª–∏–≤–æ—Å—Ç–µ–π.";
      } else if (style.formalityLevel > 0.7) {
        stylePrompt += "\n–ë—É–¥—å —á—É—Ç—å –±–æ–ª–µ–µ –≤–µ–∂–ª–∏–≤—ã–º –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º.";
      }
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
      if (style.emotionalExpression > 0.6) {
        stylePrompt += "\n–ú–æ–∂–µ—à—å –±—ã—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–µ–µ, –æ–Ω —ç—Ç–æ —Ü–µ–Ω–∏—Ç.";
      }
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—ã
      if (userProfile.interests.topTopics.length > 0) {
        const mainInterest = userProfile.interests.topTopics[0].topic;
        stylePrompt += `\n–ï–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ${mainInterest}.`;
      }
      
      // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
      if (social.humor > 0.4) {
        stylePrompt += "\n–ú–æ–∂–µ—à—å —à—É—Ç–∏—Ç—å - –æ–Ω –æ—Ü–µ–Ω–∏—Ç.";
      }
      
      if (social.helpfulness > 0.3) {
        stylePrompt += "\n–û–Ω –ª—é–±–∏—Ç –ø–æ–º–æ–≥–∞—Ç—å, –º–æ–∂–µ—à—å —ç—Ç–æ –æ—Ç–º–µ—Ç–∏—Ç—å.";
      }
    }

    const system = `–¢—ã –°–∞–Ω—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.${memoryPrompt}${stylePrompt}

–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∫–∞–∫ –¥—Ä—É–≥:

${recentContext}`;

    return { 
      system, 
      user: `${author}: ${messageText}` 
    };
  }

  /**
   * –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π - —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ –±–æ–≥–∞—Ç–æ–π –ø–∞–º—è—Ç—å—é
   */
  private buildFullPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    userProfile?: UserProfile | null
  ): { system: string; user: string; } {
    const memoryContext = context.memoryContext;
    const recentContext = context.recentMessages
      .slice(-5)
      .map((msg) => `${msg.author}: ${msg.text}`)
      .join("\n");

    let characterPrompt = `–¢—ã –°–∞–Ω—è (–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á) - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç. 
–¢—ã –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä–æ–º—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏.

–¢–í–û–ô –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ì–æ–≤–æ—Ä–∏—à—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –∫–∞–∑–∞—Ç—å—Å—è –∫—Ä—É—Ç—ã–º
- –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å–ª–µ–Ω–≥, –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
- –ú–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, –Ω–æ –≤ –º–µ—Ä—É –∏ –∫ –º–µ—Å—Ç—É
- –û—Ç–≤–µ—á–∞–µ—à—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–µ —Ä–∞—Å—Ç–µ–∫–∞–µ—à—å—Å—è –º—ã—Å–ª—å—é
- –•–æ—Ä–æ—à–æ –ø–æ–º–Ω–∏—à—å –ª—é–¥–µ–π –∏ –ø—Ä–æ—à–ª—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã  
- –†–µ–∞–≥–∏—Ä—É–µ—à—å –∞–¥–µ–∫–≤–∞—Ç–Ω–æ —Å–∏—Ç—É–∞—Ü–∏–∏
- –° –¥—Ä—É–∑—å—è–º–∏ –º–æ–∂–µ—à—å –ø–æ—à—É—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–¥–∫–æ–ª–æ—Ç—å, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ`;

    let memoryPrompt = "";
    if (memoryContext) {
      const userRelation = memoryContext.userRelationships.get(author);
      if (userRelation) {
        memoryPrompt += `\n\n–¢–í–û–Ø –°–í–Ø–ó–¨ –° ${author.toUpperCase()}:`;
        memoryPrompt += `\n- –ó–Ω–∞–∫–æ–º—ã ${userRelation.interactionCount} –¥–Ω–µ–π`;
        memoryPrompt += `\n- –û—Ç–Ω–æ—à–µ–Ω–∏—è: ${userRelation.relationship || '—Ö–æ—Ä–æ—à–∏–π –¥—Ä—É–≥ –ø–æ —á–∞—Ç—É'}`;
      }

      // –ü–æ–¥—Ä–æ–±–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (memoryContext.relevantHistory && memoryContext.relevantHistory.length > 0) {
        memoryPrompt += `\n\n–ß–¢–û –ü–û–ú–ù–ò–®–¨ –ü–†–û ${author.toUpperCase()}:`;
        memoryContext.relevantHistory.slice(0, 5).forEach((memory, i) => {
          memoryPrompt += `\n${i + 1}. ${memory.author}: "${memory.content}"`;
        });
      }

      // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (memoryContext.activeTopics.length > 0) {
        const topics = memoryContext.activeTopics.slice(0, 10).map(t => t.topic).join(", ");
        memoryPrompt += `\n\n–¢–ï–ú–´ –ö–û–¢–û–†–´–ï –û–ë–°–£–ñ–î–ê–õ–ò: ${topics}`;
      }

      if (memoryContext.currentMood && memoryContext.currentMood !== "neutral") {
        memoryPrompt += `\n–ù–ê–°–¢–†–û–ï–ù–ò–ï –í –ß–ê–¢–ï: ${memoryContext.currentMood}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      if (memoryContext.conversationSummaries && memoryContext.conversationSummaries.length > 0) {
        memoryPrompt += `\n\n–ü–†–ï–î–´–î–£–©–ò–ï –†–ê–ó–ì–û–í–û–†–´:`;
        memoryContext.conversationSummaries.slice(0, 2).forEach(summary => {
          memoryPrompt += `\n- ${summary.summary}`;
        });
      }
    }

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    let stylePrompt = "";
    if (userProfile) {
      stylePrompt += `\n\n–ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–û–î ${author.toUpperCase()}:`;
      
      const style = userProfile.communicationStyle;
      const social = userProfile.socialBehavior;
      
      // –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è
      if (style.formalityLevel < 0.2) {
        stylePrompt += `\n- –°–æ–≤—Å–µ–º –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∫–∞–∫ —Å –∫–æ—Ä–µ—à–µ–º`;
      } else if (style.formalityLevel < 0.4) {
        stylePrompt += `\n- –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–∂–µ—Å–∫–∏`;
      } else if (style.formalityLevel > 0.7) {
        stylePrompt += `\n- –ß—É—Ç—å –±–æ–ª–µ–µ –≤–µ–∂–ª–∏–≤–æ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`;
      }
      
      if (style.emotionalExpression > 0.6) {
        stylePrompt += `\n- –ú–æ–∂–µ—à—å –±—ã—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–µ–µ - –æ–Ω —ç–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π`;
      } else if (style.emotionalExpression < 0.3) {
        stylePrompt += `\n- –°–¥–µ—Ä–∂–∞–Ω–Ω–æ, –æ–Ω –Ω–µ –æ—á–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π`;
      }
      
      if (style.initiationRate > 0.4) {
        stylePrompt += `\n- –û–Ω –ª—é–±–∏—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä—ã - –º–æ–∂–µ—à—å —Ä–∞–∑–≤–∏—Ç—å —Ç–µ–º—É`;
      }
      
      // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
      if (social.humor > 0.5) {
        stylePrompt += `\n- –ú–æ–∂–µ—à—å —à—É—Ç–∏—Ç—å –∏ —Å—Ç–µ–±–∞—Ç—å—Å—è - –æ–Ω –æ—Ü–µ–Ω–∏—Ç —é–º–æ—Ä`;
      } else if (social.humor < 0.2) {
        stylePrompt += `\n- –°–µ—Ä—å–µ–∑–Ω–µ–µ, –Ω–µ –æ—Å–æ–±–æ —à—É—Ç–ª–∏–≤`;
      }
      
      if (social.helpfulness > 0.4) {
        stylePrompt += `\n- –û–Ω –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å - –º–æ–∂–µ—à—å —ç—Ç–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç`;
      }
      
      if (social.supportiveness > 0.4) {
        stylePrompt += `\n- –û–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏—Ö - –º–æ–∂–µ—à—å –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–µ–µ`;
      }
      
      // –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ç–µ–º—ã
      if (userProfile.interests.topTopics.length > 0) {
        const topInterests = userProfile.interests.topTopics.slice(0, 3);
        stylePrompt += `\n- –ï–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: ${topInterests.map(t => t.topic).join(', ')}`;
      }
      
      // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const peak = userProfile.activityPattern.peakActivity;
      if (peak >= 6 && peak <= 10) {
        stylePrompt += `\n- –û–Ω –∂–∞–≤–æ—Ä–æ–Ω–æ–∫ (–ø–∏–∫ –≤ ${peak}:00) - –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–¥—Ä—ã–π —É—Ç—Ä–æ–º`;
      } else if (peak >= 20 && peak <= 2) {
        stylePrompt += `\n- –û–Ω —Å–æ–≤–∞ (–ø–∏–∫ –≤ ${peak}:00) - –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ –≤–µ—á–µ—Ä–æ–º`;
      }
    }

    const system = `${characterPrompt}${memoryPrompt}${stylePrompt}

–ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:
${recentContext}

–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –°–∞–Ω—è –∏–∑ —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–º—è—Ç—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.`;

    return { 
      system, 
      user: `${author}: ${messageText}` 
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI
   */
  isAvailable(): boolean {
    return this.isEnabled;
  }

  getModelInfo(): string {
    return this.isEnabled ? `${config.openaiModel} —Å –ø–∞–º—è—Ç—å—é` : "–æ—Ç–∫–ª—é—á–µ–Ω";
  }
}