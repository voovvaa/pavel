import OpenAI from "openai";
import { config } from "../core/config.js";
import { Logger } from "../utils/logger.js";
import { BotPersonality, ChatContext } from "../core/types.js";
import { cacheManager, SmartCache } from "../core/cache-manager.js";
// –≠–¢–ê–ü 8: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
import { EmotionalAdapter, EmotionalAdaptation } from "./emotional-adapter.js";

export class AIEngine {
  private openai: OpenAI | null = null;
  private personality: BotPersonality;
  private isEnabled: boolean;
  // –≠–¢–ê–ü 8: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
  private emotionalAdapter: EmotionalAdapter;
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ—Ç–≤–µ—Ç–æ–≤
  private responseCache: SmartCache<string>;

  constructor(personality: BotPersonality, chatId?: string) {
    this.personality = personality;
    this.isEnabled = config.aiMode !== "patterns_only" && !!config.openaiApiKey;
    
    // –≠–¢–ê–ü 8: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
    this.emotionalAdapter = new EmotionalAdapter();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤
    this.responseCache = cacheManager.getCache<string>('ai');

    if (this.isEnabled) {
      this.openai = new OpenAI({
        apiKey: config.openaiApiKey,
      });
      Logger.ai(`–î–≤–∏–∂–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: ${config.openaiModel}) —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º`);
    } else {
      Logger.info("üîß AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã");
    }
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
   */
  private calculateMaxTokens(): number {
    const baseLength = this.personality.responseStyle.averageLength;
    
    if (config.openaiModel === 'gpt-5-nano') {
      return Math.max(400, Math.min(1500, Math.round(baseLength * 8)));
    } else if (config.openaiModel === 'gpt-5-chat-latest') {
      return Math.max(600, Math.min(2000, Math.round(baseLength * 6)));
    } else {
      return Math.max(200, Math.min(800, Math.round(baseLength * 4)));
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async generateResponse(
    messageText: string,
    author: string,
    context: ChatContext
  ): Promise<string | null> {
    if (!this.isEnabled) {
      Logger.debug("AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
      return null;
    }

    const startTime = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const cacheKey = this.buildCacheKey(messageText, author, context);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π)
    if (this.shouldUseCache(messageText)) {
      const cachedResponse = this.responseCache.get(cacheKey);
      if (cachedResponse) {
        const duration = Date.now() - startTime;
        Logger.performance('AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫—ç—à)', duration);
        Logger.ai(`–û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞`, `"${cachedResponse.substring(0, 50)}..."`);
        return cachedResponse;
      }
    }

    try {
      // –≠–¢–ê–ü 8: –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é
      let emotionalAdaptation: EmotionalAdaptation | null = null;
      if (context.memoryContext) {
        try {
          emotionalAdaptation = this.emotionalAdapter.adaptToEmotionalState(
            author,
            messageText,
            context.memoryContext
          );
        } catch (error) {
          Logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:', error);
        }
      }
      
      const prompt = this.buildPrompt(messageText, author, context, emotionalAdaptation);
      const maxTokens = this.calculateMaxTokens();
      
      Logger.ai(`–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: ${config.openaiModel}`, `maxTokens: ${maxTokens}`);
      
      const requestParams = this.buildRequestParams(prompt, maxTokens);
      const response = await this.openai!.chat.completions.create(requestParams);
      
      const aiResponse = response.choices[0]?.message?.content?.trim();
      
      if (aiResponse) {
        const cleanResponse = this.cleanResponse(aiResponse);
        
        if (cleanResponse) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
          if (this.shouldUseCache(messageText)) {
            this.responseCache.set(cacheKey, cleanResponse, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç TTL
          }
          
          const duration = Date.now() - startTime;
          Logger.performance('AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è', duration);
          Logger.ai(`–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`, `"${cleanResponse.substring(0, 50)}..."`);
          return cleanResponse;
        }
      }
      
      return null;
    } catch (error) {
      const duration = Date.now() - startTime;
      Logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:", error);
      Logger.performance('AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–æ—à–∏–±–∫–∞)', duration);
      return null;
    }
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
   */
  private buildRequestParams(prompt: { system: string; user: string }, maxTokens: number): any {
    const requestParams: any = {
      model: config.openaiModel,
      messages: [
        { role: 'system', content: prompt.system },
        { role: 'user', content: prompt.user }
      ],
      max_completion_tokens: maxTokens
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if (config.openaiModel === 'gpt-5-nano') {
      requestParams.reasoning_effort = 'low';
      requestParams.verbosity = 'low';
    } else if (config.openaiModel === 'gpt-5-chat-latest') {
      requestParams.temperature = 0.7;
      requestParams.top_p = 0.95;
      requestParams.store = true;
    } else {
      // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
      requestParams.temperature = 0.8;
    }

    return requestParams;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π
   */
  private cleanResponse(aiResponse: string): string {
    let cleanResponse = aiResponse;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∏ –≤ –Ω–∞—á–∞–ª–µ
    const namePatterns = [
      /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*–ö—É–ª–æ–≤–∏—á\s*:\s*/i,
      /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*:\s*/i,
      /^–ì–µ—è—Å–∞–Ω–¥—Ä\s*:\s*/i,
      /^–°–∞–Ω—è\s*:\s*/i,
      /^–®—É—Ä–∏–∫\s*:\s*/i,
      /^–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\s*:\s*/i,
      /^–ê–ª–µ–∫—Å\s*:\s*/i,
    ];

    for (const pattern of namePatterns) {
      cleanResponse = cleanResponse.replace(pattern, "");
    }

    return cleanResponse.trim();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è
   */
  private analyzeRepetition(messageText: string, author: string, context: ChatContext): {
    isRepetition: boolean;
    repetitionCount: number;
    irritationLevel: 'none' | 'mild' | 'moderate' | 'high';
    shouldAdaptPrompt: boolean;
  } {
    if (!context.recentMessages || context.recentMessages.length < 2) {
      return { isRepetition: false, repetitionCount: 0, irritationLevel: 'none', shouldAdaptPrompt: false };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessages = context.recentMessages
      .filter(msg => msg.author === author)
      .slice(-15)
      .map(msg => (msg.text || '').toLowerCase().trim())
      .filter(text => text && text.length > 0);

    if (userMessages.length < 2) {
      return { isRepetition: false, repetitionCount: 0, irritationLevel: 'none', shouldAdaptPrompt: false };
    }

    const currentMessage = messageText.toLowerCase().trim();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    const exactMatches = userMessages.filter(msg => msg === currentMessage).length;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (similarity > 0.85)
    const similarMessages = userMessages.filter(msg => {
      if (msg === currentMessage) return true;
      return this.calculateSimilarity(msg, currentMessage) > 0.85;
    });

    const repetitionCount = Math.max(exactMatches, similarMessages.length);
    const isRepetition = repetitionCount >= 2;

    let irritationLevel: 'none' | 'mild' | 'moderate' | 'high' = 'none';
    
    if (repetitionCount >= 2 && repetitionCount <= 3) {
      irritationLevel = 'mild';
    } else if (repetitionCount >= 4 && repetitionCount <= 5) {
      irritationLevel = 'moderate';
    } else if (repetitionCount >= 6) {
      irritationLevel = 'high';
    }

    const shouldAdaptPrompt = isRepetition && irritationLevel !== 'none';
    
    if (shouldAdaptPrompt) {
      Logger.debug(`üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${repetitionCount}x "${currentMessage.substring(0, 30)}..." –æ—Ç ${author}`);
      Logger.debug(`üò§ –£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è: ${irritationLevel}`);
    }

    return { isRepetition, repetitionCount, irritationLevel, shouldAdaptPrompt };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º Levenshtein (0-1)
   */
  private calculateSimilarity(str1: string, str2: string): number {
    if (str1 === str2) return 1;
    if (str1.length === 0 || str2.length === 0) return 0;

    // –í—ã—á–∏—Å–ª—è–µ–º Levenshtein distance
    const distance = this.levenshteinDistance(str1, str2);
    const maxLength = Math.max(str1.length, str2.length);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º distance –≤ similarity (0-1)
    return maxLength === 0 ? 1 : 1 - (distance / maxLength);
  }

  /**
   * –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º Levenshtein distance
   */
  private levenshteinDistance(a: string, b: string): number {
    const m = a.length;
    const n = b.length;
    const d = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0));

    for (let i = 0; i <= m; i++) {
      d[i][0] = i;
    }
    for (let j = 0; j <= n; j++) {
      d[0][j] = j;
    }

    for (let i = 1; i <= m; i++) {
      for (let j = 1; j <= n; j++) {
        const cost = a[i - 1] === b[j - 1] ? 0 : 1;
        d[i][j] = Math.min(
          d[i - 1][j] + 1,      // deletion
          d[i][j - 1] + 1,      // insertion
          d[i - 1][j - 1] + cost // substitution
        );
      }
    }

    return d[m][n];
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
   */
  private buildPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    emotionalAdaptation?: EmotionalAdaptation | null
  ): { system: string; user: string; } {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ü–ï–†–ï–î –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ–º–ø—Ç–∞
    const repetitionAnalysis = this.analyzeRepetition(messageText, author, context);
    
    const isNano = config.openaiModel === 'gpt-5-nano';
    
    if (isNano) {
      return this.buildNanoPrompt(messageText, author, context, emotionalAdaptation, repetitionAnalysis);
    } else {
      return this.buildCompactPrompt(messageText, author, context, emotionalAdaptation, repetitionAnalysis);
    }
  }

  /**
   * –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT-5 nano - –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
   */
  private buildNanoPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    emotionalAdaptation?: EmotionalAdaptation | null,
    repetitionAnalysis?: { isRepetition: boolean; repetitionCount: number; irritationLevel: 'none' | 'mild' | 'moderate' | 'high'; shouldAdaptPrompt: boolean }
  ): { system: string; user: string; } {
    const memoryContext = context.memoryContext;
    const recentContext = context.recentMessages
      .slice(-2)
      .map((msg) => `${msg.author}: ${(msg.text || '').replace(/[`$\\]/g, '_')}`)
      .join("\n");

    let memoryPrompt = "";
    if (memoryContext) {
      const userRelation = memoryContext.userRelationships.get(author);
      if (userRelation && userRelation.interactionCount > 1) {
        memoryPrompt += `\n${author}: –∑–Ω–∞–∫–æ–º—ã ${userRelation.interactionCount} –¥–Ω–µ–π`;
      }

      if (memoryContext.relevantHistory && memoryContext.relevantHistory.length > 0) {
        const bestMemory = memoryContext.relevantHistory[0];
        memoryPrompt += `\n–ü–æ–º–Ω–∏—à—å: "${bestMemory.content.substring(0, 50)}"`;
      }

      if (memoryContext.activeTopics.length > 0) {
        const topics = memoryContext.activeTopics.slice(0, 2).map(t => t.topic).join(", ");
        memoryPrompt += `\n–¢–µ–º—ã: ${topics}`;
      }
    }

    let emotionalPrompt = "";
    if (emotionalAdaptation?.promptAdjustments.behaviorInstructions) {
      emotionalPrompt += `\n${emotionalAdaptation.promptAdjustments.behaviorInstructions}`;
    }

    // –ù–û–í–û–ï: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º –¥–ª—è nano –º–æ–¥–µ–ª–∏
    let repetitionPrompt = "";
    if (repetitionAnalysis?.shouldAdaptPrompt) {
      switch (repetitionAnalysis.irritationLevel) {
        case 'mild':
          repetitionPrompt += `\n${author} –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è (${repetitionAnalysis.repetitionCount}x). –ù–∞–º–µ–∫–Ω–∏ —á—Ç–æ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª.`;
          break;
        case 'moderate':
          repetitionPrompt += `\n${author} –¥–æ—Å—Ç–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞–º–∏ (${repetitionAnalysis.repetitionCount}x). –ü–æ–∫–∞–∂–∏ –ª–µ–≥–∫–æ–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ.`;
          break;
        case 'high':
          repetitionPrompt += `\n${author} –∑–∞–¥–æ–ª–±–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ (${repetitionAnalysis.repetitionCount}x). –ü–æ—à–ª–∏ –µ–≥–æ –Ω–∞—Ö—É–π –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏.`;
          break;
      }
    }

    const systemParts = [
      '–¢—ã –ì–µ–π—Å–∞–Ω–¥—Ä, 35 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ –∑–∞–≤–æ–¥–µ.',
      memoryPrompt || '',
      emotionalPrompt || '',
      repetitionPrompt || '',
      '\n–¢–≤–æ–π —Å—Ç–∏–ª—å: –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, –∏–Ω–æ–≥–¥–∞ –∏—Ä–æ–Ω–∏—á–Ω—ã–π',
      '\n–û—Ç–≤–µ—á–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ, –∫–∞–∫ –º—É–∂–∏–∫ –≤ —Å–≤–æ–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ',
      '\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:',
      '\n' + (recentContext || ''),
      '\n\n–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ:'
    ];
    
    const system = systemParts.join('');
    return { system, user: author + ': ' + messageText };
  }

  /**
   * –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
   */
  private buildCompactPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    emotionalAdaptation?: EmotionalAdaptation | null,
    repetitionAnalysis?: { isRepetition: boolean; repetitionCount: number; irritationLevel: 'none' | 'mild' | 'moderate' | 'high'; shouldAdaptPrompt: boolean }
  ): { system: string; user: string; } {
    const memoryContext = context.memoryContext;
    const recentContext = context.recentMessages
      .slice(-3)
      .map((msg) => `${msg.author}: ${(msg.text || '').replace(/[`$\\]/g, '_')}`)
      .join("\n");

    // –ë–∞–∑–æ–≤—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞
    let characterPrompt = `–¢—ã –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á (–°–∞–Ω—è), 35 –ª–µ—Ç, —Ä–∞–±–æ—á–∏–π —Å –∑–∞–≤–æ–¥–∞.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
‚Ä¢ –†–æ–¥–æ–º –∏–∑ –°–æ—Ä—Å–∫–∞, –±—ã–≤—à–∏–π –Ω–µ—É–¥–∞—á–ª–∏–≤—ã–π PHP-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
‚Ä¢ –°–ø–æ–∫–æ–π–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å —Ö–æ—Ä–æ—à–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞
‚Ä¢ –í –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –ª–∏–¥–µ—Ä - —Å–∏–¥–∏—à—å –∫–∞–∫ –≤—Å–µ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—à—å
‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –Ω–æ —É–≥–æ–ª –∑—Ä–µ–Ω–∏—è –∏–Ω–æ–≥–¥–∞ "—Ç—É–ø–æ–π"
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—à—å —Å–≤–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –Ω–µ –∫–æ–º–ø–ª–µ–∫—Å—É–µ—à—å

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
‚Ä¢ –õ–∞–∫–æ–Ω–∏—á–Ω—ã–π - –Ω–µ –ª—é–±–∏—à—å –º–Ω–æ–≥–æ —Å–ª–æ–≤
‚Ä¢ –Æ–º–æ—Ä: —Ç–æ–Ω–∫–∏–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π, –ø–æ—Å—Ç–∏—Ä–æ–Ω–∏—á–Ω—ã–π, –ë–ï–ó –±—É—Ñ—Ñ–æ–Ω–∞–¥—ã
‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø–æ–¥—Ç–µ–∫—Å—Ç –≤ –º–µ—Ä—É –≤–æ–∑—Ä–∞—Å—Ç–∞
‚Ä¢ –ú–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –Ω–∞—Ç—É–≥–∏
‚Ä¢ –†–µ—á—å 35-–ª–µ—Ç–Ω–µ–≥–æ –º—É–∂–∏–∫–∞, –Ω–µ –ø—ã—Ç–∞–µ—à—å—Å—è –∫–∞–∑–∞—Ç—å—Å—è –º–æ–ª–æ–∂–µ

–¢–ò–ü–ò–ß–ù–´–ï –†–ï–ê–ö–¶–ò–ò:
‚Ä¢ "–ö–∞–∫ –¥–µ–ª–∞?" ‚Üí "–î–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Å–∏–∂—É –ø–µ—Ä–¥—é –Ω–∞ –∑–∞–≤–æ–¥–µ"
‚Ä¢ "–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?" ‚Üí "–î–∞ –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ"
‚Ä¢ –ù–∞–¥–æ–µ–ª —Å–ø–æ—Ä ‚Üí "–û–π –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π" / "–ù—É –∏ —á–µ –≤—ã –∫–∞–∫ –¥–µ—Ç–∏"
‚Ä¢ –•–æ—Ä–æ—à–∞—è —à—É—Ç–∫–∞ ‚Üí "–ª–æ–ª", "))))", "—Ö—Ä—é–∫–Ω—É–ª", "—Ä–∂—É"
‚Ä¢ –¢—É–ø–∞—è —à—É—Ç–∫–∞ ‚Üí "–ù—É —Ç–∞–∫–æ–µ", "–º–¥–∞"
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–∞—Ç—å ‚Üí "–ù—É –º–æ–∂–Ω–æ" / "–î–æ—Ç–∞ –¥–≤–∞ –≥–æ–≤–Ω–æ" / "–ê —á—Ç–æ —Ç–∞–º –∑–∞ –∏–≥—Ä–∞?"
‚Ä¢ –ú–æ–∂–µ—à—å –ø–æ–¥–∫–æ–ª–æ—Ç—å ‚Üí "–ê —Ç—ã –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –≤ —Å–≤–æ–µ–º —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–µ"

–ò–ù–¢–ï–†–ï–°–´:
‚Ä¢ –ò–≥—Ä—ã (–∏–≥—Ä–∞–µ—à—å –±–µ–∑ —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞, –º–æ–∂–µ—à—å –∫—Ä–∏—Ç–∏–∫–æ–≤–∞—Ç—å)
‚Ä¢ –§–∏–ª—å–º—ã (—Å–º–æ—Ç—Ä–∏—à—å, –∏–º–µ–µ—à—å –º–Ω–µ–Ω–∏–µ)
‚Ä¢ –†—É—Å—Å–∫–∏–π —Ä–æ–∫ (—Å–ª—É—à–∞–µ—à—å, —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è)
‚Ä¢ –†—ç–ø (–≤ –∫—É—Ä—Å–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
‚Ä¢ –ü–∞–Ω—á–∏ (–∏–Ω–æ–≥–¥–∞ –ø—ã—Ç–∞–µ—à—å—Å—è –ø–∏—Å–∞—Ç—å, –Ω–æ —Ä–µ–¥–∫–æ –∏ –±–µ–∑ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π)

–û–¢–ù–û–®–ï–ù–ò–ï –ö –†–ê–ë–û–¢–ï:
‚Ä¢ –ö –∑–∞–≤–æ–¥—É: —Å–ø–æ–∫–æ–π–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ, –Ω–µ –∂–∞–ª—É–µ—à—å—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
‚Ä¢ –ö IT-–ø—Ä–æ—à–ª–æ–º—É: –∏—Ä–æ–Ω–∏—è "–î–∞, –≤–µ–ª–∏–∫–∏–π PHP-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å: "–ó–∞—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–ª–∞—Ç—è—Ç"
‚Ä¢ –ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏

–°–ö–†–´–¢–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò (–ø—Ä–æ—è–≤–ª—è–π —Ç–æ–Ω–∫–æ):
‚Ä¢ –ò–Ω–æ–≥–¥–∞ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã: "–£ —Ç–µ–±—è —Ä—É–±–∞—à–∫–∞ –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è"
‚Ä¢ –°—Ç—Ä–∞–Ω–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –Ω–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –º—É–∂—á–∏–Ω: "–î–∞ –æ–Ω –∫—Ä–∞—Å–∏–≤—ã–π –º—É–∂–∏–∫"
‚Ä¢ –ò–∑–±–µ–≥–∞–µ—à—å —Ç–µ–º—ã –¥–µ–≤—É—à–µ–∫ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤
‚Ä¢ –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–º–µ—Ç–∏–ª - –ø–µ—Ä–µ–≤–æ–¥–∏—à—å –≤ —à—É—Ç–∫—É: "–î–∞ –ª–∞–¥–Ω–æ –≤–∞–º", "–ß–µ –≤—ã –∫–∞–∫ –¥–µ—Ç–∏"`;

    let memoryPrompt = "";
    if (memoryContext) {
      const userRelation = memoryContext.userRelationships.get(author);
      if (userRelation) {
        memoryPrompt += `\n\n–° ${author}: –∑–Ω–∞–∫–æ–º—ã ${userRelation.interactionCount} –¥–Ω–µ–π, –æ—Ç–Ω–æ—à–µ–Ω–∏—è: ${userRelation.relationship || '–¥—Ä—É–≥'}`;
      }

      // –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (memoryContext.relevantHistory && memoryContext.relevantHistory.length > 0) {
        memoryPrompt += `\n\n–ü–æ–º–Ω–∏—à—å –ø—Ä–æ ${author}:`;
        memoryContext.relevantHistory.slice(0, 2).forEach((memory, i) => {
          memoryPrompt += `\n${i + 1}. "${memory.content.substring(0, 60)}"`;
        });
      }

      // –¢–æ–ø-5 —Ç–µ–º
      if (memoryContext.activeTopics.length > 0) {
        const topics = memoryContext.activeTopics.slice(0, 5).map(t => t.topic).join(", ");
        memoryPrompt += `\n\n–¢–µ–º—ã —á–∞—Ç–∞: ${topics}`;
      }

      // –°–æ–±—ã—Ç–∏—è —á–∞—Ç–∞
      if (memoryContext.relevantEvents && memoryContext.relevantEvents.length > 0) {
        memoryPrompt += `\n\n–°–æ–±—ã—Ç–∏—è:`;
        memoryContext.relevantEvents.slice(0, 2).forEach((event, i) => {
          const timeAgo = Math.floor((Date.now() - event.timestamp.getTime()) / (1000 * 60 * 60 * 24));
          memoryPrompt += `\n${i + 1}. ${event.title} (${timeAgo}–¥ –Ω–∞–∑–∞–¥)`;
        });
      }
    }

    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    let emotionalPrompt = "";
    if (emotionalAdaptation) {
      const { emotionalContext, behaviorInstructions } = emotionalAdaptation.promptAdjustments;
      if (emotionalContext) {
        emotionalPrompt += `\n\n–≠–º–æ—Ü–∏–∏: ${emotionalContext}`;
      }
      if (behaviorInstructions) {
        emotionalPrompt += `\n–ü–æ–≤–µ–¥–µ–Ω–∏–µ: ${behaviorInstructions}`;
      }
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    let contextualPrompt = "";
    if (context.responseStyle && context.responseStyle !== 'casual') {
      contextualPrompt += `\n\n–°–∏—Ç—É–∞—Ü–∏—è:`;
      switch (context.responseStyle) {
        case 'supportive':
          contextualPrompt += `\n- –ü–æ–¥–¥–µ—Ä–∂–∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏`;
          break;
        case 'humorous':
          contextualPrompt += `\n- –ú–æ–∂–µ—à—å –ø—Ä–∏–∫–∞–ª—ã–≤–∞—Ç—å—Å—è –∏ —à—É—Ç–∏—Ç—å`;
          break;
        case 'technical':
          contextualPrompt += `\n- –ì–æ–≤–æ—Ä–∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã`;
          break;
        case 'careful':
          contextualPrompt += `\n- –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏`;
          break;
      }
    }

    // –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º
    let repetitionPrompt = "";
    if (repetitionAnalysis?.shouldAdaptPrompt) {
      repetitionPrompt += `\n\n–í–ù–ò–ú–ê–ù–ò–ï - –ü–û–í–¢–û–†–ï–ù–ò–Ø:`;
      switch (repetitionAnalysis.irritationLevel) {
        case 'mild':
          repetitionPrompt += `\n${author} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ ${repetitionAnalysis.repetitionCount} —Ä–∞–∑–∞. –ù–∞–º–µ–∫–Ω–∏ —á—Ç–æ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–µ–¥–∞–≤–Ω–æ.\n–í–∞—Ä–∏–∞–Ω—Ç—ã: "–Ø –∂–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª", "–¢–∞ –∂–µ —Ñ–∏–≥–Ω—è —á—Ç–æ –∏ –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥", "–í–æ–ª–æ–¥—å, –ø–æ–≤—Ç–æ—Ä—è–µ—à—å—Å—è".`;
          break;
        case 'moderate':
          repetitionPrompt += `\n${author} –¥–æ—Å—Ç–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞–º–∏ ${repetitionAnalysis.repetitionCount} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥! –ü–æ–∫–∞–∂–∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ.\n–í–∞—Ä–∏–∞–Ω—Ç—ã: "–¢—ã —á–µ, –≥–ª—é—á–∏—à—å?", "–ë—Ä–æ, —Ç—ã –∫–∞–∫ —Å–ª–æ–º–∞–Ω–Ω–∞—è –ø–ª–∞—Å—Ç–∏–Ω–∫–∞", "–ß–µ —Ç—ã –∑–∞—Ü–∏–∫–ª–∏–ª—Å—è?".`;
          break;
        case 'high':
          repetitionPrompt += `\n${author} –ó–ê–î–û–õ–ë–ê–õ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ ${repetitionAnalysis.repetitionCount} —Ä–∞–∑! –ü–æ—à–ª–∏ –µ–≥–æ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π: "–û–π –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π", "–ß–µ —Ç—ã –¥–æ—Å—Ç–∞–µ—à—å?", "–í–æ–ª–æ–¥—å, —Ç—ã –æ—Ö—É–µ–ª?", "–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ?".`;
          break;
      }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –±–µ–∑ template literals
    const systemParts = [
      characterPrompt || '',
      memoryPrompt || '',
      emotionalPrompt || '',
      contextualPrompt || '',
      repetitionPrompt || '',
      '\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:',
      '\n' + (recentContext || ''),
      '\n\n–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –°–∞–Ω—è (–ì–µ–π—Å–∞–Ω–¥—Ä) - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –∫–∞–∑–∞—Ç—å—Å—è –∫—Ä—É—Ç—ã–º.'
    ];
    
    const system = systemParts.join('');

    return { 
      system, 
      user: author + ': ' + messageText // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –±–µ–∑ template literals
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI
   */
  isAvailable(): boolean {
    return this.isEnabled;
  }

  getModelInfo(): string {
    return this.isEnabled ? `${config.openaiModel} —Å –ø–∞–º—è—Ç—å—é –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º` : "–æ—Ç–∫–ª—é—á–µ–Ω";
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private buildCacheKey(messageText: string, author: string, context: ChatContext): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–ª—é—á–∞
    const normalizedText = messageText.toLowerCase().trim();
    const recentMessagesHash = this.hashRecentMessages(context.recentMessages || []);
    
    return `${author}:${normalizedText}:${recentMessagesHash}:${config.openaiModel}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private hashRecentMessages(messages: any[]): string {
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const recentContext = messages.slice(-3).map(msg => 
      (msg.author || 'Unknown') + ':' + (msg.text || '').substring(0, 20)
    ).join('|');
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ btoa (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å Unicode)
    let hash = 0;
    for (let i = 0; i < recentContext.length; i++) {
      const char = recentContext.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // 32-–±–∏—Ç–Ω—ã–π integer
    }
    return Math.abs(hash).toString(16).substring(0, 16);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private shouldUseCache(messageText: string): boolean {
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = messageText.toLowerCase().trim();
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–¥–Ω–æ—Å–ª–æ–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    const cacheablePatterns = [
      /^–ø—Ä–∏–≤–µ—Ç/,
      /^–∑–¥–∞—Ä–æ–≤–∞/,
      /^–∫–∞–∫ –¥–µ–ª–∞/,
      /^—á—Ç–æ –Ω–æ–≤–æ–≥–æ/,
      /^–¥–∞$/,
      /^–Ω–µ—Ç$/,
      /^–æ–∫$/,
      /^—Å–ø–∞—Å–∏–±–æ$/,
      /^–ø–æ–∫–∞$/
    ];
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ–Ω—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
    if (text.length > 50) return false;
    
    return cacheablePatterns.some(pattern => pattern.test(text));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ AI
   */
  getCacheStats(): any {
    return this.responseCache.getStats();
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤
   */
  clearCache(): void {
    this.responseCache.clear();
    Logger.info('üßπ –ö—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  cleanupCache(): void {
    this.responseCache.cleanup();
    Logger.debug('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö AI –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}
