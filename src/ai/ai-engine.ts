import OpenAI from "openai";
import { config } from "../core/config.js";
import { Logger } from "../utils/logger.js";
import { BotPersonality, ChatContext } from "../core/types.js";
import { cacheManager, SmartCache } from "../core/cache-manager.js";
// –≠–¢–ê–ü 8: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
import { EmotionalAdapter, EmotionalAdaptation } from "./emotional-adapter.js";

export class AIEngine {
  private openai: OpenAI | null = null;
  private personality: BotPersonality;
  private isEnabled: boolean;
  // –≠–¢–ê–ü 8: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
  private emotionalAdapter: EmotionalAdapter;
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ—Ç–≤–µ—Ç–æ–≤
  private responseCache: SmartCache<string>;

  constructor(personality: BotPersonality, chatId?: string) {
    this.personality = personality;
    this.isEnabled = config.aiMode !== "patterns_only" && !!config.openaiApiKey;
    
    // –≠–¢–ê–ü 8: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
    this.emotionalAdapter = new EmotionalAdapter();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤
    this.responseCache = cacheManager.getCache<string>('ai');

    if (this.isEnabled) {
      this.openai = new OpenAI({
        apiKey: config.openaiApiKey,
      });
      Logger.ai(`–î–≤–∏–∂–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: ${config.openaiModel}) —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º`);
    } else {
      Logger.info("üîß AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã");
    }
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
   */
  private calculateMaxTokens(): number {
    const baseLength = this.personality.responseStyle.averageLength;
    
    if (config.openaiModel === 'gpt-5-nano') {
      return Math.max(400, Math.min(1500, Math.round(baseLength * 8)));
    } else if (config.openaiModel === 'gpt-5-chat-latest') {
      return Math.max(600, Math.min(2000, Math.round(baseLength * 6)));
    } else {
      return Math.max(200, Math.min(800, Math.round(baseLength * 4)));
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async generateResponse(
    messageText: string,
    author: string,
    context: ChatContext
  ): Promise<string | null> {
    if (!this.isEnabled) {
      Logger.debug("AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
      return null;
    }

    const startTime = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const cacheKey = this.buildCacheKey(messageText, author, context);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π)
    if (this.shouldUseCache(messageText)) {
      const cachedResponse = this.responseCache.get(cacheKey);
      if (cachedResponse) {
        const duration = Date.now() - startTime;
        Logger.performance('AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫—ç—à)', duration);
        Logger.ai(`–û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞`, `"${cachedResponse.substring(0, 50)}..."`);
        return cachedResponse;
      }
    }

    try {
      // –≠–¢–ê–ü 8: –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é
      let emotionalAdaptation: EmotionalAdaptation | null = null;
      if (context.memoryContext) {
        try {
          emotionalAdaptation = this.emotionalAdapter.adaptToEmotionalState(
            author,
            messageText,
            context.memoryContext
          );
        } catch (error) {
          Logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:', error);
        }
      }
      
      const prompt = this.buildPrompt(messageText, author, context, emotionalAdaptation);
      const maxTokens = this.calculateMaxTokens();
      
      Logger.ai(`–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: ${config.openaiModel}`, `maxTokens: ${maxTokens}`);
      
      const requestParams = this.buildRequestParams(prompt, maxTokens);
      const response = await this.openai!.chat.completions.create(requestParams);
      
      const aiResponse = response.choices[0]?.message?.content?.trim();
      
      if (aiResponse) {
        const cleanResponse = this.cleanResponse(aiResponse);
        
        if (cleanResponse) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
          if (this.shouldUseCache(messageText)) {
            this.responseCache.set(cacheKey, cleanResponse, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç TTL
          }
          
          const duration = Date.now() - startTime;
          Logger.performance('AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è', duration);
          Logger.ai(`–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`, `"${cleanResponse.substring(0, 50)}..."`);
          return cleanResponse;
        }
      }
      
      return null;
    } catch (error) {
      const duration = Date.now() - startTime;
      Logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:", error);
      Logger.performance('AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–æ—à–∏–±–∫–∞)', duration);
      return null;
    }
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
   */
  private buildRequestParams(prompt: { system: string; user: string }, maxTokens: number): any {
    const requestParams: any = {
      model: config.openaiModel,
      messages: [
        { role: 'system', content: prompt.system },
        { role: 'user', content: prompt.user }
      ],
      max_completion_tokens: maxTokens
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if (config.openaiModel === 'gpt-5-nano') {
      requestParams.reasoning_effort = 'low';
      requestParams.verbosity = 'low';
    } else if (config.openaiModel === 'gpt-5-chat-latest') {
      requestParams.temperature = 0.7;
      requestParams.top_p = 0.95;
      requestParams.store = true;
    } else {
      // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
      requestParams.temperature = 0.8;
    }

    return requestParams;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π
   */
  private cleanResponse(aiResponse: string): string {
    let cleanResponse = aiResponse;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∏ –≤ –Ω–∞—á–∞–ª–µ
    const namePatterns = [
      /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*–ö—É–ª–æ–≤–∏—á\s*:\s*/i,
      /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*:\s*/i,
      /^–ì–µ—è—Å–∞–Ω–¥—Ä\s*:\s*/i,
      /^–°–∞–Ω—è\s*:\s*/i,
      /^–®—É—Ä–∏–∫\s*:\s*/i,
      /^–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\s*:\s*/i,
      /^–ê–ª–µ–∫—Å\s*:\s*/i,
    ];

    for (const pattern of namePatterns) {
      cleanResponse = cleanResponse.replace(pattern, "");
    }

    return cleanResponse.trim();
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
   */
  private buildPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    emotionalAdaptation?: EmotionalAdaptation | null
  ): { system: string; user: string; } {
    const isNano = config.openaiModel === 'gpt-5-nano';
    
    if (isNano) {
      return this.buildNanoPrompt(messageText, author, context, emotionalAdaptation);
    } else {
      return this.buildCompactPrompt(messageText, author, context, emotionalAdaptation);
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-5 nano - –±—ã—Å—Ç—Ä–æ –∏ —ç–∫–æ–Ω–æ–º–Ω–æ
   */
  private buildNanoPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    emotionalAdaptation?: EmotionalAdaptation | null
  ): { system: string; user: string; } {
    const memoryContext = context.memoryContext;
    const recentContext = context.recentMessages
      .slice(-2)
      .map((msg) => `${msg.author}: ${(msg.text || '').replace(/[`$\\]/g, '_')}`)
      .join("\n");

    let memoryPrompt = "";
    if (memoryContext) {
      const userRelation = memoryContext.userRelationships.get(author);
      if (userRelation && userRelation.interactionCount > 1) {
        memoryPrompt += `\n${author}: –∑–Ω–∞–∫–æ–º—ã ${userRelation.interactionCount} –¥–Ω–µ–π`;
      }

      // –¢–æ–ª—å–∫–æ 1 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      if (memoryContext.relevantHistory && memoryContext.relevantHistory.length > 0) {
        const bestMemory = memoryContext.relevantHistory[0];
        memoryPrompt += `\n–í—Å–ø–æ–º–∏–Ω–∞—é: "${bestMemory.content.substring(0, 50)}"`;
      }

      // –¢–æ–ø-2 —Ç–µ–º—ã
      if (memoryContext.activeTopics.length > 0) {
        const topics = memoryContext.activeTopics.slice(0, 2).map(t => t.topic).join(", ");
        memoryPrompt += `\n–¢–µ–º—ã: ${topics}`;
      }

      // 1 —Å–æ–±—ã—Ç–∏–µ
      if (memoryContext.relevantEvents && memoryContext.relevantEvents.length > 0) {
        const event = memoryContext.relevantEvents[0];
        memoryPrompt += `\n–°–æ–±—ã—Ç–∏–µ: ${event.title}`;
      }
    }

    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    let emotionalPrompt = "";
    if (emotionalAdaptation) {
      const { emotionalContext, behaviorInstructions } = emotionalAdaptation.promptAdjustments;
      if (emotionalContext) {
        emotionalPrompt += `\n${emotionalContext}`;
      }
      if (behaviorInstructions) {
        emotionalPrompt += `\n${behaviorInstructions}`;
      }
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
    let contextualPrompt = "";
    if (context.responseStyle && context.responseStyle !== 'casual') {
      switch (context.responseStyle) {
        case 'supportive':
          contextualPrompt += `\n–ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º.`;
          break;
        case 'humorous': 
          contextualPrompt += `\n–ú–æ–∂–µ—à—å —à—É—Ç–∏—Ç—å.`;
          break;
        case 'technical':
          contextualPrompt += `\n–û—Ç–≤–µ—á–∞–π —Ç–µ—Ö–Ω–∏—á–Ω–æ.`;
          break;
        case 'careful':
          contextualPrompt += `\n–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º.`;
          break;
      }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –±–µ–∑ template literals
    const systemParts = [
      '–¢—ã –°–∞–Ω—è –∏–∑ —á–∞—Ç–∞.',
      memoryPrompt || '',
      emotionalPrompt || '',
      contextualPrompt || '',
      '\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:',
      '\n' + (recentContext || ''),
      '\n\n–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∫–∞–∫ –¥—Ä—É–≥.'
    ];
    
    const system = systemParts.join('');

    return { 
      system, 
      user: author + ': ' + messageText // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –±–µ–∑ template literals
    };
  }

  /**
   * –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
   */
  private buildCompactPrompt(
    messageText: string,
    author: string,
    context: ChatContext,
    emotionalAdaptation?: EmotionalAdaptation | null
  ): { system: string; user: string; } {
    const memoryContext = context.memoryContext;
    const recentContext = context.recentMessages
      .slice(-3)
      .map((msg) => `${msg.author}: ${(msg.text || '').replace(/[`$\\]/g, '_')}`)
      .join("\n");

    let characterPrompt = `–¢—ã –°–∞–Ω—è (–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á) - —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.

–¢–≤–æ–π —Å—Ç–∏–ª—å:
- –ì–æ–≤–æ—Ä–∏—à—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –∫–∞–∑–∞—Ç—å—Å—è –∫—Ä—É—Ç—ã–º
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥ –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ
- –û—Ç–≤–µ—á–∞–µ—à—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É
- –ü–æ–º–Ω–∏—à—å –ª—é–¥–µ–π –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã`;

    let memoryPrompt = "";
    if (memoryContext) {
      const userRelation = memoryContext.userRelationships.get(author);
      if (userRelation) {
        memoryPrompt += `\n\n–° ${author}: –∑–Ω–∞–∫–æ–º—ã ${userRelation.interactionCount} –¥–Ω–µ–π, –æ—Ç–Ω–æ—à–µ–Ω–∏—è: ${userRelation.relationship || '–¥—Ä—É–≥'}`;
      }

      // –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (memoryContext.relevantHistory && memoryContext.relevantHistory.length > 0) {
        memoryPrompt += `\n\n–ü–æ–º–Ω–∏—à—å –ø—Ä–æ ${author}:`;
        memoryContext.relevantHistory.slice(0, 2).forEach((memory, i) => {
          memoryPrompt += `\n${i + 1}. "${memory.content.substring(0, 60)}"`;
        });
      }

      // –¢–æ–ø-5 —Ç–µ–º
      if (memoryContext.activeTopics.length > 0) {
        const topics = memoryContext.activeTopics.slice(0, 5).map(t => t.topic).join(", ");
        memoryPrompt += `\n\n–¢–µ–º—ã —á–∞—Ç–∞: ${topics}`;
      }

      // –°–æ–±—ã—Ç–∏—è —á–∞—Ç–∞
      if (memoryContext.relevantEvents && memoryContext.relevantEvents.length > 0) {
        memoryPrompt += `\n\n–°–æ–±—ã—Ç–∏—è:`;
        memoryContext.relevantEvents.slice(0, 2).forEach((event, i) => {
          const timeAgo = Math.floor((Date.now() - event.timestamp.getTime()) / (1000 * 60 * 60 * 24));
          memoryPrompt += `\n${i + 1}. ${event.title} (${timeAgo}–¥ –Ω–∞–∑–∞–¥)`;
        });
      }
    }

    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    let emotionalPrompt = "";
    if (emotionalAdaptation) {
      const { emotionalContext, behaviorInstructions } = emotionalAdaptation.promptAdjustments;
      if (emotionalContext) {
        emotionalPrompt += `\n\n–≠–º–æ—Ü–∏–∏: ${emotionalContext}`;
      }
      if (behaviorInstructions) {
        emotionalPrompt += `\n–ü–æ–≤–µ–¥–µ–Ω–∏–µ: ${behaviorInstructions}`;
      }
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    let contextualPrompt = "";
    if (context.responseStyle && context.responseStyle !== 'casual') {
      contextualPrompt += `\n\n–°–∏—Ç—É–∞—Ü–∏—è:`;
      switch (context.responseStyle) {
        case 'supportive':
          contextualPrompt += `\n- –ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º`;
          break;
        case 'humorous':
          contextualPrompt += `\n- –ú–æ–∂–µ—à—å —à—É—Ç–∏—Ç—å –∏ –≤–µ—Å–µ–ª–∏—Ç—å—Å—è`;
          break;
        case 'technical':
          contextualPrompt += `\n- –ì–æ–≤–æ—Ä–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Ç–µ—Ö–Ω–∏—á–Ω–æ`;
          break;
        case 'careful':
          contextualPrompt += `\n- –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –∏ —Ç–∞–∫—Ç–∏—á–Ω—ã–º`;
          break;
      }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –±–µ–∑ template literals
    const systemParts = [
      characterPrompt || '',
      memoryPrompt || '',
      emotionalPrompt || '',
      contextualPrompt || '',
      '\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:',
      '\n' + (recentContext || ''),
      '\n\n–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ –°–∞–Ω—è –∏–∑ —á–∞—Ç–∞.'
    ];
    
    const system = systemParts.join('');

    return { 
      system, 
      user: author + ': ' + messageText // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –±–µ–∑ template literals
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI
   */
  isAvailable(): boolean {
    return this.isEnabled;
  }

  getModelInfo(): string {
    return this.isEnabled ? `${config.openaiModel} —Å –ø–∞–º—è—Ç—å—é –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º` : "–æ—Ç–∫–ª—é—á–µ–Ω";
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private buildCacheKey(messageText: string, author: string, context: ChatContext): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–ª—é—á–∞
    const normalizedText = messageText.toLowerCase().trim();
    const recentMessagesHash = this.hashRecentMessages(context.recentMessages || []);
    
    return `${author}:${normalizedText}:${recentMessagesHash}:${config.openaiModel}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private hashRecentMessages(messages: any[]): string {
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const recentContext = messages.slice(-3).map(msg => 
      (msg.author || 'Unknown') + ':' + (msg.text || '').substring(0, 20)
    ).join('|');
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ btoa (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å Unicode)
    let hash = 0;
    for (let i = 0; i < recentContext.length; i++) {
      const char = recentContext.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // 32-–±–∏—Ç–Ω—ã–π integer
    }
    return Math.abs(hash).toString(16).substring(0, 16);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private shouldUseCache(messageText: string): boolean {
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = messageText.toLowerCase().trim();
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–¥–Ω–æ—Å–ª–æ–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    const cacheablePatterns = [
      /^–ø—Ä–∏–≤–µ—Ç/,
      /^–∑–¥–∞—Ä–æ–≤–∞/,
      /^–∫–∞–∫ –¥–µ–ª–∞/,
      /^—á—Ç–æ –Ω–æ–≤–æ–≥–æ/,
      /^–¥–∞$/,
      /^–Ω–µ—Ç$/,
      /^–æ–∫$/,
      /^—Å–ø–∞—Å–∏–±–æ$/,
      /^–ø–æ–∫–∞$/
    ];
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ–Ω—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
    if (text.length > 50) return false;
    
    return cacheablePatterns.some(pattern => pattern.test(text));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ AI
   */
  getCacheStats(): any {
    return this.responseCache.getStats();
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤
   */
  clearCache(): void {
    this.responseCache.clear();
    Logger.info('üßπ –ö—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  cleanupCache(): void {
    this.responseCache.cleanup();
    Logger.debug('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö AI –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}
