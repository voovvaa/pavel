import OpenAI from "openai";
import { config } from "../core/config.js";
import { Logger } from "../utils/logger.js";
import { BotPersonality, UserProfile, ImageAnalysisResult } from "../core/types.js";

export interface ImageContext {
  chatContext: string[];
  userName: string;
  userProfile?: UserProfile;
  personality: BotPersonality;
  messageText?: string; // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (caption) –µ—Å–ª–∏ –µ—Å—Ç—å
}

export class ImageAnalyzer {
  private openai: OpenAI | null = null;
  private personality: BotPersonality;
  private isEnabled: boolean;
  private lastAnalysisTime: Map<string, number> = new Map(); // –î–ª—è rate limiting
  private rateLimitDisabled: boolean = false; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  constructor(personality: BotPersonality, disableRateLimit: boolean = false) {
    this.personality = personality;
    this.isEnabled = config.aiMode !== "patterns_only" && !!config.openaiApiKey;
    this.rateLimitDisabled = disableRateLimit;
    
    // –û—Ç–∫–ª—é—á–∞–µ–º rate limiting –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (disableRateLimit) {
      this.lastAnalysisTime.clear();
    }

    if (this.isEnabled) {
      this.openai = new OpenAI({
        apiKey: config.openaiApiKey,
      });
      Logger.info(`üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: ${this.getVisionModel()})`);
    } else {
      Logger.info("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ—Ç API –∫–ª—é—á–∞");
    }
  }

  /**
   * –í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private getVisionModel(): string {
    // GPT-5 –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if (config.openaiModel.startsWith('gpt-5')) {
      return 'gpt-4o'; // Fallback –Ω–∞ –ª—É—á—à—É—é vision –º–æ–¥–µ–ª—å
    }
    
    // –õ—É—á—à–∏–µ vision –º–æ–¥–µ–ª–∏ –Ω–∞ 2025
    return 'gpt-4o'; // –°–∞–º–∞—è –º–æ—â–Ω–∞—è vision –º–æ–¥–µ–ª—å
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤
   */
  async analyzeImage(
    imageBuffer: Buffer, 
    imageContext: ImageContext
  ): Promise<ImageAnalysisResult | null> {
    if (!this.isEnabled || !this.openai) {
      Logger.debug("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω");
      return null;
    }

    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 1: Rate limiting –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
    if (!this.rateLimitDisabled) {
      const rateLimitResult = this.checkRateLimit(imageContext.userName);
      if (!rateLimitResult.allowed) {
        Logger.debug(`‚è∞ Rate limit –¥–ª—è ${imageContext.userName}: –æ—Å—Ç–∞–ª–æ—Å—å ${rateLimitResult.timeLeft}—Å`);
        return null;
      }
    }

    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
    if (imageBuffer.length < 10000) { // –ú–µ–Ω–µ–µ 10KB - –≤–µ—Ä–æ—è—Ç–Ω–æ, –º–µ–ª–∫–∏–π —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –ø—Ä–µ–≤—å—é
      Logger.debug(`üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (${imageBuffer.length} –±–∞–π—Ç) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑`);
      return null;
    }

    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 3: –õ–∏–º–∏—Ç –Ω–∞ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (—ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã)
    if (imageBuffer.length > 5000000) { // –ë–æ–ª–µ–µ 5MB
      Logger.debug(`üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (${imageBuffer.length} –±–∞–π—Ç) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑`);
      return null;
    }

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Buffer –≤ base64
      const base64Image = imageBuffer.toString('base64');
      const dataUrl = `data:image/jpeg;base64,${base64Image}`;

      const analysisPrompt = this.buildAnalysisPrompt(imageContext);
      
      const response = await this.openai.chat.completions.create({
        model: this.getVisionModel(),
        messages: [
          {
            role: 'system',
            content: analysisPrompt.system
          },
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: analysisPrompt.user
              },
              {
                type: 'image_url',
                image_url: {
                  url: dataUrl,
                  detail: 'high' // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
                }
              }
            ]
          }
        ],
        max_tokens: 500,
        temperature: 0.3 // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      });

      const analysis = response.choices[0]?.message?.content;
      
      if (analysis) {
        const result = this.parseAnalysisResult(analysis);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è rate limiting (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
        if (!this.rateLimitDisabled) {
          this.updateRateLimit(imageContext.userName);
        }
        
        Logger.info(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${result.type} - "${result.description}" (${imageBuffer.length} –±–∞–π—Ç)`);
        return result;
      }
      
      return null;
      
    } catch (error: any) {
      Logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      if (error?.response?.status) {
        Logger.error(`HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
      }
      return null;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –ì–µ–π—Å–∞–Ω–¥—Ä–∞
   */
  async generateImageResponse(
    analysis: ImageAnalysisResult,
    imageContext: ImageContext
  ): Promise<string | null> {
    if (!this.isEnabled || !this.openai || !analysis) {
      return null;
    }

    try {
      const responsePrompt = this.buildResponsePrompt(analysis, imageContext);
      
      const response = await this.openai.chat.completions.create({
        model: config.openaiModel || 'gpt-4o', // Fallback –Ω–∞ gpt-4o –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        messages: [
          {
            role: 'system',
            content: responsePrompt.system
          },
          {
            role: 'user',
            content: responsePrompt.user
          }
        ],
        max_tokens: 200,
        temperature: 0.8 // –ë–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
      });

      const reply = response.choices[0]?.message?.content?.trim();
      
      if (reply) {
        // –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏–º–µ–Ω–∏
        let cleanReply = reply;
        const namePatterns = [
          /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*–ö—É–ª–æ–≤–∏—á\s*:\s*/i,
          /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*:\s*/i,
          /^–°–∞–Ω—è\s*:\s*/i,
        ];

        for (const pattern of namePatterns) {
          cleanReply = cleanReply.replace(pattern, "");
        }

        return cleanReply.trim();
      }
      
      return null;
      
    } catch (error) {
      Logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private buildAnalysisPrompt(context: ImageContext): { system: string; user: string } {
    const recentMessages = context.chatContext.slice(-3).join('\n');
    
    let userInfo = "";
    if (context.userProfile) {
      const profile = context.userProfile;
      userInfo = `\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ ${context.userName}:
- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: ${profile.communicationStyle.formalityLevel < 0.4 ? '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π' : '—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π'}
- –Æ–º–æ—Ä: ${profile.socialBehavior.humor > 0.4 ? '–ª—é–±–∏—Ç —à—É—Ç–∫–∏' : '—Å–µ—Ä—å–µ–∑–Ω—ã–π'}
- –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${profile.interests.topTopics.slice(0, 3).map(t => t.topic).join(', ')}`;
    }

    const system = `–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram —á–∞—Ç–µ –∫–∞–∫ –°–∞–Ω—è (–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á).
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–Ω—è—Ç—å —á—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–ê–ù–ê–õ–ò–ó–ò–†–£–ô:
1. –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ (–∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ)
2. –¢–∏–ø: photo/meme/screenshot/document/other
3. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: funny/serious/sad/angry/neutral
4. –ï—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
5. –≠—Ç–æ —é–º–æ—Ä/–º–µ–º?
6. –¢—ç–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (3-5 —Å–ª–æ–≤)

–ö–û–ù–¢–ï–ö–°–¢ –ß–ê–¢–ê:
${recentMessages}${userInfo}
${context.messageText ? `\n–¢–ï–ö–°–¢ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú: "${context.messageText}"` : ''}

–û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "content": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
  "type": "—Ç–∏–ø",
  "mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
  "containsText": true/false,
  "textContent": "—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å",
  "isHumorous": true/false,
  "tags": ["—Ç—ç–≥1", "—Ç—ç–≥2", "—Ç—ç–≥3"]
}`;

    let userPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç ${context.userName}`;
    if (context.messageText) {
      userPrompt += ` —Å –ø–æ–¥–ø–∏—Å—å—é: "${context.messageText}"`;
    }
    userPrompt += ':';
    
    const user = userPrompt;

    return { system, user };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  private buildResponsePrompt(
    analysis: ImageAnalysisResult,
    context: ImageContext
  ): { system: string; user: string } {
    const recentMessages = context.chatContext.slice(-3).join('\n');
    
    let styleAdaptation = "";
    if (context.userProfile) {
      const profile = context.userProfile;
      if (profile.communicationStyle.formalityLevel < 0.3) {
        styleAdaptation += "\n–û—Ç–≤–µ—á–∞–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–∂–µ—Å–∫–∏.";
      }
      if (profile.socialBehavior.humor > 0.4 && analysis.isHumorous) {
        styleAdaptation += "\n–ú–æ–∂–Ω–æ –ø–æ—à—É—Ç–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç - –æ–Ω –æ—Ü–µ–Ω–∏—Ç —é–º–æ—Ä.";
      }
    }

    let systemPrompt = `–¢—ã –°–∞–Ω—è (–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á) –∏–∑ —á–∞—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${context.userName} –ø—Ä–∏—Å–ª–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`;
    if (context.messageText) {
      systemPrompt += ` —Å –ø–æ–¥–ø–∏—Å—å—é: "${context.messageText}"`;
    }
    systemPrompt += `.\n\n–ß–¢–û –ù–ê –ö–ê–†–¢–ò–ù–ö–ï:\n${analysis.description}\n\n–î–ï–¢–ê–õ–ò:\n- –¢–∏–ø: ${analysis.type}\n- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${analysis.mood || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}\n- –Æ–º–æ—Ä: ${analysis.isHumorous ? '–¥–∞' : '–Ω–µ—Ç'}\n- –¢–µ–≥–∏: ${analysis.tags.join(', ')}`;
    
    if (analysis.textContent) {
      systemPrompt += `\n- –¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: "${analysis.textContent}"`;
    }
    
    systemPrompt += `\n\n–ö–û–ù–¢–ï–ö–°–¢ –ß–ê–¢–ê:\n${recentMessages}${styleAdaptation}\n\n–ó–ê–î–ê–ß–ê: –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –∂–∏–≤–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞. \n- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –Ω–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º\n- –ú–æ–∂–µ—à—å –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—à—É—Ç–∏—Ç—å, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n- –£—á–∏—Ç—ã–≤–∞–π —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n- –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)`;
    
    const system = systemPrompt;

    const user = `–û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –Ω–∞ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç ${context.userName}.`;

    return { system, user };
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞ AI
   */
  private parseAnalysisResult(analysis: string): ImageAnalysisResult {
    try {
      let jsonString = analysis;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–æ–≤ ```json ... ```
      const jsonMatch = analysis.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        jsonString = jsonMatch[1].trim();
      }
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
      const parsed = JSON.parse(jsonString);
      
      return {
        description: parsed.description || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
        content: parsed.content || parsed.description || '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        type: parsed.type || 'other',
        mood: parsed.mood,
        containsText: parsed.containsText || false,
        textContent: parsed.textContent,
        isHumorous: parsed.isHumorous || false,
        tags: parsed.tags || []
      };
    } catch (error) {
      Logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ");
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
      return {
        description: analysis.substring(0, 100) + '...',
        content: analysis,
        type: 'other',
        tags: [],
        isHumorous: analysis.toLowerCase().includes('—é–º–æ—Ä') || analysis.toLowerCase().includes('—Å–º–µ—à–Ω–æ')
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
   */
  isAvailable(): boolean {
    return this.isEnabled;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private checkRateLimit(userName: string): { allowed: boolean; timeLeft: number } {
    const MIN_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastTime = this.lastAnalysisTime.get(userName) || 0;
    const now = Date.now();
    const timePassed = now - lastTime;
    
    if (timePassed < MIN_INTERVAL) {
      const timeLeft = Math.ceil((MIN_INTERVAL - timePassed) / 1000);
      return { allowed: false, timeLeft };
    }
    
    return { allowed: true, timeLeft: 0 };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private updateRateLimit(userName: string): void {
    this.lastAnalysisTime.set(userName, Date.now());
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
    const oneHourAgo = Date.now() - 3600000;
    for (const [user, time] of this.lastAnalysisTime.entries()) {
      if (time < oneHourAgo) {
        this.lastAnalysisTime.delete(user);
      }
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
   */
  getModelInfo(): string {
    return this.isEnabled ? `${this.getVisionModel()} (Vision + Cost Optimization)` : "–æ—Ç–∫–ª—é—á–µ–Ω";
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getUsageStats(): { activeUsers: number; rateLimitedUsers: string[] } {
    const now = Date.now();
    const rateLimitedUsers: string[] = [];
    
    for (const [user, lastTime] of this.lastAnalysisTime.entries()) {
      if (now - lastTime < 30000) { // –ï—â–µ –≤ rate limit
        rateLimitedUsers.push(user);
      }
    }
    
    return {
      activeUsers: this.lastAnalysisTime.size,
      rateLimitedUsers
    };
  }
}