import { 
  BotPersonality, 
  TriggerPattern, 
  ChatContext,
  ImageAnalysisResult
} from '../core/types.js';
import { Logger } from '../utils/logger.js';
import { AIEngine } from './ai-engine.js';
import { MemoryManager } from '../memory/memory-manager.js';
import { config } from '../core/config.js';

export class ResponseEngine {
  private personality: BotPersonality;
  private context: ChatContext;
  private aiEngine: AIEngine;
  private memoryManager: MemoryManager | null = null;
  private chatId: string | null = null;

  constructor(personality: BotPersonality, chatId?: string) {
    this.personality = personality;
    this.chatId = chatId || null;
    this.aiEngine = new AIEngine(personality, this.chatId || undefined);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å chatId
    if (chatId) {
      this.initializeMemory(chatId);
    }
    
    this.context = {
      recentMessages: [],
      activeUsers: new Set(),
      messagesSinceLastResponse: 0
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  initializeMemory(chatId: string): void {
    if (this.memoryManager) {
      this.memoryManager.close();
    }
    
    this.chatId = chatId;
    this.memoryManager = new MemoryManager(chatId);
    Logger.info('üß† –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞');
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  shouldRespond(messageText: string, author: string): boolean {
    // –ù–ï –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ—Å–ª–∏ –Ω–∞—Å –Ω–∞–∑—ã–≤–∞—é—Ç "–±–æ—Ç–æ–º"
    if (author === '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á' || author === 'bot') return false;
    
    // –°–¢–†–û–ì–û –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–∞—Å –Ω–∞–∑—ã–≤–∞—é—Ç –±–æ—Ç–æ–º
    const lowerText = messageText.toLowerCase();
    if (lowerText.includes('–±–æ—Ç') || lowerText.includes('bot')) {
      Logger.debug('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º "–±–æ—Ç" - –ì–µ–π—Å–∞–Ω–¥—Ä –Ω–µ –±–æ—Ç!');
      return false;
    }

    this.context.messagesSinceLastResponse++;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ì–µ–π—Å–∞–Ω–¥—Ä—É –ö—É–ª–æ–≤–∏—á—É
    if (this.isDirectMention(messageText)) {
      Logger.debug('–ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ì–µ–π—Å–∞–Ω–¥—Ä—É –ö—É–ª–æ–≤–∏—á—É');
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    const now = new Date();
    const currentHour = now.getHours();
    const currentDay = now.getDay();
    
    if (!this.personality.schedule.activeHours.includes(currentHour) ||
        !this.personality.schedule.activeDays.includes(currentDay)) {
      Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
      return false;
    }

    // –í AI —Ä–µ–∂–∏–º–µ –±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    if (this.aiEngine.isAvailable()) {
      const randomChance = Math.random();
      const shouldRespondChance = this.personality.responseStyle.activityLevel * 0.4;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
      if (this.context.lastBotResponse) {
        const timeSinceLastResponse = Date.now() - this.context.lastBotResponse.getTime();
        const minDelay = (1 - this.personality.responseStyle.activityLevel) * 180000;
        
        if (timeSinceLastResponse < minDelay && this.context.messagesSinceLastResponse < 2) {
          Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä—É –ö—É–ª–æ–≤–∏—á—É –µ—â–µ —Ä–∞–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å');
          return false;
        }
      }
      
      Logger.debug(`–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á (AI —Å –ø–∞–º—è—Ç—å—é): —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ ${shouldRespondChance}, —Å–ª—É—á–∞–π–Ω–æ–µ: ${randomChance}`);
      return randomChance < shouldRespondChance;
    }

    // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const matchingPattern = this.findMatchingPattern(messageText);
    if (!matchingPattern) {
      Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω');
      return false;
    }

    if (this.context.lastBotResponse) {
      const timeSinceLastResponse = Date.now() - this.context.lastBotResponse.getTime();
      const minDelay = (1 - this.personality.responseStyle.activityLevel) * 300000;
      
      if (timeSinceLastResponse < minDelay && this.context.messagesSinceLastResponse < 3) {
        Logger.debug('–ì–µ–π—Å–∞–Ω–¥—Ä—É –ö—É–ª–æ–≤–∏—á—É –µ—â–µ —Ä–∞–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å');
        return false;
      }
    }

    const randomChance = Math.random();
    const shouldRespondChance = this.personality.responseStyle.activityLevel * 0.3;
    
    Logger.debug(`–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á (–ø–∞—Ç—Ç–µ—Ä–Ω—ã): —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ ${shouldRespondChance}, —Å–ª—É—á–∞–π–Ω–æ–µ: ${randomChance}`);
    return randomChance < shouldRespondChance;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è AI –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–∞–º—è—Ç—å—é
   */
  async generateResponse(messageText: string, author: string, messageId?: number): Promise<string | null> {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–º—è—Ç—å, —Å—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (this.memoryManager) {
      try {
        Logger.debug(`üíæ [–û–¢–í–ï–¢] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏...`);
        const memoryContext = await this.memoryManager.buildMemoryContext(messageText, author);
        this.context.memoryContext = memoryContext;
        Logger.info(`‚úÖ [–û–¢–í–ï–¢] –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ context`);
      } catch (error) {
        Logger.error('‚ùå [–û–¢–í–ï–¢] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏:', error);
      }
    } else {
      Logger.warn(`‚ö†Ô∏è [–û–¢–í–ï–¢] memoryManager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –±–µ–∑ –ø–∞–º—è—Ç–∏.`);
    }
    const useAI = this.shouldUseAI(messageText);
    
    if (useAI && this.aiEngine.isAvailable()) {
      Logger.debug('–ü—ã—Ç–∞–µ–º—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI —Å –ø–∞–º—è—Ç—å—é...');
      const aiResponse = await this.aiEngine.generateResponse(messageText, author, this.context);
      
      if (aiResponse) {
        this.updateContext('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', aiResponse, messageId);
        return aiResponse;
      } else {
        Logger.warn('AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã');
      }
    }

    // Fallback –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    Logger.debug('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...');
    const patternResponse = this.generatePatternResponse(messageText);
    
    if (patternResponse) {
      this.updateContext('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', patternResponse, messageId);
      return patternResponse;
    }

    return null;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   */
  private shouldUseAI(messageText: string): boolean {
    switch (config.aiMode) {
      case 'ai_only':
        return true;
      case 'patterns_only':
        return false;
      case 'hybrid':
        if (this.isDirectMention(messageText)) {
          return true;
        }
        
        if (messageText.length > 100 || messageText.includes('?')) {
          return Math.random() < config.aiProbability * 1.2;
        }
        
        return Math.random() < config.aiProbability;
      default:
        return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private generatePatternResponse(messageText: string): string | null {
    const pattern = this.findMatchingPattern(messageText);
    if (!pattern) return null;

    const responses = pattern.responses;
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    Logger.info(`–í—ã–±—Ä–∞–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: ${pattern.id}, –æ—Ç–≤–µ—Ç: ${randomResponse.substring(0, 50)}...`);
    return randomResponse;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–º—è—Ç—å
   */
  updateContext(
    author: string, 
    messageText: string, 
    messageId?: number, 
    messageType: 'text' | 'image' | 'media' = 'text',
    imageAnalysis?: ImageAnalysisResult
  ): void {
    this.context.recentMessages.push({
      text: messageText,
      author,
      timestamp: new Date()
    });

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    if (this.context.recentMessages.length > 10) {
      this.context.recentMessages = this.context.recentMessages.slice(-10);
    }

    this.context.activeUsers.add(author);

    if (author === '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á' || author === 'bot') {
      this.context.lastBotResponse = new Date();
      this.context.messagesSinceLastResponse = 0;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    Logger.debug(`–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å: memoryManager=${!!this.memoryManager}, messageId=${messageId}, chatId=${this.chatId}`);
    
    if (this.memoryManager && messageId && this.chatId) {
      try {
        const importance = this.calculateMessageImportance(messageText, author);
        const emotion = this.detectEmotion(messageText);
        const topics = this.extractTopics(messageText);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ)
        const importantTopics = topics.filter(topic => 
          topic && topic.length >= 5 && 
          !['–º–æ—Ä–∫–æ–≤–∫–∞', '–∫–ª–∏—Ç–æ—Ä', '–ø—Ä–æ–µ–∫—Ç'].includes(topic.toLowerCase()) // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä
        );
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
        if (messageText.toLowerCase().includes('–º–æ—Ä—Ä–æ–≤–∫–∞') || messageText.toLowerCase().includes('–º–æ—Ä–∫–æ–≤–∫–∞')) {
          importantTopics.push('–º–æ—Ä–∫–æ–≤–∫–∞');
        }
        if (messageText.toLowerCase().includes('gpt') || messageText.toLowerCase().includes('–≥–ø—Ç')) {
          importantTopics.push('GPT');
        }
        if (messageText.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç')) {
          importantTopics.push('–ø—Ä–æ–µ–∫—Ç—ã');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (imageAnalysis && imageAnalysis.tags.length > 0) {
          importantTopics.push(...imageAnalysis.tags);
        }
        
        importantTopics.forEach(topic => {
          this.updateTopicInDatabase(topic, author);
        });
        
        Logger.debug(`–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –≤–∞–∂–Ω–æ—Å—Ç—å=${importance}, —ç–º–æ—Ü–∏—è=${emotion}, —Ç–µ–º—ã=${JSON.stringify(topics)}, —Ç–∏–ø=${messageType}`);
        
        this.memoryManager.saveMessage({
          chatId: this.chatId,
          messageId: messageId,
          author: author,
          content: messageText,
          timestamp: new Date(),
          messageType: messageType as "text" | "media" | "system" | "image",
          isFromBot: author === '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á',
          importance: importance,
          emotion: emotion as "positive" | "negative" | "neutral" | "excited" | "angry" | "sad" | "funny" | "friendly" | "curious" | "engaging",
          topics: topics,
          mentions: this.extractMentions(messageText),
          imageAnalysis: imageAnalysis
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (author !== '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á') {
          this.memoryManager.updateUserRelationship(author, {
            commonTopics: topics,
            mood: (['positive', 'friendly', 'excited'].includes(emotion) ? 'positive' : 
                  ['negative', 'angry', 'sad'].includes(emotion) ? 'negative' : 'neutral') as 'positive' | 'negative' | 'neutral'
          });
        }

        Logger.info(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: "${messageText.substring(0, 30)}..." –æ—Ç ${author}`);
      } catch (error) {
        Logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å:', error);
      }
    } else {
      Logger.warn(`‚ö†Ô∏è –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å: memoryManager=${!!this.memoryManager}, messageId=${messageId}, chatId=${this.chatId}`);
    }

    // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const tenMinutesAgo = Date.now() - 600000;
    this.context.recentMessages = this.context.recentMessages.filter(
      msg => msg.timestamp.getTime() > tenMinutesAgo
    );
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private calculateMessageImportance(text: string, author: string): number {
    let importance = 0.5; // –ë–∞–∑–æ–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å

    // –ü—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ
    if (this.isDirectMention(text)) {
      importance += 0.3;
    }

    // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ
    if (text.length > 100) {
      importance += 0.2;
    }

    // –í–æ–ø—Ä–æ—Å—ã –≤–∞–∂–Ω–µ–µ
    if (text.includes('?')) {
      importance += 0.1;
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
    return Math.min(1.0, Math.max(0.1, importance));
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private detectEmotion(text: string): string {
    const lowerText = text.toLowerCase();
    
    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —ç–º–æ—Ü–∏–∏
    const positiveWords = [
      '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å', '—Å—É–ø–µ—Ä', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '—É—Ä–∞', '—Ö–æ—Ä–æ—à–æ', '–Ω–æ—Ä–º', '–∑–±—Å',
      '–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', '–π–æ', '—Å–∞–ª—é—Ç', '–¥–æ–±—Ä–æ', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é',
      '–º–æ–ª–æ–¥–µ—Ü', '–∫—Ä–∞—Å–æ—Ç–∞', '–æ–≥–æ–Ω—å', '—Ç–æ–ø', '–∫–∞–π—Ñ', '–ª–∞–π–∫', 'love', '–ª—é–±–æ–≤—å',
      'üòÑ', 'üòä', 'üëç', 'üî•', '‚ù§Ô∏è', 'üíï', '‚ú®', 'üéâ', 'üòé', 'ü§©', 'üòç'
    ];
    
    // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —ç–º–æ—Ü–∏–∏  
    const negativeWords = [
      '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å', '–∫–æ—à–º–∞—Ä', '–±–µ—Å–∏—Ç', '–∑–ª–æ–π', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ñ—É', '–±–ª—è—Ç—å', '—Å—É–∫–∞',
      '–¥–µ—Ä—å–º–æ', '–≥–æ–≤–Ω–æ', '–ø–∏–∑–¥–µ—Ü', '—Ö–µ—Ä–Ω—è', '–æ—Ç—Å—Ç–æ–π', '–≥–∞–≤–Ω–æ', '–∂–µ—Å—Ç—å', '–∫–∞–ø–µ—Ü',
      '–Ω–µ–Ω–∞–≤–∏–∂—É', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–∑–∞–¥–æ–ª–±–∞–ª', '–¥–æ—Å—Ç–∞–ª', '–ø–µ—á–∞–ª—å',
      'üò¢', 'üò†', 'üò°', 'üí©', 'üò§', 'ü§¨', 'üòû', 'üòî', 'üíî', 'üò≠'
    ];
    
    // –í–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã–µ/—É–¥–∏–≤–ª–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    const excitedWords = [
      '–≤–∞—É', '–æ–≥–æ', '–æ—Ñ–∏–≥–µ—Ç—å', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–æ—Ö—É–µ—Ç—å', '–ø–∏–∑–¥–∞—Ç–æ', '–∞—Ö—É–µ–Ω–Ω–æ',
      '–Ω–∏—Ö—É—è —Å–µ–±–µ', '–∑–±—Å', '–≤–æ–æ–±—â–µ', '—Ä–µ–∞–ª—å–Ω–æ', '—Å–µ—Ä—å–µ–∑–Ω–æ', '–∫–∞–ø–µ—Ü –∫–∞–∫',
      'ü§©', 'üòç', 'üöÄ', 'üí•', '‚ö°', 'ü§Ø', 'üò≤', 'üòÆ'
    ];
    
    // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ/–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ
    const friendlyWords = [
      '–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', '–π–æ', '—Å–∞–ª—é—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å',
      '–∫–∞–∫ –∂–∏–∑–Ω—å', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '–¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (positiveWords.some(word => lowerText.includes(word))) return 'positive';
    if (negativeWords.some(word => lowerText.includes(word))) return 'negative';  
    if (excitedWords.some(word => lowerText.includes(word))) return 'excited';
    if (friendlyWords.some(word => lowerText.includes(word))) return 'friendly';
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    const exclamationCount = (text.match(/!/g) || []).length;
    const questionCount = (text.match(/\?/g) || []).length;
    const capsCount = (text.match(/[–ê-–ØA-Z]/g) || []).length;
    
    if (exclamationCount >= 2 || capsCount > text.length * 0.3) return 'excited';
    if (questionCount > 0) return 'curious';
    if (this.isDirectMention(text)) return 'engaging';
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è
    return 'neutral';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private extractTopics(text: string): string[] {
    const words = text.toLowerCase()
      .replace(/[^\w\s–∞-—è—ë]/gi, ' ')
      .split(/\s+/)
      .filter(word => word.length >= 4);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∏–º–µ–Ω–∞ –¥–ª—è —Ç–µ–º
    const topicStopWords = new Set([
      '—Å–∞–Ω—è', '–≥–µ–π—Å–∞–Ω–¥—Ä', '–∫—É–ª–æ–≤–∏—á', '–≤—Ä–æ–¥–µ', '–¥—É–º–∞—é', '–Ω–æ—Ä–º', '–≤–∞—â–µ',
      '–±–æ–≥–¥–∞–Ω', '–æ–Ω–ª–∞–π–Ω', '—Ä–µ–∞–ª—å–Ω–æ', '—Ç–æ–ª—å–∫–æ', '–≥–æ–≤–æ—Ä–∏–ª', '–ø–æ–º–Ω—é',
      '–º–∞–∫—Å', '—É—à–µ–ª', '–±—ã–ª–∞', '–±—ã–ª–∏', '–µ—Å—Ç—å', '–±—É–¥–µ—Ç', '–º–æ–∂–µ—Ç', '–æ—á–µ–Ω—å'
    ]);
    
    return words
      .filter(word => !topicStopWords.has(word) && word.length >= 5)
      .slice(0, 2); // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private extractMentions(text: string): string[] {
    const mentions = text.match(/@(\w+)/g);
    return mentions ? mentions.map(m => m.slice(1)) : [];
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private updateTopicInDatabase(topic: string, author: string): void {
    if (!this.memoryManager || !this.chatId) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const existingTopic = (this.memoryManager as any).db.prepare(`
        SELECT * FROM chat_topics WHERE chat_id = ? AND topic = ?
      `).get(this.chatId, topic) as any;
      
      if (existingTopic) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
        (this.memoryManager as any).db.prepare(`
          UPDATE chat_topics 
          SET last_mentioned = CURRENT_TIMESTAMP,
              mention_count = mention_count + 1,
              importance = MIN(1.0, importance + 0.1)
          WHERE chat_id = ? AND topic = ?
        `).run(this.chatId, topic);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        (this.memoryManager as any).db.prepare(`
          INSERT INTO chat_topics (
            chat_id, topic, first_mentioned, last_mentioned,
            mention_count, related_users, importance, status
          ) VALUES (?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, ?, 0.5, 'active')
        `).run(this.chatId, topic, JSON.stringify([author]));
        
        Logger.debug(`üéØ –ù–æ–≤–∞—è —Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: ${topic}`);
      }
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã:', error);
    }
  }


  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
   */
  private isDirectMention(text: string): boolean {
    const lowerText = text.toLowerCase();
    const botMentions = [
      '–≥–µ–π—Å–∞–Ω–¥—Ä', '–≥–µ—è—Å–∞–Ω–¥—Ä', '–≥–µ–π—Å', '–≥–µ—è—Å',
      '–∫—É–ª–æ–≤–∏—á', '–∫—É–ª—ã—á', '–∫—É–ª–∏—á',
      '–≥–µ–π—Å–∞–Ω–¥—Ä –∫—É–ª–æ–≤–∏—á', '–≥–µ—è—Å–∞–Ω–¥—Ä –∫—É–ª–æ–≤–∏—á',
      '—Å–∞–Ω—è', '—Å–∞–Ω—è', '—Å–∞–Ω—å', '—Å–∞–Ω–µ–∫', '—Å–∞–Ω–∏–∫', '—Å–∞–Ω—á–æ', '—à—É—Ä–∞', '—à—É—Ä–∏–∫',
      '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–∞–ª–µ–∫—Å', '–ª–µ–∫—Å', '—Å–∞—à–∞', '—Å–∞—à–∫–∞', '—Å–∞—à–æ–∫',
      '@'
    ];
    
    return botMentions.some(mention => lowerText.includes(mention));
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private findMatchingPattern(messageText: string): TriggerPattern | null {
    const lowerText = messageText.toLowerCase();
    const matchingPatterns: Array<{ pattern: TriggerPattern; score: number }> = [];

    for (const pattern of this.personality.patterns) {
      let score = 0;
      
      for (const keyword of pattern.keywords) {
        if (lowerText.includes(keyword.toLowerCase())) {
          score += pattern.weight;
        }
      }

      if (score > 0) {
        matchingPatterns.push({ pattern, score });
      }
    }

    if (matchingPatterns.length === 0) return null;

    matchingPatterns.sort((a, b) => b.score - a.score);
    return matchingPatterns[0].pattern;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞–º—è—Ç–∏
   */
  getContextStats() {
    const baseStats = {
      recentMessagesCount: this.context.recentMessages.length,
      activeUsersCount: this.context.activeUsers.size,
      messagesSinceLastResponse: this.context.messagesSinceLastResponse,
      lastBotResponse: this.context.lastBotResponse,
      aiModel: this.aiEngine.getModelInfo(),
      aiMode: config.aiMode
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    if (this.memoryManager) {
      const memoryStats = this.memoryManager.getMemoryStats();
      return {
        ...baseStats,
        memory: memoryStats
      };
    }

    return baseStats;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  public getRecentMessages(): string[] {
    return this.context.recentMessages.slice(-5).map(msg => `${msg.author}: ${msg.text}`);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI engine)
   */
  public getUserProfile(userName: string): any | undefined {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–æ–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    return undefined;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞
   */
  public getPersonality(): BotPersonality {
    return this.personality;
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  close(): void {
    if (this.memoryManager) {
      this.memoryManager.close();
    }
  }
}