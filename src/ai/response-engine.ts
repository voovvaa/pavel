import { 
  BotPersonality, 
  TriggerPattern, 
  ChatContext,
  ImageAnalysisResult,
  MemoryContext
} from '../core/types.js';
import { Logger } from '../utils/logger.js';
import { AIEngine } from './ai-engine.js';
import { MemoryManager } from '../memory/memory-manager.js';
import { config } from '../core/config.js';
// –≠–¢–ê–ü 8: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
import { EmotionalAdapter, EmotionalAdaptation } from './emotional-adapter.js';
// –≠–¢–ê–ü 9: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
import { ActivityManager } from '../core/activity-manager.js';
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
import { MEMORY_LIMITS, TIMEOUTS, IMPORTANCE_THRESHOLDS, CONTENT_LIMITS } from '../constants/performance.js';

export class ResponseEngine {
  private personality: BotPersonality;
  private context: ChatContext;
  private aiEngine: AIEngine;
  private memoryManager: MemoryManager | null = null;
  private chatId: string | null = null;
  // –≠–¢–ê–ü 8: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
  private emotionalAdapter: EmotionalAdapter;
  // –≠–¢–ê–ü 9: –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  private activityManager: ActivityManager | null = null;

  constructor(personality: BotPersonality, chatId?: string) {
    this.personality = personality;
    this.chatId = chatId || null;
    this.aiEngine = new AIEngine(personality, this.chatId || undefined);
    
    // –≠–¢–ê–ü 8: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
    this.emotionalAdapter = new EmotionalAdapter();
    
    // –≠–¢–ê–ü 9: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (chatId) {
      this.activityManager = new ActivityManager(chatId);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å chatId
    if (chatId) {
      this.initializeMemory(chatId);
    }
    
    this.context = {
      recentMessages: [],
      activeUsers: new Set(),
      messagesSinceLastResponse: 0
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
   */
  initializeMemory(chatId: string): void {
    if (this.memoryManager) {
      this.memoryManager.close();
    }
    
    this.chatId = chatId;
    this.memoryManager = new MemoryManager(chatId);
    Logger.info('üß† –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞');
  }

  /**
   * –≠–¢–ê–ü 9: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
   */
  private analyzeContextualSituation(messageText: string, author: string): {
    situationType: 'normal' | 'conflict' | 'celebration' | 'group_discussion' | 'private_moment' | 'technical_discussion';
    behaviorModifier: number;
    responseStyle: 'casual' | 'supportive' | 'humorous' | 'technical' | 'careful';
  } {
    const lowerText = messageText.toLowerCase();
    const recentMessages = this.context.recentMessages;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏
    let situationType: 'normal' | 'conflict' | 'celebration' | 'group_discussion' | 'private_moment' | 'technical_discussion' = 'normal';
    let behaviorModifier = 1.0;
    let responseStyle: 'casual' | 'supportive' | 'humorous' | 'technical' | 'careful' = 'casual';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    const conflictWords = ['—Å–ø–æ—Ä', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '–µ—Ä—É–Ω–¥–∞', '–≥–ª—É–ø–æ—Å—Ç—å', '–∏–¥–∏–æ—Ç', '–¥—É—Ä–∞–∫'];
    if (conflictWords.some(word => lowerText.includes(word))) {
      situationType = 'conflict';
      behaviorModifier = 0.3; // –û—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
      responseStyle = 'careful';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ
    const celebrationWords = ['–ø–æ–∑–¥—Ä–∞–≤–ª—è—é', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '—É—Ä–∞', 'üéâ', 'üéÇ', '–º–æ–ª–æ–¥–µ—Ü'];
    if (celebrationWords.some(word => lowerText.includes(word))) {
      situationType = 'celebration';
      behaviorModifier = 1.5; // –ë–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ –≤ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è—Ö
      responseStyle = 'supportive';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é –¥–∏—Å–∫—É—Å—Å–∏—é (–º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–∞–≤–Ω–æ)
    const uniqueRecentAuthors = new Set(recentMessages.slice(-5).map(msg => msg.author));
    if (uniqueRecentAuthors.size >= 3 && this.context.messagesSinceLastResponse > 2) {
      situationType = 'group_discussion';
      behaviorModifier = 0.7; // –ú–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –¥–∏—Å–∫—É—Å—Å–∏—è—Ö
      responseStyle = 'casual';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    const techWords = ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–±–æ—Ç', 'api', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '—Å–µ—Ä–≤–µ—Ä', 'github'];
    if (techWords.some(word => lowerText.includes(word))) {
      situationType = 'technical_discussion';
      behaviorModifier = 1.2; // –ß—É—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º–∞—Ö
      responseStyle = 'technical';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π –º–æ–º–µ–Ω—Ç
    const personalWords = ['–ø–µ—Ä–µ–∂–∏–≤–∞—é', '–ø—Ä–æ–±–ª–µ–º–∞', '–≥—Ä—É—Å—Ç–Ω–æ', '—É—Å—Ç–∞–ª', '–±–æ–ª–µ—é', '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω'];
    if (personalWords.some(word => lowerText.includes(word))) {
      situationType = 'private_moment';
      behaviorModifier = 1.8; // –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö
      responseStyle = 'supportive';
    }
    
    return { situationType, behaviorModifier, responseStyle };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  shouldRespond(messageText: string, author: string): boolean {
    // –ù–ï –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ—Å–ª–∏ –Ω–∞—Å –Ω–∞–∑—ã–≤–∞—é—Ç "–±–æ—Ç–æ–º"
    if (author === '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á' || author === 'bot') return false;
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–∞—Å –Ω–∞–∑—ã–≤–∞—é—Ç –±–æ—Ç–æ–º
    const lowerText = messageText.toLowerCase();
    if (lowerText.includes('–±–æ—Ç') || lowerText.includes('bot')) {
      return false;
    }

    this.context.messagesSinceLastResponse++;

    // –≠–¢–ê–ü 9: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
    const situationAnalysis = this.analyzeContextualSituation(messageText, author);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ì–µ–π—Å–∞–Ω–¥—Ä—É –ö—É–ª–æ–≤–∏—á—É
    if (this.isDirectMention(messageText)) {
      return true;
    }

    // –≠–¢–ê–ü 9: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const activityModifiers = this.activityManager?.getActivityModifiers();
    
    if (activityModifiers) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (!activityModifiers.isActiveTime && Math.random() > 0.3) {
        return false;
      }
    } else {
      // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      const now = new Date();
      const currentHour = now.getHours();
      const currentDay = now.getDay();
      
      if (!this.personality.schedule.activeHours.includes(currentHour) ||
          !this.personality.schedule.activeDays.includes(currentDay)) {
        return false;
      }
    }

    // –í AI —Ä–µ–∂–∏–º–µ –±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    if (this.aiEngine.isAvailable()) {
      const randomChance = Math.random();
      let shouldRespondChance = this.personality.responseStyle.activityLevel * 0.4;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
      if (this.context.lastBotResponse) {
        const timeSinceLastResponse = Date.now() - this.context.lastBotResponse.getTime();
        const minDelay = (1 - this.personality.responseStyle.activityLevel) * 180000;
        
        if (timeSinceLastResponse < minDelay && this.context.messagesSinceLastResponse < 2) {
          return false;
        }
      }
      
      // –≠–¢–ê–ü 8: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
      if (this.context.memoryContext) {
        try {
          const adaptation = this.emotionalAdapter.adaptToEmotionalState(
            author,
            messageText,
            this.context.memoryContext
          );
          shouldRespondChance *= adaptation.responseModifier;
          Logger.debug(`üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: ${adaptation.responseModifier.toFixed(2)}x`);
        } catch (error) {
          Logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:', error);
        }
      }
      
      // –≠–¢–ê–ü 9: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (activityModifiers) {
        shouldRespondChance *= activityModifiers.responseMultiplier;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
        if (activityModifiers.inactivityPeriod > 60) { // –ë–æ–ª–µ–µ —á–∞—Å–∞ —Ç–∏—à–∏–Ω—ã
          shouldRespondChance *= 1.5; // –ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ "–æ–∂–∏–≤–∏—Ç—å" —á–∞—Ç
        } else if (activityModifiers.inactivityPeriod < 5) { // –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
          shouldRespondChance *= 0.7; // –ú–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ –º–µ—à–∞—Ç—å
        }
        
        const stats = this.activityManager?.getActivityStats() || '';
        Logger.debug(`üìä –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityModifiers.responseMultiplier.toFixed(2)}x (${stats})`);
      }

      // –≠–¢–ê–ü 9: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
      shouldRespondChance *= situationAnalysis.behaviorModifier;
      Logger.debug(`üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: ${situationAnalysis.situationType} (–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${situationAnalysis.behaviorModifier.toFixed(2)}x, —Å—Ç–∏–ª—å: ${situationAnalysis.responseStyle})`);
      
      Logger.debug(`–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á (AI —Å –ø–∞–º—è—Ç—å—é): —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ ${shouldRespondChance.toFixed(3)}, —Å–ª—É—á–∞–π–Ω–æ–µ: ${randomChance.toFixed(3)}`);
      return randomChance < shouldRespondChance;
    }

    // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const matchingPattern = this.findMatchingPattern(messageText);
    if (!matchingPattern) {
      return false;
    }

    if (this.context.lastBotResponse) {
      const timeSinceLastResponse = Date.now() - this.context.lastBotResponse.getTime();
      const minDelay = (1 - this.personality.responseStyle.activityLevel) * 300000;
      
      if (timeSinceLastResponse < minDelay && this.context.messagesSinceLastResponse < 3) {
        return false;
      }
    }

    const randomChance = Math.random();
    const shouldRespondChance = this.personality.responseStyle.activityLevel * 0.3;
    
    return randomChance < shouldRespondChance;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è AI –∏–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–∞–º—è—Ç—å—é
   */
  async generateResponse(messageText: string, author: string, messageId?: number): Promise<string | null> {
    // –≠–¢–ê–ü 9: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞
    const situationAnalysis = this.analyzeContextualSituation(messageText, author);
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–º—è—Ç—å, —Å—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (this.memoryManager) {
      try {
        const memoryContext = await this.memoryManager.buildMemoryContext(messageText, author);
        this.context.memoryContext = memoryContext;
        Logger.memory(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ${author}`);
      } catch (error) {
        Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏:', error);
      }
    } else {
      Logger.warn('MemoryManager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –æ—Ç–≤–µ—Ç –±–µ–∑ –ø–∞–º—è—Ç–∏');
    }
    const useAI = this.shouldUseAI(messageText);
    
    if (useAI && this.aiEngine.isAvailable()) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const contextWithStyle = { 
        ...this.context, 
        responseStyle: situationAnalysis.responseStyle,
        situationType: situationAnalysis.situationType
      };
      const aiResponse = await this.aiEngine.generateResponse(messageText, author, contextWithStyle);
      
      if (aiResponse) {
        this.updateContext('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', aiResponse, messageId);
        return aiResponse;
      } else {
        Logger.warn('AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã');
      }
    }

    // Fallback –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const patternResponse = this.generatePatternResponse(messageText);
    
    if (patternResponse) {
      this.updateContext('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á', patternResponse, messageId);
      return patternResponse;
    }

    return null;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   */
  private shouldUseAI(messageText: string): boolean {
    switch (config.aiMode) {
      case 'ai_only':
        return true;
      case 'patterns_only':
        return false;
      case 'hybrid':
        if (this.isDirectMention(messageText)) {
          return true;
        }
        
        if (messageText.length > 100 || messageText.includes('?')) {
          return Math.random() < config.aiProbability * 1.2;
        }
        
        return Math.random() < config.aiProbability;
      default:
        return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private generatePatternResponse(messageText: string): string | null {
    const pattern = this.findMatchingPattern(messageText);
    if (!pattern) return null;

    const responses = pattern.responses;
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    Logger.info(`–í—ã–±—Ä–∞–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: ${pattern.id}, –æ—Ç–≤–µ—Ç: ${randomResponse.substring(0, 50)}...`);
    return randomResponse;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–º—è—Ç—å
   */
  updateContext(
    author: string, 
    messageText: string, 
    messageId?: number, 
    messageType: 'text' | 'image' | 'media' = 'text',
    imageAnalysis?: ImageAnalysisResult
  ): void {
    this.context.recentMessages.push({
      text: messageText,
      author,
      timestamp: new Date()
    });

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (this.context.recentMessages.length > CONTENT_LIMITS.RECENT_MESSAGES * 2) {
      this.context.recentMessages = this.context.recentMessages.slice(-CONTENT_LIMITS.RECENT_MESSAGES * 2);
    }

    this.context.activeUsers.add(author);

    if (author === '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á' || author === 'bot') {
      this.context.lastBotResponse = new Date();
      this.context.messagesSinceLastResponse = 0;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    
    if (this.memoryManager && messageId && this.chatId) {
      try {
        const importance = this.calculateMessageImportance(messageText, author);
        const emotion = this.detectEmotion(messageText);
        
        // –≠–¢–ê–ü 9: –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º - –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ù–ï –¥–ª—è –±–æ—Ç–∞
        let topics: string[] = [];
        if (author !== '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á') {
          topics = this.extractTopics(messageText, {
            emotion,
            imageAnalysis,
            memoryContext: this.context.memoryContext
          });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ)
        const importantTopics = topics.filter(topic => 
          topic && topic.length >= 5 && 
          !['–º–æ—Ä–∫–æ–≤–∫–∞', '–∫–ª–∏—Ç–æ—Ä', '–ø—Ä–æ–µ–∫—Ç'].includes(topic.toLowerCase()) // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä
        );
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
        if (messageText.toLowerCase().includes('–º–æ—Ä—Ä–æ–≤–∫–∞') || messageText.toLowerCase().includes('–º–æ—Ä–∫–æ–≤–∫–∞')) {
          importantTopics.push('–º–æ—Ä–∫–æ–≤–∫–∞');
        }
        if (messageText.toLowerCase().includes('gpt') || messageText.toLowerCase().includes('–≥–ø—Ç')) {
          importantTopics.push('GPT');
        }
        if (messageText.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç')) {
          importantTopics.push('–ø—Ä–æ–µ–∫—Ç—ã');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (imageAnalysis && imageAnalysis.tags.length > 0) {
          importantTopics.push(...imageAnalysis.tags);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã –≤ –ë–î —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –¥–ª—è –±–æ—Ç–∞)
        if (author !== '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á') {
          importantTopics.forEach(topic => {
            this.updateTopicInDatabase(topic, author);
          });
        }
        
        this.memoryManager.saveMessage({
          chatId: this.chatId,
          messageId: messageId,
          author: author,
          content: messageText,
          timestamp: new Date(),
          messageType: messageType as "text" | "media" | "system" | "image",
          isFromBot: author === '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á',
          importance: importance,
          emotion: emotion as "positive" | "negative" | "neutral" | "excited" | "angry" | "sad" | "funny" | "friendly" | "curious" | "engaging",
          topics: topics,
          mentions: this.extractMentions(messageText),
          imageAnalysis: imageAnalysis
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –¥–ª—è –±–æ—Ç–∞)
        if (author !== '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á') {
          this.memoryManager.updateUserRelationship(author, {
            commonTopics: topics,
            mood: (['positive', 'friendly', 'excited'].includes(emotion) ? 'positive' : 
                  ['negative', 'angry', 'sad'].includes(emotion) ? 'negative' : 'neutral') as 'positive' | 'negative' | 'neutral'
          });
        }

        Logger.memory(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "${messageText.substring(0, 30)}..." –æ—Ç ${author}`);
      } catch (error) {
        Logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å:', error);
      }
    } else {
      Logger.warn(`–ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å: memoryManager=${!!this.memoryManager}, messageId=${messageId}`);
    }

    // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const tenMinutesAgo = Date.now() - 600000;
    this.context.recentMessages = this.context.recentMessages.filter(
      msg => msg.timestamp.getTime() > tenMinutesAgo
    );
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private calculateMessageImportance(text: string, author: string): number {
    let importance = 0.5; // –ë–∞–∑–æ–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å

    // –ü—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ
    if (this.isDirectMention(text)) {
      importance += IMPORTANCE_THRESHOLDS.MEDIUM_IMPORTANCE;
    }

    // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ
    if (text.length > 100) {
      importance += 0.2;
    }

    // –í–æ–ø—Ä–æ—Å—ã –≤–∞–∂–Ω–µ–µ
    if (text.includes('?')) {
      importance += 0.1;
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
    return Math.min(1.0, Math.max(IMPORTANCE_THRESHOLDS.LOW_IMPORTANCE, importance));
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private detectEmotion(text: string): string {
    const lowerText = text.toLowerCase();
    
    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —ç–º–æ—Ü–∏–∏
    const positiveWords = [
      '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å', '—Å—É–ø–µ—Ä', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '—É—Ä–∞', '—Ö–æ—Ä–æ—à–æ', '–Ω–æ—Ä–º', '–∑–±—Å',
      '–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', '–π–æ', '—Å–∞–ª—é—Ç', '–¥–æ–±—Ä–æ', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é',
      '–º–æ–ª–æ–¥–µ—Ü', '–∫—Ä–∞—Å–æ—Ç–∞', '–æ–≥–æ–Ω—å', '—Ç–æ–ø', '–∫–∞–π—Ñ', '–ª–∞–π–∫', 'love', '–ª—é–±–æ–≤—å',
      'üòÑ', 'üòä', 'üëç', 'üî•', '‚ù§Ô∏è', 'üíï', '‚ú®', 'üéâ', 'üòé', 'ü§©', 'üòç'
    ];
    
    // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —ç–º–æ—Ü–∏–∏  
    const negativeWords = [
      '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å', '–∫–æ—à–º–∞—Ä', '–±–µ—Å–∏—Ç', '–∑–ª–æ–π', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ñ—É', '–±–ª—è—Ç—å', '—Å—É–∫–∞',
      '–¥–µ—Ä—å–º–æ', '–≥–æ–≤–Ω–æ', '–ø–∏–∑–¥–µ—Ü', '—Ö–µ—Ä–Ω—è', '–æ—Ç—Å—Ç–æ–π', '–≥–∞–≤–Ω–æ', '–∂–µ—Å—Ç—å', '–∫–∞–ø–µ—Ü',
      '–Ω–µ–Ω–∞–≤–∏–∂—É', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–∑–∞–¥–æ–ª–±–∞–ª', '–¥–æ—Å—Ç–∞–ª', '–ø–µ—á–∞–ª—å',
      'üò¢', 'üò†', 'üò°', 'üí©', 'üò§', 'ü§¨', 'üòû', 'üòî', 'üíî', 'üò≠'
    ];
    
    // –í–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã–µ/—É–¥–∏–≤–ª–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    const excitedWords = [
      '–≤–∞—É', '–æ–≥–æ', '–æ—Ñ–∏–≥–µ—Ç—å', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–æ—Ö—É–µ—Ç—å', '–ø–∏–∑–¥–∞—Ç–æ', '–∞—Ö—É–µ–Ω–Ω–æ',
      '–Ω–∏—Ö—É—è —Å–µ–±–µ', '–∑–±—Å', '–≤–æ–æ–±—â–µ', '—Ä–µ–∞–ª—å–Ω–æ', '—Å–µ—Ä—å–µ–∑–Ω–æ', '–∫–∞–ø–µ—Ü –∫–∞–∫',
      'ü§©', 'üòç', 'üöÄ', 'üí•', '‚ö°', 'ü§Ø', 'üò≤', 'üòÆ'
    ];
    
    // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ/–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ
    const friendlyWords = [
      '–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤–∞', '—Ö–∞–π', '–π–æ', '—Å–∞–ª—é—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å',
      '–∫–∞–∫ –∂–∏–∑–Ω—å', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '–¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (positiveWords.some(word => lowerText.includes(word))) return 'positive';
    if (negativeWords.some(word => lowerText.includes(word))) return 'negative';  
    if (excitedWords.some(word => lowerText.includes(word))) return 'excited';
    if (friendlyWords.some(word => lowerText.includes(word))) return 'friendly';
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    const exclamationCount = (text.match(/!/g) || []).length;
    const questionCount = (text.match(/\?/g) || []).length;
    const capsCount = (text.match(/[–ê-–ØA-Z]/g) || []).length;
    
    if (exclamationCount >= 2 || capsCount > text.length * 0.3) return 'excited';
    if (questionCount > 0) return 'curious';
    if (this.isDirectMention(text)) return 'engaging';
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è
    return 'neutral';
  }

  /**
   * –≠–¢–ê–ü 9: –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
   */
  private extractTopics(text: string, context?: {
    emotion?: string;
    imageAnalysis?: ImageAnalysisResult;
    memoryContext?: MemoryContext;
    detectedEvent?: any;
  }): string[] {
    const topics: string[] = [];
    
    // 1. –ü–†–ò–û–†–ò–¢–ï–¢: –¢–µ–º—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (context?.imageAnalysis?.tags && context.imageAnalysis.tags.length > 0) {
      // –ë–µ—Ä–µ–º —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageTags = context.imageAnalysis.tags
        .filter(tag => tag.length >= CONTENT_LIMITS.MIN_ENTITY_LENGTH && !['photo', 'image', 'picture'].includes(tag.toLowerCase()))
        .slice(0, CONTENT_LIMITS.MAX_ENTITIES_PER_MESSAGE);
      topics.push(...imageTags);
    }
    
    // 2. –¢–µ–º—ã –∏–∑ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    if (context?.detectedEvent?.tags) {
      const eventTopics = context.detectedEvent.tags
        .filter((tag: string) => !['celebration', 'conflict', 'funny_moment', 'decision', 'revelation'].includes(tag)) // –∏—Å–∫–ª—é—á–∞–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        .slice(0, 1);
      topics.push(...eventTopics);
    }
    
    // 3. –°–≤—è–∑—å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ —á–∞—Ç–∞
    if (context?.memoryContext?.activeTopics && context.memoryContext.activeTopics.length > 0) {
      const lowerText = text.toLowerCase();
      const relatedTopics = context.memoryContext.activeTopics
        .filter((topicObj: any) => {
          const topic = topicObj.topic.toLowerCase();
          return lowerText.includes(topic) || topic.includes(lowerText.substring(0, 10));
        })
        .map((topicObj: any) => topicObj.topic)
        .slice(0, 1);
      
      if (relatedTopics.length > 0) {
        topics.push(...relatedTopics);
      }
    }
    
    // 4. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ç–µ–∫—Å—Ç–µ (–∂–∏–≤–æ—Ç–Ω—ã–µ, –ø—Ä–µ–¥–º–µ—Ç—ã, –º–µ—Å—Ç–∞)
    const entities = this.extractEntities(text);
    if (entities.length > 0) {
      topics.push(...entities.slice(0, CONTENT_LIMITS.MAX_ENTITIES_PER_MESSAGE));
    }

    // 5. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã–µ —Ç–µ–º—ã
    if (context?.emotion && ['excited', 'angry', 'sad', 'funny'].includes(context.emotion)) {
      // –î–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
      const emotionalKeywords = this.extractEmotionalKeywords(text, context.emotion);
      topics.push(...emotionalKeywords.slice(0, 1));
    }
    
    // 6. Fallback: —É–º–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞–ª–æ —Ç–µ–º)
    if (topics.length < 2) {
      const textTopics = this.extractTopicsFromText(text);
      topics.push(...textTopics.slice(0, 2 - topics.length));
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º —Ç–µ–º
    const uniqueTopics = [...new Set(topics)].slice(0, CONTENT_LIMITS.MAX_TOPICS_PER_MESSAGE);
    
    return uniqueTopics;
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ (–∂–∏–≤–æ—Ç–Ω—ã–µ, –ø—Ä–µ–¥–º–µ—Ç—ã, –º–µ—Å—Ç–∞, –ª—é–¥–∏)
   */
  private extractEntities(text: string): string[] {
    const lowerText = text.toLowerCase();
    const entities: string[] = [];
    
    // –°–ª–æ–≤–∞—Ä–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
    const entityDictionaries = {
      animals: [
        '–∫–æ—Ç', '–∫–æ—Ç–∞', '–∫–æ—Ç–µ', '–∫–æ—Ç—É', '–∫–æ—Ç–æ–º', '–∫–æ—à–∫–∞', '–∫–æ—à–∫—É', '–∫–æ—à–∫–µ', '–∫–æ—à–∫–∏',
        '—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫—É', '—Å–æ–±–∞–∫–µ', '—Å–æ–±–∞–∫–∏', '—Å–æ–±–∞–∫–æ–π', '–ø–µ—Å', '–ø—Å–∞', '–ø—Å—É', '–ø—Å–æ–º',
        '—É—Ç–∫–∞', '—É—Ç–∫—É', '—É—Ç–∫–µ', '—É—Ç–∫–∏', '—É—Ç–∫–æ–π', '—É—Ç–æ–∫', 
        '–ø—Ç–∏—Ü–∞', '–ø—Ç–∏—Ü—É', '–ø—Ç–∏—Ü–µ', '–ø—Ç–∏—Ü—ã', '–ø—Ç–∏—Ü–µ–π', '–ø—Ç–∏—Ü',
        '—Ä—ã–±–∞', '—Ä—ã–±—É', '—Ä—ã–±–µ', '—Ä—ã–±—ã', '—Ä—ã–±–æ–π', '—Ä—ã–±',
        '—è—â–µ—Ä–∏—Ü–∞', '—è—â–µ—Ä–∏—Ü—É', '—è—â–µ—Ä–∏—Ü–µ', '—è—â–µ—Ä–∏—Ü—ã', '—è—â–µ—Ä–∏—Ü–µ–π', '—è—â–µ—Ä–∏—Ü',
        '—Ö–æ–º—è–∫', '—Ö–æ–º—è–∫–∞', '—Ö–æ–º—è–∫–µ', '—Ö–æ–º—è–∫—É', '—Ö–æ–º—è–∫–æ–º', '—Ö–æ–º—è–∫–∏',
        '–º–æ—Ä—Å–∫–æ–π —Å–≤–∏–Ω–∫–∞', '—Å–≤–∏–Ω–∫–∞', '—Å–≤–∏–Ω–∫—É', '—Å–≤–∏–Ω–∫–µ', '—Å–≤–∏–Ω–∫–∏', '—Å–≤–∏–Ω–∫–æ–π'
      ],
      
      plants: [
        '—Ü–≤–µ—Ç–æ–∫', '—Ü–≤–µ—Ç–∫–∞', '—Ü–≤–µ—Ç–∫–µ', '—Ü–≤–µ—Ç–∫—É', '—Ü–≤–µ—Ç–∫–æ–º', '—Ü–≤–µ—Ç—ã', '—Ü–≤–µ—Ç–æ–≤',
        '—Ä–∞—Å—Ç–µ–Ω–∏–µ', '—Ä–∞—Å—Ç–µ–Ω–∏—è', '—Ä–∞—Å—Ç–µ–Ω–∏—é', '—Ä–∞—Å—Ç–µ–Ω–∏–µ–º', '—Ä–∞—Å—Ç–µ–Ω–∏–π',
        '–º—É—Ö–æ–ª–æ–≤–∫–∞', '–º—É—Ö–æ–ª–æ–≤–∫—É', '–º—É—Ö–æ–ª–æ–≤–∫–µ', '–º—É—Ö–æ–ª–æ–≤–∫–∏', '–º—É—Ö–æ–ª–æ–≤–∫–æ–π',
        '–∫–∞–∫—Ç—É—Å', '–∫–∞–∫—Ç—É—Å–∞', '–∫–∞–∫—Ç—É—Å–µ', '–∫–∞–∫—Ç—É—Å—É', '–∫–∞–∫—Ç—É—Å–æ–º', '–∫–∞–∫—Ç—É—Å—ã'
      ],
      
      tech: [
        '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–µ', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º', '—Ç–µ–ª–∏–∫', '—Ç–µ–ª–∏–∫–∞', '—Ç–µ–ª–∏–∫—É',
        '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä–∞', '–∫–æ–º–ø—å—é—Ç–µ—Ä–µ', '–∫–æ–º–ø—å—é—Ç–µ—Ä—É', '–∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º', '–∫–æ–º–ø', '–∫–æ–º–ø–∞', '–∫–æ–º–ø—É',
        '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Ç–µ–ª–µ—Ñ–æ–Ω–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω–µ', '—Ç–µ–ª–µ—Ñ–æ–Ω—É', '—Ç–µ–ª–µ—Ñ–æ–Ω–æ–º', '–º–æ–±–∏–ª—å–Ω—ã–π', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω',
        '–Ω–æ—É—Ç–±—É–∫', '–Ω–æ—É—Ç–±—É–∫–∞', '–Ω–æ—É—Ç–±—É–∫–µ', '–Ω–æ—É—Ç–±—É–∫—É', '–Ω–æ—É—Ç–±—É–∫–æ–º', '–ª–∞–ø—Ç–æ–ø'
      ],
      
      places: [
        '–µ–≥–∏–ø–µ—Ç', '–µ–≥–∏–ø—Ç–∞', '–µ–≥–∏–ø—Ç–µ', '–µ–≥–∏–ø—Ç—É', '–µ–≥–∏–ø—Ç–æ–º',
        '–ø–∏—Ç–µ—Ä', '–ø–∏—Ç–µ—Ä–∞', '–ø–∏—Ç–µ—Ä–µ', '–ø–∏—Ç–µ—Ä—É', '–ø–∏—Ç–µ—Ä–æ–º', '–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
        '–º–æ—Å–∫–≤–∞', '–º–æ—Å–∫–≤—ã', '–º–æ—Å–∫–≤–µ', '–º–æ—Å–∫–≤—É', '–º–æ—Å–∫–≤–æ–π',
        '—É–∫—Ä–∞–∏–Ω–∞', '—É–∫—Ä–∞–∏–Ω—ã', '—É–∫—Ä–∞–∏–Ω–µ', '—É–∫—Ä–∞–∏–Ω—É', '—É–∫—Ä–∞–∏–Ω–æ–π',
        '–¥–æ–º', '–¥–æ–º–∞', '–¥–æ–º–µ', '–¥–æ–º—É', '–¥–æ–º–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–≤–∞—Ä—Ç–∏—Ä—ã', '–∫–≤–∞—Ä—Ç–∏—Ä–µ'
      ],
      
      objects: [
        '–∫—Ä–æ–≤–∞—Ç—å', '–∫—Ä–æ–≤–∞—Ç–∏', '–∫—Ä–æ–≤–∞—Ç–µ', '–∫—Ä–æ–≤–∞—Ç—å—é', '–∫—Ä–æ–≤–∞—Ç–µ–π',
        '—Å—Ç–æ–ª', '—Å—Ç–æ–ª–∞', '—Å—Ç–æ–ª–µ', '—Å—Ç–æ–ª—É', '—Å—Ç–æ–ª–æ–º', '—Å—Ç–æ–ª—ã',
        '–º–∞—à–∏–Ω–∞', '–º–∞—à–∏–Ω—ã', '–º–∞—à–∏–Ω–µ', '–º–∞—à–∏–Ω—É', '–º–∞—à–∏–Ω–æ–π', '–∞–≤—Ç–æ', '—Ç–∞—á–∫–∞', '—Ç–∞—á–∫—É', '—Ç–∞—á–∫–µ',
        '–∫–∞—Ä—Ç–∏–Ω–≥', '–∫–∞—Ä—Ç–∏–Ω–≥–∞', '–∫–∞—Ä—Ç–∏–Ω–≥–µ', '–∫–∞—Ä—Ç–∏–Ω–≥—É', '–∫–∞—Ä—Ç–∏–Ω–≥–æ–º'
      ]
    };
    
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞—Ä—è–º
    for (const [category, words] of Object.entries(entityDictionaries)) {
      for (const word of words) {
        if (lowerText.includes(word)) {
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º–µ
          const baseForm = this.normalizeEntityToBaseForm(word, category);
          if (baseForm && !entities.includes(baseForm)) {
            entities.push(baseForm);
          }
        }
      }
    }
    
    return entities.slice(0, 2); // –ú–∞–∫—Å–∏–º—É–º 2 —Å—É—â–Ω–æ—Å—Ç–∏
  }

  /**
   * –ü—Ä–∏–≤–æ–¥–∏—Ç —Å—É—â–Ω–æ—Å—Ç—å –∫ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º–µ
   */
  private normalizeEntityToBaseForm(word: string, category: string): string {
    const normalizations: { [key: string]: { [key: string]: string } } = {
      animals: {
        '–∫–æ—Ç': '–∫–æ—Ç', '–∫–æ—Ç–∞': '–∫–æ—Ç', '–∫–æ—Ç–µ': '–∫–æ—Ç', '–∫–æ—Ç—É': '–∫–æ—Ç', '–∫–æ—Ç–æ–º': '–∫–æ—Ç',
        '–∫–æ—à–∫–∞': '–∫–æ—Ç', '–∫–æ—à–∫—É': '–∫–æ—Ç', '–∫–æ—à–∫–µ': '–∫–æ—Ç', '–∫–æ—à–∫–∏': '–∫–æ—Ç',
        '—Å–æ–±–∞–∫–∞': '—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫—É': '—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫–µ': '—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫–∏': '—Å–æ–±–∞–∫–∞', '—Å–æ–±–∞–∫–æ–π': '—Å–æ–±–∞–∫–∞',
        '–ø–µ—Å': '—Å–æ–±–∞–∫–∞', '–ø—Å–∞': '—Å–æ–±–∞–∫–∞', '–ø—Å—É': '—Å–æ–±–∞–∫–∞', '–ø—Å–æ–º': '—Å–æ–±–∞–∫–∞',
        '—É—Ç–∫–∞': '—É—Ç–∫–∞', '—É—Ç–∫—É': '—É—Ç–∫–∞', '—É—Ç–∫–µ': '—É—Ç–∫–∞', '—É—Ç–∫–∏': '—É—Ç–∫–∞', '—É—Ç–∫–æ–π': '—É—Ç–∫–∞', '—É—Ç–æ–∫': '—É—Ç–∫–∞',
        '–ø—Ç–∏—Ü–∞': '–ø—Ç–∏—Ü–∞', '–ø—Ç–∏—Ü—É': '–ø—Ç–∏—Ü–∞', '–ø—Ç–∏—Ü–µ': '–ø—Ç–∏—Ü–∞', '–ø—Ç–∏—Ü—ã': '–ø—Ç–∏—Ü–∞', '–ø—Ç–∏—Ü–µ–π': '–ø—Ç–∏—Ü–∞', '–ø—Ç–∏—Ü': '–ø—Ç–∏—Ü–∞',
        '—è—â–µ—Ä–∏—Ü–∞': '—è—â–µ—Ä–∏—Ü–∞', '—è—â–µ—Ä–∏—Ü—É': '—è—â–µ—Ä–∏—Ü–∞', '—è—â–µ—Ä–∏—Ü–µ': '—è—â–µ—Ä–∏—Ü–∞', '—è—â–µ—Ä–∏—Ü—ã': '—è—â–µ—Ä–∏—Ü–∞',
        '—Ö–æ–º—è–∫': '—Ö–æ–º—è–∫', '—Ö–æ–º—è–∫–∞': '—Ö–æ–º—è–∫', '—Ö–æ–º—è–∫–µ': '—Ö–æ–º—è–∫', '—Ö–æ–º—è–∫—É': '—Ö–æ–º—è–∫', '—Ö–æ–º—è–∫–æ–º': '—Ö–æ–º—è–∫', '—Ö–æ–º—è–∫–∏': '—Ö–æ–º—è–∫'
      },
      plants: {
        '—Ü–≤–µ—Ç–æ–∫': '—Ü–≤–µ—Ç—ã', '—Ü–≤–µ—Ç–∫–∞': '—Ü–≤–µ—Ç—ã', '—Ü–≤–µ—Ç–∫–µ': '—Ü–≤–µ—Ç—ã', '—Ü–≤–µ—Ç–∫—É': '—Ü–≤–µ—Ç—ã', '—Ü–≤–µ—Ç–∫–æ–º': '—Ü–≤–µ—Ç—ã', '—Ü–≤–µ—Ç—ã': '—Ü–≤–µ—Ç—ã', '—Ü–≤–µ—Ç–æ–≤': '—Ü–≤–µ—Ç—ã',
        '—Ä–∞—Å—Ç–µ–Ω–∏–µ': '—Ä–∞—Å—Ç–µ–Ω–∏—è', '—Ä–∞—Å—Ç–µ–Ω–∏—è': '—Ä–∞—Å—Ç–µ–Ω–∏—è', '—Ä–∞—Å—Ç–µ–Ω–∏—é': '—Ä–∞—Å—Ç–µ–Ω–∏—è', '—Ä–∞—Å—Ç–µ–Ω–∏–µ–º': '—Ä–∞—Å—Ç–µ–Ω–∏—è', '—Ä–∞—Å—Ç–µ–Ω–∏–π': '—Ä–∞—Å—Ç–µ–Ω–∏—è',
        '–º—É—Ö–æ–ª–æ–≤–∫–∞': '–º—É—Ö–æ–ª–æ–≤–∫–∞', '–º—É—Ö–æ–ª–æ–≤–∫—É': '–º—É—Ö–æ–ª–æ–≤–∫–∞', '–º—É—Ö–æ–ª–æ–≤–∫–µ': '–º—É—Ö–æ–ª–æ–≤–∫–∞', '–º—É—Ö–æ–ª–æ–≤–∫–∏': '–º—É—Ö–æ–ª–æ–≤–∫–∞'
      },
      tech: {
        '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–µ': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä',
        '—Ç–µ–ª–∏–∫': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–µ–ª–∏–∫–∞': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–µ–ª–∏–∫—É': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä',
        '–∫–æ–º–ø—å—é—Ç–µ—Ä': '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä–∞': '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä–µ': '–∫–æ–º–ø—å—é—Ç–µ—Ä',
        '–∫–æ–º–ø': '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∫–æ–º–ø–∞': '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∫–æ–º–ø—É': '–∫–æ–º–ø—å—é—Ç–µ—Ä'
      },
      places: {
        '–µ–≥–∏–ø–µ—Ç': '–ï–≥–∏–ø–µ—Ç', '–µ–≥–∏–ø—Ç–∞': '–ï–≥–∏–ø–µ—Ç', '–µ–≥–∏–ø—Ç–µ': '–ï–≥–∏–ø–µ—Ç', '–µ–≥–∏–ø—Ç—É': '–ï–≥–∏–ø–µ—Ç', '–µ–≥–∏–ø—Ç–æ–º': '–ï–≥–∏–ø–µ—Ç',
        '–ø–∏—Ç–µ—Ä': '–ü–∏—Ç–µ—Ä', '–ø–∏—Ç–µ—Ä–∞': '–ü–∏—Ç–µ—Ä', '–ø–∏—Ç–µ—Ä–µ': '–ü–∏—Ç–µ—Ä', '–ø–µ—Ç–µ—Ä–±—É—Ä–≥': '–ü–∏—Ç–µ—Ä'
      },
      objects: {
        '–∫—Ä–æ–≤–∞—Ç—å': '–∫—Ä–æ–≤–∞—Ç—å', '–∫—Ä–æ–≤–∞—Ç–∏': '–∫—Ä–æ–≤–∞—Ç—å', '–∫—Ä–æ–≤–∞—Ç–µ': '–∫—Ä–æ–≤–∞—Ç—å',
        '–º–∞—à–∏–Ω–∞': '–º–∞—à–∏–Ω–∞', '–º–∞—à–∏–Ω—ã': '–º–∞—à–∏–Ω–∞', '–º–∞—à–∏–Ω–µ': '–º–∞—à–∏–Ω–∞', '–º–∞—à–∏–Ω—É': '–º–∞—à–∏–Ω–∞',
        '–∞–≤—Ç–æ': '–º–∞—à–∏–Ω–∞', '—Ç–∞—á–∫–∞': '–º–∞—à–∏–Ω–∞', '—Ç–∞—á–∫—É': '–º–∞—à–∏–Ω–∞', '—Ç–∞—á–∫–µ': '–º–∞—à–∏–Ω–∞',
        '–∫–∞—Ä—Ç–∏–Ω–≥': '–∫–∞—Ä—Ç–∏–Ω–≥', '–∫–∞—Ä—Ç–∏–Ω–≥–∞': '–∫–∞—Ä—Ç–∏–Ω–≥', '–∫–∞—Ä—Ç–∏–Ω–≥–µ': '–∫–∞—Ä—Ç–∏–Ω–≥'
      }
    };
    
    return normalizations[category]?.[word] || word;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
   */
  private extractEmotionalKeywords(text: string, emotion: string): string[] {
    const lowerText = text.toLowerCase();
    const keywords: string[] = [];
    
    // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–π
    const emotionalPatterns: { [key: string]: string[] } = {
      'excited': ['–∫—Ä—É—Ç', '—Å—É–ø–µ—Ä', '–æ—Ñ–∏–≥', '–∑–±—Å', '–∞—Ö—É–µ–Ω', '–ø–∏–∑–¥', '—Ç–æ–ø', '–æ–≥–æ–Ω—å'],
      'funny': ['—Å–º–µ—Ö', '—Ä–∂–∞–∫', '–ø—Ä–∏–∫–æ–ª', '—É–º–æ—Ä', '—Ö–æ—Ö–º', '—Å—Ç–µ–±', '—é–º–æ—Ä'],
      'angry': ['–∑–ª–æ–π', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞', '–∑–∞–¥–æ–ª–±', '–¥–æ—Å—Ç', '—Ö–µ—Ä–Ω', '–≥–æ–≤–Ω'],
      'sad': ['–≥—Ä—É—Å—Ç', '–ø–µ—á–∞–ª', '—Ä–∞—Å—Å—Ç—Ä–æ', '–ø–ª–æ—Ö', '—Ç–æ—Å–∫', '–∂–∞–ª']
    };
    
    const patterns = emotionalPatterns[emotion] || [];
    
    // –ò—â–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä–Ω–∏
    const words = lowerText
      .replace(/[^\w\s–∞-—è—ë]/gi, ' ')
      .split(/\s+/)
      .filter(word => word.length >= 4);
    
    for (const word of words) {
      for (const pattern of patterns) {
        if (word.includes(pattern) && word.length >= 4) {
          keywords.push(word);
          break;
        }
      }
    }
    
    return keywords.slice(0, 1);
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ (fallback –º–µ—Ç–æ–¥)
   */
  private extractTopicsFromText(text: string): string[] {
    const words = text.toLowerCase()
      .replace(/[^\w\s–∞-—è—ë]/gi, ' ')
      .split(/\s+/)
      .filter(word => word.length >= 4);
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ)
    const topicStopWords = new Set([
      // –ò–º–µ–Ω–∞ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
      '—Å–∞–Ω—è', '–≥–µ–π—Å–∞–Ω–¥—Ä', '–∫—É–ª–æ–≤–∏—á', '–±–æ–≥–¥–∞–Ω', '–≤–æ–ª–æ–¥—è', '–≤–∞–Ω–æ', '–ª–µ–Ω—è', '–º–∞–∫—Å–∏–º',
      
      // –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
      '–∫–∞–∫–æ–π', '—Ç–∞–∫–æ–π', '–≤–∞–∂–Ω—ã–π', '—Ö–æ—Ä–æ—à–∏–π', '–ø–ª–æ—Ö–æ–π', '–±–æ–ª—å—à–æ–π', '–º–∞–ª–µ–Ω—å–∫–∏–π',
      '–∫—Ä–∞—Å–∏–≤—ã–π', '—É–º–Ω—ã–π', '–≥–ª—É–ø—ã–π', '–Ω–æ–≤—ã–π', '—Å—Ç–∞—Ä—ã–π', '–º–æ–ª–æ–¥–æ–π',
      
      // –ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞
      '–≤—Ä–æ–¥–µ', '–¥—É–º–∞—é', '–Ω–æ—Ä–º', '–≤–∞—â–µ', '–æ–Ω–ª–∞–π–Ω', '—Ä–µ–∞–ª—å–Ω–æ', '—Ç–æ–ª—å–∫–æ', '–≥–æ–≤–æ—Ä–∏–ª', '–ø–æ–º–Ω—é',
      '–±—ã–ª–∞', '–±—ã–ª–∏', '–µ—Å—Ç—å', '–±—É–¥–µ—Ç', '–º–æ–∂–µ—Ç', '–æ—á–µ–Ω—å', '—Ç–æ–∂–µ', '—Ç–µ–±—è', '–º–µ–Ω—è', '–Ω–µ–≥–æ',
      '—ç—Ç–æ—Ç', '—ç—Ç–æ–≥–æ', '—ç—Ç–æ–º—É', '—ç—Ç–æ–π', '—ç—Ç–∏—Ö', '—Ç–æ–≥–æ', '—Ç–æ–º—É', '—Ç–µ–º–∏', 'them',
      
      // –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Å–≤—è–∑–∫–∏
      '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä–æ–µ', '–∫–æ—Ç–æ—Ä—ã–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–æ—Ç–∫—É–¥–∞',
      '—á–µ–≥–æ', '—á–µ–º—É', '—á–µ–º', '—á—Ç–æ', '–≥–¥–µ', '–∫–∞–∫', '–∏–ª–∏', '—Ç–µ–º', '–¥–ª—è'
    ]);
    
    // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ)
    const potentialTopics = words.filter(word => {
      // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
      if (topicStopWords.has(word)) return false;
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
      if (word.length < 5) return false;
      
      // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–∞ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏ (—Ç–∏–ø–∞ "–∞–∞–∞–∞–∞")
      if (/(.)\1{2,}/.test(word)) return false;
      
      return true;
    });
    
    return potentialTopics.slice(0, 2);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private extractMentions(text: string): string[] {
    const mentions = text.match(/@(\w+)/g);
    return mentions ? mentions.map(m => m.slice(1)) : [];
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private updateTopicInDatabase(topic: string, author: string): void {
    if (!this.memoryManager || !this.chatId) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const existingTopic = (this.memoryManager as any).db.prepare(`
        SELECT * FROM chat_topics WHERE chat_id = ? AND topic = ?
      `).get(this.chatId, topic) as any;
      
      if (existingTopic) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
        (this.memoryManager as any).db.prepare(`
          UPDATE chat_topics 
          SET last_mentioned = CURRENT_TIMESTAMP,
              mention_count = mention_count + 1,
              importance = MIN(1.0, importance + 0.1)
          WHERE chat_id = ? AND topic = ?
        `).run(this.chatId, topic);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        (this.memoryManager as any).db.prepare(`
          INSERT INTO chat_topics (
            chat_id, topic, first_mentioned, last_mentioned,
            mention_count, related_users, importance, status
          ) VALUES (?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, ?, 0.5, 'active')
        `).run(this.chatId, topic, JSON.stringify([author]));
      }
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã:', error);
    }
  }


  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
   */
  private isDirectMention(text: string): boolean {
    const lowerText = text.toLowerCase();
    const botMentions = [
      '–≥–µ–π—Å–∞–Ω–¥—Ä', '–≥–µ—è—Å–∞–Ω–¥—Ä', '–≥–µ–π—Å', '–≥–µ—è—Å',
      '–∫—É–ª–æ–≤–∏—á', '–∫—É–ª—ã—á', '–∫—É–ª–∏—á',
      '–≥–µ–π—Å–∞–Ω–¥—Ä –∫—É–ª–æ–≤–∏—á', '–≥–µ—è—Å–∞–Ω–¥—Ä –∫—É–ª–æ–≤–∏—á',
      '—Å–∞–Ω—è', '—Å–∞–Ω—è', '—Å–∞–Ω—å', '—Å–∞–Ω–µ–∫', '—Å–∞–Ω–∏–∫', '—Å–∞–Ω—á–æ', '—à—É—Ä–∞', '—à—É—Ä–∏–∫',
      '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–∞–ª–µ–∫—Å', '–ª–µ–∫—Å', '—Å–∞—à–∞', '—Å–∞—à–∫–∞', '—Å–∞—à–æ–∫',
      '@'
    ];
    
    return botMentions.some(mention => lowerText.includes(mention));
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private findMatchingPattern(messageText: string): TriggerPattern | null {
    const lowerText = messageText.toLowerCase();
    const matchingPatterns: Array<{ pattern: TriggerPattern; score: number }> = [];

    for (const pattern of this.personality.patterns) {
      let score = 0;
      
      for (const keyword of pattern.keywords) {
        if (lowerText.includes(keyword.toLowerCase())) {
          score += pattern.weight;
        }
      }

      if (score > 0) {
        matchingPatterns.push({ pattern, score });
      }
    }

    if (matchingPatterns.length === 0) return null;

    matchingPatterns.sort((a, b) => b.score - a.score);
    return matchingPatterns[0].pattern;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞–º—è—Ç–∏
   */
  getContextStats() {
    const baseStats = {
      recentMessagesCount: this.context.recentMessages.length,
      activeUsersCount: this.context.activeUsers.size,
      messagesSinceLastResponse: this.context.messagesSinceLastResponse,
      lastBotResponse: this.context.lastBotResponse,
      aiModel: this.aiEngine.getModelInfo(),
      aiMode: config.aiMode
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
    if (this.memoryManager) {
      const memoryStats = this.memoryManager.getMemoryStats();
      return {
        ...baseStats,
        memory: memoryStats
      };
    }

    return baseStats;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  public getRecentMessages(): string[] {
    return this.context.recentMessages.slice(-5).map(msg => `${msg.author}: ${msg.text}`);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI engine)
   */
  public getUserProfile(userName: string): any | undefined {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–æ–º –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    return undefined;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞
   */
  public getPersonality(): BotPersonality {
    return this.personality;
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  close(): void {
    if (this.memoryManager) {
      this.memoryManager.close();
    }
    if (this.activityManager) {
      this.activityManager.close();
    }
  }
}