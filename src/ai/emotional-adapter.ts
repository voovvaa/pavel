import { Logger } from '../utils/logger.js';
import { EmotionAnalysis, EmotionalProfile, GroupEmotionalState } from './emotion-analyzer.js';
import { MemoryContext } from '../core/types.js';

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≠–¢–ê–ü 8)
 * 
 * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ø–æ–¥:
 * - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –ì—Ä—É–ø–ø–æ–≤—É—é –¥–∏–Ω–∞–º–∏–∫—É
 * - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
 * - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */

export interface EmotionalAdaptation {
  // –°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
  responseStyle: {
    tone: 'supportive' | 'playful' | 'serious' | 'neutral' | 'calming' | 'energetic';
    formality: number;     // 0-1 (–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π - —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)
    energy: number;        // 0-1 (—Å–ø–æ–∫–æ–π–Ω—ã–π - —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π)  
    empathy: number;       // 0-1 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π)
    humor: number;         // 0-1 (—Å–µ—Ä—å–µ–∑–Ω—ã–π - –≤–µ—Å–µ–ª—ã–π)
  };
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—â–µ–Ω–∏—è
  strategies: {
    shouldComfort: boolean;        // –£—Ç–µ—à–∞—Ç—å –ø—Ä–∏ –≥—Ä—É—Å—Ç–∏
    shouldDeescalate: boolean;     // –£—Å–ø–æ–∫–∞–∏–≤–∞—Ç—å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
    shouldEnergize: boolean;       // –ü–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    shouldMatchEnergy: boolean;    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –≥—Ä—É–ø–ø—ã
    shouldBeMediator: boolean;     // –í—ã—Å—Ç—É–ø–∞—Ç—å –º–µ–¥–∏–∞—Ç–æ—Ä–æ–º
  };
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI
  promptAdjustments: {
    emotionalContext: string;      // –ö–æ–Ω—Ç–µ–∫—Å—Ç —ç–º–æ—Ü–∏–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    behaviorInstructions: string;  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    avoidTopics?: string[];        // –¢–µ–º—ã –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –∏–∑–±–µ–∂–∞—Ç—å
    emphasizeTopics?: string[];    // –¢–µ–º—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è
  };
  
  // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
  responseModifier: number; // 0-2 (–º–Ω–æ–∂–∏—Ç–µ–ª—å –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞)
}

export class EmotionalAdapter {
  
  constructor() {
    Logger.info('üé≠ EmotionalAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏—é
   */
  adaptToEmotionalState(
    currentUser: string,
    userMessage: string,
    memoryContext: MemoryContext
  ): EmotionalAdaptation {
    
    Logger.debug(`üé≠ –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è "${userMessage.substring(0, 30)}..." –æ—Ç ${currentUser}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRelationship = memoryContext.userRelationships.get(currentUser);
    const userProfile = userRelationship?.emotionalProfile;
    const groupState = memoryContext.groupEmotionalState;
    
    // –ë–∞–∑–æ–≤–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    let adaptation: EmotionalAdaptation = {
      responseStyle: {
        tone: 'neutral',
        formality: 0.3,
        energy: 0.5,
        empathy: 0.5,
        humor: 0.4
      },
      strategies: {
        shouldComfort: false,
        shouldDeescalate: false,
        shouldEnergize: false,
        shouldMatchEnergy: true,
        shouldBeMediator: false
      },
      promptAdjustments: {
        emotionalContext: '',
        behaviorInstructions: ''
      },
      responseModifier: 1.0
    };
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile) {
      adaptation = this.adaptToUserProfile(adaptation, userProfile, currentUser);
    }
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    if (groupState) {
      adaptation = this.adaptToGroupState(adaptation, groupState);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —ç–º–æ—Ü–∏–π
    const recentEmotions = this.analyzeRecentEmotions(memoryContext.recentMessages);
    adaptation = this.adaptToRecentEmotions(adaptation, recentEmotions, currentUser);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    adaptation = this.finalizePromptAdjustments(adaptation, currentUser, userProfile, groupState);
    
    Logger.info(`üé≠ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è ${currentUser}: ${adaptation.responseStyle.tone} —Ç–æ–Ω, —ç–º–ø–∞—Ç–∏—è ${(adaptation.responseStyle.empathy * 100).toFixed(0)}%`);
    
    return adaptation;
  }
  
  /**
   * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private adaptToUserProfile(
    adaptation: EmotionalAdaptation,
    profile: EmotionalProfile,
    userName: string
  ): EmotionalAdaptation {
    
    Logger.debug(`üé≠ –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é ${userName}: ${profile.temperament}, —Ä–æ–ª—å: ${profile.socialRole}`);
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç—É
    switch (profile.temperament) {
      case 'sanguine': // –í–µ—Å–µ–ª—å—á–∞–∫
        adaptation.responseStyle.tone = 'playful';
        adaptation.responseStyle.energy = 0.8;
        adaptation.responseStyle.humor = 0.7;
        adaptation.strategies.shouldMatchEnergy = true;
        break;
        
      case 'choleric': // –í—Å–ø—ã–ª—å—á–∏–≤—ã–π
        adaptation.responseStyle.tone = 'serious';
        adaptation.responseStyle.formality = 0.6;
        adaptation.strategies.shouldDeescalate = true;
        adaptation.responseStyle.empathy = 0.7;
        break;
        
      case 'melancholic': // –ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫
        adaptation.responseStyle.tone = 'supportive';
        adaptation.responseStyle.empathy = 0.9;
        adaptation.responseStyle.energy = 0.3;
        adaptation.strategies.shouldComfort = true;
        break;
        
      case 'phlegmatic': // –°–ø–æ–∫–æ–π–Ω—ã–π
        adaptation.responseStyle.tone = 'neutral';
        adaptation.responseStyle.formality = 0.5;
        adaptation.responseStyle.energy = 0.4;
        break;
    }
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏
    switch (profile.socialRole) {
      case 'entertainer':
        adaptation.responseStyle.humor = Math.min(adaptation.responseStyle.humor + 0.3, 1.0);
        adaptation.responseStyle.energy = Math.min(adaptation.responseStyle.energy + 0.2, 1.0);
        break;
        
      case 'supporter':
        adaptation.responseStyle.empathy = Math.min(adaptation.responseStyle.empathy + 0.3, 1.0);
        adaptation.responseStyle.tone = 'supportive';
        break;
        
      case 'challenger':
        adaptation.responseStyle.formality = Math.min(adaptation.responseStyle.formality + 0.2, 1.0);
        adaptation.strategies.shouldDeescalate = true;
        break;
        
      case 'leader':
        adaptation.responseStyle.formality = Math.min(adaptation.responseStyle.formality + 0.3, 1.0);
        adaptation.responseStyle.tone = 'serious';
        break;
        
      case 'mediator':
        adaptation.strategies.shouldBeMediator = true;
        adaptation.responseStyle.empathy = Math.min(adaptation.responseStyle.empathy + 0.2, 1.0);
        break;
        
      case 'observer':
        adaptation.responseModifier *= 0.7; // –ú–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å
        adaptation.responseStyle.formality = Math.min(adaptation.responseStyle.formality + 0.1, 1.0);
        break;
    }
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (profile.expressiveness > 0.7) {
      // –û—á–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      adaptation.responseStyle.energy = Math.min(adaptation.responseStyle.energy + 0.2, 1.0);
      adaptation.responseModifier *= 1.3; // –ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å
    } else if (profile.expressiveness < 0.3) {
      // –ú–∞–ª–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      adaptation.responseStyle.energy = Math.max(adaptation.responseStyle.energy - 0.2, 0.0);
      adaptation.responseStyle.formality = Math.min(adaptation.responseStyle.formality + 0.2, 1.0);
    }
    
    return adaptation;
  }
  
  /**
   * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥ –≥—Ä—É–ø–ø–æ–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  private adaptToGroupState(
    adaptation: EmotionalAdaptation,
    groupState: GroupEmotionalState
  ): EmotionalAdaptation {
    
    Logger.debug(`üé≠ –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: ${groupState.groupMood.dominant}, –≥–∞—Ä–º–æ–Ω–∏—è: ${(groupState.dynamics.harmony * 100).toFixed(0)}%`);
    
    const { groupMood, dynamics, conflicts } = groupState;
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –æ–±—â–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –≥—Ä—É–ø–ø—ã
    switch (groupMood.dominant) {
      case 'joy':
      case 'playful':
        adaptation.responseStyle.tone = 'playful';
        adaptation.responseStyle.humor = Math.min(adaptation.responseStyle.humor + 0.3, 1.0);
        adaptation.responseStyle.energy = Math.min(adaptation.responseStyle.energy + 0.3, 1.0);
        break;
        
      case 'sadness':
      case 'melancholic':
        adaptation.responseStyle.tone = 'supportive';
        adaptation.responseStyle.empathy = Math.min(adaptation.responseStyle.empathy + 0.4, 1.0);
        adaptation.strategies.shouldComfort = true;
        break;
        
      case 'anger':
      case 'tension':
        adaptation.responseStyle.tone = 'calming';
        adaptation.strategies.shouldDeescalate = true;
        adaptation.responseStyle.energy = Math.max(adaptation.responseStyle.energy - 0.3, 0.0);
        break;
        
      case 'excitement':
      case 'energetic':
        adaptation.responseStyle.tone = 'energetic';
        adaptation.responseStyle.energy = Math.min(adaptation.responseStyle.energy + 0.4, 1.0);
        adaptation.strategies.shouldMatchEnergy = true;
        break;
    }
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏–∏
    if (dynamics.harmony < 0.4) {
      // –ù–∏–∑–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è - –Ω—É–∂–Ω–æ –º–∏—Ä–∏—Ç—å
      adaptation.strategies.shouldBeMediator = true;
      adaptation.responseStyle.empathy = Math.min(adaptation.responseStyle.empathy + 0.3, 1.0);
      adaptation.responseStyle.tone = 'supportive';
      Logger.debug('üïäÔ∏è –ù–∏–∑–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è –≥—Ä—É–ø–ø—ã - –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –º–µ–¥–∏–∞—Ç–æ—Ä–∞');
    }
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å
    if (dynamics.tension > 0.6) {
      adaptation.strategies.shouldDeescalate = true;
      adaptation.responseStyle.tone = 'calming';
      adaptation.responseStyle.humor = Math.max(adaptation.responseStyle.humor - 0.2, 0.0);
      Logger.debug('‚ö° –í—ã—Å–æ–∫–∞—è –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å - –≤–∫–ª—é—á–∞–µ–º —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π —Ä–µ–∂–∏–º');
    }
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–∏–∑–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –≥—Ä—É–ø–ø—ã
    if (dynamics.energy < 0.3) {
      adaptation.strategies.shouldEnergize = true;
      adaptation.responseStyle.tone = 'energetic';
      adaptation.responseStyle.energy = Math.min(adaptation.responseStyle.energy + 0.3, 1.0);
      Logger.debug('üîã –ù–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –≥—Ä—É–ø–ø—ã - –ø—ã—Ç–∞–µ–º—Å—è –≤–∑–±–æ–¥—Ä–∏—Ç—å');
    }
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if (conflicts.length > 0) {
      const activeConflicts = conflicts.filter(c => c.status === 'active');
      if (activeConflicts.length > 0) {
        adaptation.strategies.shouldBeMediator = true;
        adaptation.strategies.shouldDeescalate = true;
        adaptation.responseStyle.tone = 'calming';
        adaptation.responseModifier *= 1.5; // –ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        
        // –ò–∑–±–µ–≥–∞–µ–º —Å–ø–æ—Ä–Ω—ã—Ö —Ç–µ–º
        adaptation.promptAdjustments.avoidTopics = activeConflicts
          .filter(c => c.topic)
          .map(c => c.topic!);
          
        Logger.debug(`‚öîÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${activeConflicts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - —Ä–µ–∂–∏–º –º–∏—Ä–æ—Ç–≤–æ—Ä—Ü–∞`);
      }
    }
    
    return adaptation;
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –≤ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
   */
  private analyzeRecentEmotions(recentMessages: any[]): {
    dominantEmotion: string;
    intensity: number;
    trend: 'improving' | 'worsening' | 'stable';
  } {
    if (recentMessages.length === 0) {
      return { dominantEmotion: 'neutral', intensity: 0, trend: 'stable' };
    }
    
    const emotions = recentMessages
      .filter(msg => msg.emotion && msg.emotion !== 'neutral')
      .map(msg => msg.emotion);
    
    if (emotions.length === 0) {
      return { dominantEmotion: 'neutral', intensity: 0, trend: 'stable' };
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
    const emotionCounts: { [key: string]: number } = {};
    emotions.forEach(emotion => {
      emotionCounts[emotion] = (emotionCounts[emotion] || 0) + 1;
    });
    
    const dominantEmotion = Object.entries(emotionCounts)
      .sort(([,a], [,b]) => b - a)[0][0];
    
    const intensity = Math.min(emotions.length / recentMessages.length, 1.0);
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É)
    const mid = Math.floor(emotions.length / 2);
    const firstHalf = emotions.slice(0, mid);
    const secondHalf = emotions.slice(mid);
    
    const positiveFirst = firstHalf.filter(e => ['positive', 'joy', 'excited', 'funny'].includes(e)).length;
    const positiveSecond = secondHalf.filter(e => ['positive', 'joy', 'excited', 'funny'].includes(e)).length;
    
    let trend: 'improving' | 'worsening' | 'stable' = 'stable';
    if (positiveSecond > positiveFirst) trend = 'improving';
    else if (positiveSecond < positiveFirst) trend = 'worsening';
    
    return { dominantEmotion, intensity, trend };
  }
  
  /**
   * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–µ–¥–∞–≤–Ω–∏–º —ç–º–æ—Ü–∏—è–º
   */
  private adaptToRecentEmotions(
    adaptation: EmotionalAdaptation,
    recentEmotions: { dominantEmotion: string; intensity: number; trend: string },
    currentUser: string
  ): EmotionalAdaptation {
    
    const { dominantEmotion, intensity, trend } = recentEmotions;
    
    Logger.debug(`üé≠ –ù–µ–¥–∞–≤–Ω–∏–µ —ç–º–æ—Ü–∏–∏: ${dominantEmotion} (${(intensity * 100).toFixed(0)}%), —Ç—Ä–µ–Ω–¥: ${trend}`);
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
    switch (dominantEmotion) {
      case 'sad':
      case 'negative':
        adaptation.strategies.shouldComfort = true;
        adaptation.responseStyle.empathy = Math.min(adaptation.responseStyle.empathy + 0.4, 1.0);
        adaptation.responseStyle.tone = 'supportive';
        break;
        
      case 'angry':
        adaptation.strategies.shouldDeescalate = true;
        adaptation.responseStyle.tone = 'calming';
        adaptation.responseStyle.empathy = Math.min(adaptation.responseStyle.empathy + 0.3, 1.0);
        break;
        
      case 'excited':
      case 'positive':
        adaptation.strategies.shouldMatchEnergy = true;
        adaptation.responseStyle.energy = Math.min(adaptation.responseStyle.energy + 0.3, 1.0);
        adaptation.responseStyle.tone = 'playful';
        break;
        
      case 'funny':
        adaptation.responseStyle.humor = Math.min(adaptation.responseStyle.humor + 0.4, 1.0);
        adaptation.responseStyle.tone = 'playful';
        break;
    }
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Ç—Ä–µ–Ω–¥
    if (trend === 'worsening') {
      adaptation.strategies.shouldComfort = true;
      adaptation.strategies.shouldEnergize = true;
      adaptation.responseModifier *= 1.3; // –ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å
    } else if (trend === 'improving') {
      adaptation.strategies.shouldMatchEnergy = true;
      adaptation.responseStyle.energy = Math.min(adaptation.responseStyle.energy + 0.2, 1.0);
    }
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–π
    if (intensity > 0.7) {
      // –í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
      adaptation.responseModifier *= 1.4;
      adaptation.responseStyle.empathy = Math.min(adaptation.responseStyle.empathy + 0.2, 1.0);
    }
    
    return adaptation;
  }
  
  /**
   * –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç-–∞–¥–∞–ø—Ç–∞—Ü–∏–∏
   */
  private finalizePromptAdjustments(
    adaptation: EmotionalAdaptation,
    currentUser: string,
    userProfile?: EmotionalProfile,
    groupState?: GroupEmotionalState
  ): EmotionalAdaptation {
    
    let emotionalContext = '';
    let behaviorInstructions = '';
    
    // –°—Ç—Ä–æ–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (userProfile) {
      emotionalContext += `${currentUser} - ${this.getTemperamentDescription(userProfile.temperament)}, `;
      emotionalContext += `—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–æ–ª—å: ${this.getSocialRoleDescription(userProfile.socialRole)}. `;
      
      if (userProfile.typicalEmotions.length > 0) {
        emotionalContext += `–û–±—ã—á–Ω–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç: ${userProfile.typicalEmotions.join(', ')}. `;
      }
    }
    
    if (groupState) {
      emotionalContext += `–û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–∞—Ç–∞: ${groupState.groupMood.dominant}. `;
      
      if (groupState.dynamics.harmony < 0.5) {
        emotionalContext += '–í —á–∞—Ç–µ –ø–æ–Ω–∏–∂–µ–Ω–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è. ';
      }
      
      if (groupState.dynamics.tension > 0.5) {
        emotionalContext += '–û—â—É—â–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏. ';
      }
      
      if (groupState.conflicts.length > 0) {
        emotionalContext += `–ï—Å—Ç—å ${groupState.conflicts.length} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. `;
      }
    }
    
    // –°—Ç—Ä–æ–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    const style = adaptation.responseStyle;
    
    switch (style.tone) {
      case 'supportive':
        behaviorInstructions += '–ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º. ';
        break;
      case 'playful':
        behaviorInstructions += '–ò—Å–ø–æ–ª—å–∑—É–π –∏–≥—Ä–∏–≤—ã–π, –≤–µ—Å–µ–ª—ã–π —Ç–æ–Ω. ';
        break;
      case 'serious':
        behaviorInstructions += '–û—Ç–≤–µ—á–∞–π —Å–µ—Ä—å–µ–∑–Ω–æ –∏ –æ–±–¥—É–º–∞–Ω–Ω–æ. ';
        break;
      case 'calming':
        behaviorInstructions += '–ò—Å–ø–æ–ª—å–∑—É–π —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π, –º–∏—Ä–Ω—ã–π —Ç–æ–Ω. ';
        break;
      case 'energetic':
        behaviorInstructions += '–ë—É–¥—å —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. ';
        break;
    }
    
    if (style.empathy > 0.7) {
      behaviorInstructions += '–ü—Ä–æ—è–≤–ª—è–π –±–æ–ª—å—à–µ —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è. ';
    }
    
    if (style.humor > 0.7) {
      behaviorInstructions += '–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —é–º–æ—Ä –∏ —à—É—Ç–∫–∏. ';
    }
    
    if (style.formality > 0.6) {
      behaviorInstructions += '–î–µ—Ä–∂–∏ –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è. ';
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const strategies = adaptation.strategies;
    
    if (strategies.shouldComfort) {
      behaviorInstructions += '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —É—Ç–µ—à–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. ';
    }
    
    if (strategies.shouldDeescalate) {
      behaviorInstructions += '–ü–æ–º–æ–≥–∏ —É—Å–ø–æ–∫–æ–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, –∏–∑–±–µ–≥–∞–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–π. ';
    }
    
    if (strategies.shouldEnergize) {
      behaviorInstructions += '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–∞. ';
    }
    
    if (strategies.shouldBeMediator) {
      behaviorInstructions += '–í—ã—Å—Ç—É–ø–∏ –≤ —Ä–æ–ª–∏ –º–∏—Ä–æ—Ç–≤–æ—Ä—Ü–∞, –ø–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å. ';
    }
    
    adaptation.promptAdjustments = {
      emotionalContext: emotionalContext.trim(),
      behaviorInstructions: behaviorInstructions.trim(),
      avoidTopics: adaptation.promptAdjustments.avoidTopics || [],
      emphasizeTopics: adaptation.promptAdjustments.emphasizeTopics || []
    };
    
    return adaptation;
  }
  
  private getTemperamentDescription(temperament: string): string {
    switch (temperament) {
      case 'sanguine': return '–≤–µ—Å–µ–ª—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π';
      case 'choleric': return '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –≤—Å–ø—ã–ª—å—á–∏–≤—ã–π';
      case 'melancholic': return '–∑–∞–¥—É–º—á–∏–≤—ã–π –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π';
      case 'phlegmatic': return '—Å–ø–æ–∫–æ–π–Ω—ã–π –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π';
      default: return '—Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–æ–º';
    }
  }
  
  private getSocialRoleDescription(role: string): string {
    switch (role) {
      case 'entertainer': return '—Ä–∞–∑–≤–ª–µ–∫–∞–µ—Ç –≥—Ä—É–ø–ø—É';
      case 'supporter': return '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏—Ö';
      case 'challenger': return '–ª—é–±–∏—Ç –¥–∏—Å–∫—É—Å—Å–∏–∏';
      case 'leader': return '–ª–∏–¥–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏–π';
      case 'mediator': return '–º–∏—Ä–æ—Ç–≤–æ—Ä–µ—Ü';
      case 'observer': return '–±–æ–ª—å—à–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç';
      default: return '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–æ–ª—å';
    }
  }
}