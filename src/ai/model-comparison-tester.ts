import { ResponseEngine } from './response-engine.js';
import { UserProfiler } from '../analysis/user-profiler.js';
import { Logger } from '../utils/logger.js';
import { validateConfig } from '../core/config.js';
import { promises as fs } from 'fs';

async function main() {
  try {
    validateConfig();
    
    const personalityPath = 'chat/result_personality.json';
    const chatId = '316537427';
    
    try {
      await fs.access(personalityPath);
    } catch {
      Logger.error(`–§–∞–π–ª –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${personalityPath}`);
      Logger.error('–°–æ–∑–¥–∞–π—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–æ–π: bun run patterns result_analysis.json');
      process.exit(1);
    }

    console.log('\n' + '='.repeat(80));
    console.log('üÜö –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô: GPT-5 NANO vs CHAT-LATEST');
    console.log('='.repeat(80));
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å
    const personalityData = JSON.parse(await fs.readFile(personalityPath, 'utf-8'));
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä
    const profiler = new UserProfiler(chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const profiles = await profiler.analyzeAllUsers();
    const topUser = profiles.sort((a, b) => b.messageCount - a.messageCount)[0];
    
    console.log(`\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${topUser.userName}`);
    console.log(`‚îú‚îÄ –§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: ${(topUser.communicationStyle.formalityLevel * 100).toFixed(0)}%`);
    console.log(`‚îú‚îÄ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${(topUser.communicationStyle.emotionalExpression * 100).toFixed(0)}%`);
    console.log(`‚îú‚îÄ –Æ–º–æ—Ä: ${(topUser.socialBehavior.humor * 100).toFixed(0)}%`);
    console.log(`‚îî‚îÄ –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${topUser.interests.topTopics.slice(0, 2).map(t => t.topic).join(', ')}\n`);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const testMessages = [
      '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',
      '–ß—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?', 
      '–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ',
      '–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?'
    ];
    
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const models = [
      { 
        name: 'GPT-5 Nano', 
        value: 'gpt-5-nano',
        description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è' 
      },
      { 
        name: 'GPT-5 Chat Latest', 
        value: 'gpt-5-chat-latest',
        description: '–°–∞–º–∞—è —É–º–Ω–∞—è –±–µ–∑ reasoning —Ç–æ–∫–µ–Ω–æ–≤' 
      }
    ];
    
    for (const message of testMessages) {
      console.log(`\n${'='.repeat(60)}`);
      console.log(`üí¨ "${message}"`);
      console.log('‚îÄ'.repeat(60));
      
      for (const model of models) {
        console.log(`\nü§ñ ${model.name} (${model.description}):`);
        
        try {
          // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
          const originalModel = process.env.OPENAI_MODEL;
          process.env.OPENAI_MODEL = model.value;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º config –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º AI —Ä–µ–∂–∏–º
          const { config } = await import('../core/config.js');
          (config as any).openaiModel = model.value;
          (config as any).aiMode = 'ai_only'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ AI
          (config as any).aiProbability = 1.0; // 100% AI
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
          const responseEngine = new ResponseEngine(personalityData, chatId);
          
          console.log(`   üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ ${model.value}...`);
          
          const startTime = Date.now();
          const response = await responseEngine.generateResponse(message, topUser.userName, Date.now());
          const endTime = Date.now();
          
          if (response) {
            console.log(`   üí≠ –û—Ç–≤–µ—Ç: "${response}"`);
            console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${endTime - startTime}ms`);
            console.log(`   üìè –î–ª–∏–Ω–∞: ${response.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          } else {
            console.log(`   ü§ê –ù–µ –æ—Ç–≤–µ—Ç–∏–ª`);
          }
          
          responseEngine.close();
          
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
          process.env.OPENAI_MODEL = originalModel;
          
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error}`);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log(`\n${'='.repeat(80)}`);
    console.log('üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô:');
    console.log('');
    console.log('üîç –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:');
    console.log('‚îú‚îÄ üìù –î–ª–∏–Ω—É –∏ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤');
    console.log('‚îú‚îÄ üé≠ –ê–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('‚îú‚îÄ ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞');
    console.log('‚îú‚îÄ üß† –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω—é–∞–Ω—Å–æ–≤');
    console.log('‚îú‚îÄ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (nano –¥–µ—à–µ–≤–ª–µ)');
    console.log('‚îî‚îÄ üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å');
    console.log('');
    console.log('üí° GPT-5 Nano: –±—ã—Å—Ç—Ä—ã–π –∏ —ç–∫–æ–Ω–æ–º–Ω—ã–π –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è');
    console.log('üíé GPT-5 Chat Latest: –±–æ–ª–µ–µ —É–º–Ω—ã–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤');
    console.log('');
    console.log('='.repeat(80));
    console.log('‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('='.repeat(80) + '\n');
    
    profiler.close();
    
  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}