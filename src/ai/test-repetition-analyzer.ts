#!/usr/bin/env bun

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞
 */

import { config } from "../core/config.js";
import { Logger } from "../utils/logger.js";
import { AIEngine } from "./ai-engine.js";
import { BotPersonality, ChatContext } from "../core/types.js";

// –ú–æ–∫–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockPersonality: BotPersonality = {
  patterns: [],
  responseStyle: {
    averageLength: 45,
    commonWords: ["–¥–∞", "–Ω–µ—Ç", "–Ω–æ—Ä–º"],
    commonEmojis: ["üòÑ", "üëç"],
    formalityLevel: 0.2,
    activityLevel: 0.7
  },
  schedule: {
    activeHours: [9, 10, 11, 18, 19, 20],
    activeDays: [1, 2, 3, 4, 5]
  }
};

class RepetitionTester {
  private aiEngine: AIEngine;

  constructor() {
    this.aiEngine = new AIEngine(mockPersonality);
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
   */
  testSimilarity() {
    console.log("\nüß™ –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ê –°–•–û–ñ–ï–°–¢–ò –°–¢–†–û–ö");
    console.log("‚ïê".repeat(50));

    const testCases = [
      // –¢–æ—á–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
      { str1: "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞", str2: "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞", expected: 1.0 },
      
      // –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–æ–∫–∏
      { str1: "–∫–∞–∫ –¥–µ–ª–∞?", str2: "–∫–∞–∫ –¥–µ–ª–∞", expected: 0.9 },
      { str1: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å", str2: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å?", expected: 0.92 },
      
      // –£–º–µ—Ä–µ–Ω–Ω–æ –ø–æ—Ö–æ–∂–∏–µ
      { str1: "–ø—Ä–∏–≤–µ—Ç", str2: "–ø—Ä–∏–≤–µ—Ç–∏–∫", expected: 0.75 },
      { str1: "–∫–∞–∫ –∂–∏–∑–Ω—å", str2: "–∫–∞–∫ –¥–µ–ª–∞", expected: 0.5 },
      
      // –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      { str1: "–ø—Ä–∏–≤–µ—Ç", str2: "–ø–æ–∫–∞", expected: 0.0 },
      { str1: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å", str2: "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", expected: 0.1 }
    ];

    for (const testCase of testCases) {
      const similarity = (this.aiEngine as any).calculateSimilarity(testCase.str1, testCase.str2);
      const passed = Math.abs(similarity - testCase.expected) < 0.2; // –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 20%
      
      console.log(
        `${passed ? "‚úÖ" : "‚ùå"} "${testCase.str1}" ‚Üî "${testCase.str2}"`
      );
      console.log(
        `   –°—Ö–æ–∂–µ—Å—Ç—å: ${similarity.toFixed(3)} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expected})`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
   */
  testRepetitionAnalysis() {
    console.log("\nüîÑ –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ü–û–í–¢–û–†–ï–ù–ò–ô");
    console.log("‚ïê".repeat(50));

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    const testScenarios = [
      {
        name: "–ù–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        messages: [
          { author: "–í–æ–ª–æ–¥—è", text: "–ø—Ä–∏–≤–µ—Ç" },
          { author: "–í–æ–ª–æ–¥—è", text: "–∫–∞–∫ –¥–µ–ª–∞" },
          { author: "–í–æ–ª–æ–¥—è", text: "—á—Ç–æ –Ω–æ–≤–æ–≥–æ" }
        ],
        currentMessage: "–≥–¥–µ —Ç—ã",
        expectedLevel: "none"
      },
      
      {
        name: "–õ–µ–≥–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (2-3 —Ä–∞–∑–∞)",
        messages: [
          { author: "–í–æ–ª–æ–¥—è", text: "–ø—Ä–∏–≤–µ—Ç" },
          { author: "–í–æ–ª–æ–¥—è", text: "–ø—Ä–∏–≤–µ—Ç" },
          { author: "–í–æ–ª–æ–¥—è", text: "–∫–∞–∫ –¥–µ–ª–∞" }
        ],
        currentMessage: "–ø—Ä–∏–≤–µ—Ç",
        expectedLevel: "mild"
      },
      
      {
        name: "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (4-5 —Ä–∞–∑)",
        messages: [
          { author: "–í–æ–ª–æ–¥—è", text: "–≥–¥–µ —Ç—ã" },
          { author: "–í–æ–ª–æ–¥—è", text: "–≥–¥–µ —Ç—ã?" },
          { author: "–í–æ–ª–æ–¥—è", text: "–≥–¥–µ —Ç—ã" },
          { author: "–í–æ–ª–æ–¥—è", text: "–≥–¥–µ —Ç—ã???" }
        ],
        currentMessage: "–≥–¥–µ —Ç—ã",
        expectedLevel: "moderate"
      },
      
      {
        name: "–í—ã—Å–æ–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (6+ —Ä–∞–∑)",
        messages: [
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å!" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å!!" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å!!!" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞" }
        ],
        currentMessage: "–æ—Ç–≤–µ—Ç—å",
        expectedLevel: "high"
      }
    ];

    for (const scenario of testScenarios) {
      console.log(`\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
      
      const context: ChatContext = {
        recentMessages: scenario.messages.map(msg => ({
          text: msg.text,
          author: msg.author,
          timestamp: new Date()
        })),
        activeUsers: new Set(["–í–æ–ª–æ–¥—è"]),
        messagesSinceLastResponse: 0
      };

      const analysis = (this.aiEngine as any).analyzeRepetition(
        scenario.currentMessage,
        "–í–æ–ª–æ–¥—è",
        context
      );

      const passed = analysis.irritationLevel === scenario.expectedLevel;
      
      console.log(`   ${passed ? "‚úÖ" : "‚ùå"} –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${analysis.repetitionCount}`);
      console.log(`   ${passed ? "‚úÖ" : "‚ùå"} –£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è: ${analysis.irritationLevel} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${scenario.expectedLevel})`);
      console.log(`   –î–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç: ${analysis.shouldAdaptPrompt}`);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
   */
  async testResponseGeneration() {
    console.log("\nü§ñ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–û–í –ù–ê –ü–û–í–¢–û–†–ï–ù–ò–Ø");
    console.log("‚ïê".repeat(50));

    if (!config.openaiApiKey) {
      console.log("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
      return;
    }

    const testScenarios = [
      {
        name: "–ü–µ—Ä–≤—ã–π —Ä–∞–∑ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç",
        messages: [
          { author: "–í–æ–ª–æ–¥—è", text: "–∫–∞–∫ –¥–µ–ª–∞ –±—Ä–∞—Ç–∞–Ω" }
        ],
        currentMessage: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å",
        expectedMood: "normal"
      },
      
      {
        name: "–õ–µ–≥–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
        messages: [
          { author: "–í–æ–ª–æ–¥—è", text: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å" },
          { author: "–í–æ–ª–æ–¥—è", text: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å?" },
          { author: "–î—Ä—É–≥–æ–π", text: "–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º" }
        ],
        currentMessage: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å",
        expectedMood: "mild_irritation"
      },
      
      {
        name: "–°–∏–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
        messages: [
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å!" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å!!" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å!!!" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞" },
          { author: "–í–æ–ª–æ–¥—è", text: "–æ—Ç–≤–µ—Ç—å –∂–µ" }
        ],
        currentMessage: "–æ—Ç–≤–µ—Ç—å",
        expectedMood: "high_irritation"
      }
    ];

    for (const scenario of testScenarios) {
      console.log(`\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
      
      const context: ChatContext = {
        recentMessages: scenario.messages.map(msg => ({
          text: msg.text,
          author: msg.author,
          timestamp: new Date()
        })),
        activeUsers: new Set(["–í–æ–ª–æ–¥—è"]),
        messagesSinceLastResponse: 0
      };

      try {
        const response = await this.aiEngine.generateResponse(
          scenario.currentMessage,
          "–í–æ–ª–æ–¥—è",
          context
        );

        if (response) {
          console.log(`   ü§ñ –û—Ç–≤–µ—Ç –ì–µ–π—Å–∞–Ω–¥—Ä–∞: "${response}"`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω –æ—Ç–≤–µ—Ç–∞
          const lowerResponse = response.toLowerCase();
          if (scenario.expectedMood === "high_irritation") {
            const hasIrritation = lowerResponse.includes("–Ω–∞—Ö—É–π") || 
                                lowerResponse.includes("–¥–æ—Å—Ç–∞–ª") || 
                                lowerResponse.includes("–∑–∞–¥–æ–ª–±–∞–ª") ||
                                lowerResponse.includes("–æ—Ö—É–µ–ª");
            console.log(`   ${hasIrritation ? "‚úÖ" : "‚ùå"} –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ`);
          } else if (scenario.expectedMood === "mild_irritation") {
            const hasMildIrritation = lowerResponse.includes("–∂–µ") ||
                                    lowerResponse.includes("–ø–æ–≤—Ç–æ—Ä") ||
                                    lowerResponse.includes("—É–∂–µ –≥–æ–≤–æ—Ä–∏–ª") ||
                                    lowerResponse.includes("–∑–∞—Ü–∏–∫–ª–∏–ª");
            console.log(`   ${hasMildIrritation ? "‚úÖ" : "‚ö†Ô∏è"} –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–µ–≥–∫–æ–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ`);
          } else {
            console.log(`   ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è`);
          }
        } else {
          console.log(`   ‚ùå AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç`);
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error}`);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAllTests() {
    console.log("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê –ü–û–í–¢–û–†–ï–ù–ò–ô");
    console.log("‚ïê".repeat(60));
    console.log(`–ú–æ–¥–µ–ª—å: ${config.openaiModel || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}`);
    console.log(`AI —Ä–µ–∂–∏–º: ${config.aiMode}`);
    
    this.testSimilarity();
    this.testRepetitionAnalysis();
    await this.testResponseGeneration();
    
    console.log("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´");
    console.log("‚ïê".repeat(60));
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const tester = new RepetitionTester();
tester.runAllTests().then(() => {
  process.exit(0);
}).catch((error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
  process.exit(1);
});
