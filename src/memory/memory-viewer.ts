import { MemoryManager } from './memory-manager.js';
import { Logger } from '../utils/logger.js';
import { config } from '../core/config.js';

async function showAllChats() {
  console.log('\n' + '='.repeat(60));
  console.log('üìã –í–°–ï –ß–ê–¢–´ –í –ü–ê–ú–Ø–¢–ò –ì–ï–ô–°–ê–ù–î–†–ê –ö–£–õ–û–í–ò–ß–ê');
  console.log('='.repeat(60));
  
  const tempManager = new MemoryManager('temp');
  try {
    const allChats = (tempManager as any).db.prepare(`
      SELECT 
        chat_id,
        COUNT(*) as message_count,
        COUNT(DISTINCT author) as user_count,
        MIN(timestamp) as first_message,
        MAX(timestamp) as last_message,
        AVG(importance) as avg_importance
      FROM messages 
      GROUP BY chat_id 
      ORDER BY COUNT(*) DESC, MAX(timestamp) DESC
    `).all() as any[];
    
    tempManager.close();
    
    if (allChats.length === 0) {
      console.log('\n‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.');
      return;
    }
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${allChats.length} —á–∞—Ç(–æ–≤):\n`);
    
    allChats.forEach((chat: any, index: number) => {
      const firstMsg = new Date(chat.first_message).toLocaleString('ru-RU');
      const lastMsg = new Date(chat.last_message).toLocaleString('ru-RU');
      const avgImportance = '‚òÖ'.repeat(Math.round(chat.avg_importance * 5));
      
      console.log(`${index + 1}. üí¨ –ß–∞—Ç ID: ${chat.chat_id}`);
      console.log(`   üìä ${chat.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, ${chat.user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log(`   ‚≠ê –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å: ${avgImportance} (${chat.avg_importance.toFixed(2)})`);
      console.log(`   üìÖ –ü–µ—Ä–≤–æ–µ: ${firstMsg}`);
      console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${lastMsg}`);
      console.log('');
    });
    
    console.log('üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:');
    console.log('   bun run memory-stats <chat_id>');
    console.log('\nüí° –î–ª—è –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ:');
    console.log('   bun run memory-stats');
    
  } catch (error) {
    tempManager.close();
    console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
  }
}

async function main() {
  try {
    let chatId = process.argv[2];
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    if (chatId === '--list' || chatId === '-l') {
      await showAllChats();
      return;
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üß† –ü–†–û–°–ú–û–¢–† –ü–ê–ú–Ø–¢–ò –ì–ï–ô–°–ê–ù–î–†–ê –ö–£–õ–û–í–ò–ß–ê');
    console.log('='.repeat(60));
    
    // –ï—Å–ª–∏ chatId –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞–π–¥–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
    if (!chatId) {
      const tempManager = new MemoryManager('temp');
      try {
        const activeChats = (tempManager as any).db.prepare(`
          SELECT chat_id, COUNT(*) as message_count,
                 MAX(timestamp) as last_message
          FROM messages 
          GROUP BY chat_id 
          ORDER BY COUNT(*) DESC, MAX(timestamp) DESC
        `).all() as any[];
        
        tempManager.close();
        
        if (activeChats.length === 0) {
          console.log('\n‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.');
          console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.');
          return;
        }
        
        if (activeChats.length === 1) {
          // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          chatId = activeChats[0].chat_id;
          console.log(`\nüéØ –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: ${chatId}`);
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
          chatId = activeChats[0].chat_id;
          console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ ${activeChats.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:`);
          activeChats.forEach((chat: any, index: number) => {
            const indicator = index === 0 ? 'üëâ' : '  ';
            const lastMsg = new Date(chat.last_message).toLocaleString('ru-RU');
            console.log(`${indicator} ${chat.chat_id}: ${chat.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª.: ${lastMsg})`);
          });
          console.log(`\nüéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: ${chatId}`);
          console.log(`üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞: bun run memory-stats <chat_id>`);
        }
      } catch (error) {
        tempManager.close();
        console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–æ–≤:', error);
        return;
      }
    }
    
    console.log('‚îÄ'.repeat(60));
    const memoryManager = new MemoryManager(chatId);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
    const stats = memoryManager.getMemoryStats();
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ú–Ø–¢–ò:');
    console.log(`‚îú‚îÄ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.totalMessages.toLocaleString()}`);
    console.log(`‚îú‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}`);
    console.log(`‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º: ${stats.activeTopics}`);
    console.log(`‚îî‚îÄ –†–∞–∑–º–µ—Ä –±–∞–∑—ã: ${(stats.databaseSize / 1024 / 1024).toFixed(2)} –ú–ë`);
    
    // –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const recentMessages = memoryManager.getRecentMessages(10);
    console.log('\nüí¨ –ù–ï–î–ê–í–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:');
    recentMessages.forEach(msg => {
      const timeStr = msg.timestamp.toLocaleString('ru-RU');
      const importance = '‚òÖ'.repeat(Math.round(msg.importance * 5));
      console.log(`‚îú‚îÄ [${timeStr}] ${msg.author}: ${msg.content.substring(0, 60)}... ${importance}`);
    });
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã
    const activeTopics = memoryManager.getActiveTopics(5);
    console.log('\nüéØ –ê–ö–¢–ò–í–ù–´–ï –¢–ï–ú–´:');
    activeTopics.forEach(topic => {
      console.log(`‚îú‚îÄ ${topic.topic}: —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ${topic.mentionCount}, –≤–∞–∂–Ω–æ—Å—Ç—å ${topic.importance.toFixed(2)}`);
    });
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log('='.repeat(60) + '\n');
    
    memoryManager.close();

  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–º—è—Ç–∏:', error);
    process.exit(1);
  }
  
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}