import { TelegramParser } from './parser.js';
import { ChatAnalyzer } from './analytics.js';
import { PatternExtractor } from './pattern-extractor.js';
import { Logger } from '../utils/logger.js';
import { promises as fs } from 'fs';

async function main() {
  try {
    const analysisPath = process.argv[2];
    if (!analysisPath) {
      console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞–Ω–∞–ª–∏–∑–∞:');
      console.log('   bun run patterns path/to/result_analysis.json');
      console.log('');
      console.log('üìù –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π:');
      console.log('   bun run analyze path/to/result.json');
      process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
    try {
      await fs.access(analysisPath);
    } catch {
      Logger.error(`–§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${analysisPath}`);
      process.exit(1);
    }

    // –¢–∞–∫–∂–µ –Ω—É–∂–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const originalPath = analysisPath.replace('_analysis.json', '.json');
    try {
      await fs.access(originalPath);
    } catch {
      Logger.error(`–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${originalPath}`);
      Logger.error('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ä—è–¥–æ–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –ª–µ–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π result.json');
      process.exit(1);
    }

    Logger.info('üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    const analyticsData = JSON.parse(await fs.readFile(analysisPath, 'utf-8'));
    const exportData = await TelegramParser.loadExport(originalPath);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const extractor = new PatternExtractor(exportData, analyticsData);
    const personality = extractor.extractPersonality();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏—á–Ω–æ—Å—Ç—å
    const personalityPath = analysisPath.replace('_analysis.json', '_personality.json');
    await fs.writeFile(personalityPath, JSON.stringify(personality, null, 2), 'utf-8');
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n' + '='.repeat(60));
    console.log('üß† –•–ê–†–ê–ö–¢–ï–† –ì–ï–ô–°–ê–ù–î–†–ê –ö–£–õ–û–í–ò–ß–ê');
    console.log('='.repeat(60));
    
    console.log('\nüìä –û–°–û–ë–ï–ù–ù–û–°–¢–ò –•–ê–†–ê–ö–¢–ï–†–ê:');
    console.log(`‚îú‚îÄ –ò–∑—É—á–µ–Ω–æ –º–∞–Ω–µ—Ä –æ–±—â–µ–Ω–∏—è: ${personality.patterns.length}`);
    console.log(`‚îú‚îÄ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ä–µ–ø–ª–∏–∫: ${personality.responseStyle.averageLength} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`‚îú‚îÄ –°—Ç–µ–ø–µ–Ω—å –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏: ${(personality.responseStyle.formalityLevel * 100).toFixed(1)}%`);
    console.log(`‚îî‚îÄ –û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${(personality.responseStyle.activityLevel * 100).toFixed(1)}%`);
    
    console.log('\nüïê –†–ï–ñ–ò–ú –î–ù–Ø:');
    console.log(`‚îú‚îÄ –ê–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Å—ã: ${personality.schedule.activeHours.map(h => h + ':00').join(', ')}`);
    console.log(`‚îî‚îÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏: ${personality.schedule.activeDays.map(d => ['–í—Å','–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'][d]).join(', ')}`);
    
    console.log('\nüéØ –¢–û–ü-10 –õ–Æ–ë–ò–ú–´–• –¢–ï–ú:');
    personality.patterns.slice(0, 10).forEach((pattern, index) => {
      const prefix = index === 9 ? '‚îî‚îÄ' : '‚îú‚îÄ';
      console.log(`${prefix} ${pattern.keywords.join(', ')} ‚Üí ${pattern.responses.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ–∞–∫—Ü–∏–π`);
    });
    
    console.log('\nüìù –ú–ê–ù–ï–†–ê –†–ï–ß–ò:');
    console.log(`‚îú‚îÄ –õ—é–±–∏–º—ã–µ —Å–ª–æ–≤–µ—á–∫–∏: ${personality.responseStyle.commonWords.slice(0, 10).join(', ')}`);
    console.log(`‚îî‚îÄ –õ—é–±–∏–º—ã–µ —Å–º–∞–π–ª—ã: ${personality.responseStyle.commonEmojis.slice(0, 10).join(' ')}`);
    
    console.log('\n' + '='.repeat(60));
    console.log(`üíæ –•–∞—Ä–∞–∫—Ç–µ—Ä –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞ –∑–∞–ø–∏—Å–∞–Ω: ${personalityPath}`);
    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –ø–æ–º–Ω–∏—Ç –∫–∞–∫ —Å–µ–±—è –≤–µ—Å—Ç–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.');
    console.log('='.repeat(60) + '\n');

  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
if (process.argv[1]?.includes('pattern-extractor-cli')) {
  main();
}