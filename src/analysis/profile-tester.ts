import { UserProfiler } from './user-profiler.js';
import { Logger } from '../utils/logger.js';
import { validateConfig } from '../core/config.js';

async function main() {
  try {
    validateConfig();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ chat_id —á—Ç–æ –∏ –≤ –ø–∞–º—è—Ç–∏
    const chatId = '316537427';
    const profiler = new UserProfiler(chatId);
    
    console.log('\n' + '='.repeat(60));
    console.log('üë§ –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('='.repeat(60));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const profiles = await profiler.analyzeAllUsers();
    
    console.log(`\nüìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profiles.length}\n`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const topUsers = profiles
      .sort((a, b) => b.messageCount - a.messageCount)
      .slice(0, 3);
    
    for (let i = 0; i < topUsers.length; i++) {
      const profile = topUsers[i];
      const rank = ['ü•á', 'ü•à', 'ü•â'][i];
      
      console.log(`${rank} ${profiler.getProfileSummary(profile)}\n`);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (i === 0) {
        console.log('üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        console.log(`‚îú‚îÄ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: ${profile.temporalPattern.averageMessagesPerDay.toFixed(1)}`);
        console.log(`‚îú‚îÄ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${profile.averageMessageLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`‚îú‚îÄ –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: ${profile.languageFeatures.vocabularySize} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤`);
        console.log(`‚îú‚îÄ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${profile.activityPattern.peakActivity}:00`);
        console.log(`‚îú‚îÄ –§–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: ${(profile.communicationStyle.formalityLevel * 100).toFixed(0)}%`);
        console.log(`‚îú‚îÄ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${(profile.communicationStyle.emotionalExpression * 100).toFixed(0)}%`);
        console.log(`‚îú‚îÄ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: ${(profile.communicationStyle.initiationRate * 100).toFixed(0)}%`);
        console.log(`‚îú‚îÄ –Æ–º–æ—Ä: ${(profile.socialBehavior.humor * 100).toFixed(0)}%`);
        console.log(`‚îú‚îÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${(profile.socialBehavior.supportiveness * 100).toFixed(0)}%`);
        console.log(`‚îú‚îÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å: ${(profile.socialBehavior.helpfulness * 100).toFixed(0)}%`);
        console.log(`‚îî‚îÄ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ${(profile.confidence * 100).toFixed(0)}%`);
        
        if (profile.languageFeatures.commonWords.length > 0) {
          console.log(`\nüî§ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞: ${profile.languageFeatures.commonWords.slice(0, 5).join(', ')}`);
        }
        
        if (profile.languageFeatures.commonEmojis.length > 0) {
          console.log(`üòä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏: ${profile.languageFeatures.commonEmojis.join(' ')}`);
        }
        
        if (profile.interests.topTopics.length > 0) {
          console.log(`üìã –¢–æ–ø —Ç–µ–º—ã: ${profile.interests.topTopics.slice(0, 3).map(t => `${t.topic} (${(t.frequency * 100).toFixed(0)}%)`).join(', ')}`);
        }
        
        console.log('');
      }
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalMessages = profiles.reduce((sum, p) => sum + p.messageCount, 0);
    const avgConfidence = profiles.reduce((sum, p) => sum + p.confidence, 0) / profiles.length;
    
    console.log('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`‚îú‚îÄ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalMessages.toLocaleString()}`);
    console.log(`‚îú‚îÄ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ${(avgConfidence * 100).toFixed(1)}%`);
    console.log(`‚îú‚îÄ –°–∞–º—ã–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π: ${profiles.sort((a, b) => b.communicationStyle.formalityLevel - a.communicationStyle.formalityLevel)[0]?.userName || 'N/A'}`);
    console.log(`‚îú‚îÄ –°–∞–º—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π: ${profiles.sort((a, b) => b.communicationStyle.emotionalExpression - a.communicationStyle.emotionalExpression)[0]?.userName || 'N/A'}`);
    console.log(`‚îú‚îÄ –°–∞–º—ã–π —é–º–æ—Ä–Ω–æ–π: ${profiles.sort((a, b) => b.socialBehavior.humor - a.socialBehavior.humor)[0]?.userName || 'N/A'}`);
    console.log(`‚îî‚îÄ –°–∞–º—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π: ${profiles.sort((a, b) => b.socialBehavior.supportiveness - a.socialBehavior.supportiveness)[0]?.userName || 'N/A'}`);
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('='.repeat(60) + '\n');
    
    profiler.close();
    
  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}