// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
import { readFileSync } from 'fs';
try {
  const envFile = readFileSync('.env', 'utf8');
  envFile.split('\n').forEach(line => {
    const [key, ...values] = line.split('=');
    if (key && values.length > 0 && !key.startsWith('#')) {
      process.env[key.trim()] = values.join('=').trim();
    }
  });
} catch (error) {
  // .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
}

import { DigitalPersonalityBot } from './core/bot.js';
import { validateConfig } from './core/config.js';
import { Logger } from './utils/logger.js';
import { ModelSelector } from './ai/model-selector.js';

async function main() {
  try {
    Logger.info('ü§ñ –ó–∞–ø—É—Å–∫ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏...');
    
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
    const modelSelector = new ModelSelector();
    await modelSelector.ensureModelConfigured();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validateConfig();
    
    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    const bot = new DigitalPersonalityBot();
    await bot.start();
  } catch (error) {
    Logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
  }
}

main();