import { DigitalPersonalityBot } from './bot.js';
import { validateConfig, config } from './config.js';
import { Logger } from './logger.js';
import { promises as fs } from 'fs';

async function main(): Promise<void> {
  try {
    validateConfig();
    Logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    Logger.info(`ü§ñ –†–µ–∂–∏–º AI: ${config.aiMode}`);
    if (config.aiMode === 'hybrid') {
      Logger.info(`üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å AI: ${(config.aiProbability * 100).toFixed(0)}%`);
    }

    const bot = new DigitalPersonalityBot();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä
    const personalityPath = process.env.PERSONALITY_FILE || './personality.json';
    try {
      await fs.access(personalityPath);
      await bot.loadPersonality(personalityPath);
      Logger.info('üß† –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –≤—Å–ø–æ–º–Ω–∏–ª —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏!');
    } catch {
      Logger.warn(`‚ö†Ô∏è –§–∞–π–ª —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${personalityPath}`);
      Logger.warn('–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á —á—Ç–æ-—Ç–æ –ø–æ–¥–∑–∞–±—ã–ª —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ');
      Logger.info('–ß—Ç–æ–±—ã –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –≤—Å–ø–æ–º–Ω–∏–ª –º–∞–Ω–µ—Ä—ã —á–∞—Ç–∞:');
      Logger.info('  1. –ò–∑—É—á–∏—Ç–µ —á–∞—Ç: bun run analyze result.json');
      Logger.info('  2. –°–æ–∑–¥–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä: bun run patterns result_analysis.json');
      Logger.info('  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞');
    }

    await bot.start();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    process.on('SIGINT', async () => {
      Logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –∑–∞—Å—ã–ø–∞–µ—Ç...');
      await bot.stop();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      Logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –∑–∞—Å—ã–ø–∞–µ—Ç...');
      await bot.stop();
      process.exit(0);
    });

  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch((error) => {
  Logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});