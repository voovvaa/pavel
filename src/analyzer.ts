import { TelegramParser } from './parser.js';
import { ChatAnalyzer } from './analytics.js';
import { ConsoleVisualizer } from './visualizer.js';
import { Logger } from './logger.js';
import { promises as fs } from 'fs';

async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const filePath = process.argv[2];
    if (!filePath) {
      console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —ç–∫—Å–ø–æ—Ä—Ç–∞:');
      console.log('   bun run analyze path/to/result.json');
      console.log('');
      console.log('üìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç:');
      console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram Desktop');
      console.log('   2. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç ‚Üí –ú–µ–Ω—é ‚Üí –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞');
      console.log('   3. –í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–æ—Ä–º–∞—Ç');
      console.log('   4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(filePath);
    } catch {
      Logger.error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      process.exit(1);
    }

    Logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    const exportData = await TelegramParser.loadExport(filePath);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    const analyzer = new ChatAnalyzer(exportData);
    const analytics = analyzer.analyze();
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    ConsoleVisualizer.displayAnalytics(analytics);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
    const outputPath = filePath.replace('.json', '_analysis.json');
    await fs.writeFile(outputPath, JSON.stringify(analytics, null, 2), 'utf-8');
    Logger.info(`üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);

  } catch (error) {
    Logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}