import OpenAI from 'openai';
import { config } from './config.js';
import { Logger } from './logger.js';
import { BotPersonality, ChatContext } from './types.js';

export class AIEngine {
  private openai: OpenAI;
  private personality: BotPersonality;
  private isEnabled: boolean;

  constructor(personality: BotPersonality) {
    this.personality = personality;
    this.isEnabled = config.aiMode !== 'patterns_only' && !!config.openaiApiKey;
    
    if (this.isEnabled) {
      this.openai = new OpenAI({
        apiKey: config.openaiApiKey,
      });
      Logger.info(`ü§ñ AI –¥–≤–∏–∂–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: ${config.openaiModel})`);
    } else {
      Logger.info('üîß AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é OpenAI
   */
  async generateResponse(
    messageText: string, 
    author: string, 
    context: ChatContext
  ): Promise<string | null> {
    if (!this.isEnabled) {
      Logger.debug('AI –¥–≤–∏–∂–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
      return null;
    }

    try {
      const prompt = this.buildPrompt(messageText, author, context);
      
      Logger.debug('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...');
      const response = await this.openai.chat.completions.create({
        model: config.openaiModel,
        messages: [
          {
            role: 'system',
            content: prompt.system
          },
          {
            role: 'user', 
            content: prompt.user
          }
        ],
        max_tokens: Math.max(50, Math.min(400, Math.round(this.personality.responseStyle.averageLength * 2))),
        temperature: 0.9,
        presence_penalty: 0.8,
        frequency_penalty: 0.5
      });

      const aiResponse = response.choices[0]?.message?.content?.trim();
      
      if (aiResponse) {
        // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–º–µ–Ω–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        let cleanResponse = aiResponse;
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∏ –≤ –Ω–∞—á–∞–ª–µ
        const namePatterns = [
          /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*–ö—É–ª–æ–≤–∏—á\s*:\s*/i,
          /^–ì–µ–π—Å–∞–Ω–¥—Ä\s*:\s*/i,
          /^–ì–µ—è—Å–∞–Ω–¥—Ä\s*:\s*/i,
          /^–°–∞–Ω—è\s*:\s*/i,
          /^–®—É—Ä–∏–∫\s*:\s*/i,
          /^–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\s*:\s*/i,
          /^–ê–ª–µ–∫—Å\s*:\s*/i,
        ];
        
        for (const pattern of namePatterns) {
          cleanResponse = cleanResponse.replace(pattern, '');
        }
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        cleanResponse = cleanResponse.trim();
        
        if (cleanResponse) {
          Logger.info(`ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç: "${cleanResponse.substring(0, 50)}..."`);
          return cleanResponse;
        } else {
          Logger.warn('AI –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å –∏–º–µ–Ω–∏, –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è');
          return null;
        }
      } else {
        Logger.warn('AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        return null;
      }
      
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:', error);
      return null;
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private buildPrompt(messageText: string, author: string, context: ChatContext): {
    system: string;
    user: string;
  } {
    const recentContext = context.recentMessages
      .slice(-5)
      .map(msg => `${msg.author}: ${msg.text}`)
      .join('\n');

    const popularWords = this.personality.responseStyle.commonWords.slice(0, 15).join(', ');
    const popularEmojis = this.personality.responseStyle.commonEmojis.slice(0, 5).join(' '); // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 8 –¥–æ 5
    
    const formalityDescription = this.personality.responseStyle.formalityLevel > 0.7 
      ? '–≤–µ–∂–ª–∏–≤–æ –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ' 
      : this.personality.responseStyle.formalityLevel > 0.3
      ? '–¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ'
      : '–æ—á–µ–Ω—å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ, —Å –∂–∞—Ä–≥–æ–Ω–æ–º –∏ —Å–ª–µ–Ω–≥–æ–º';

    const system = `–¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ Telegram —á–∞—Ç–∞. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ù–ï –ü–ò–®–ò –°–í–û–ï –ò–ú–Ø –≤ –æ—Ç–≤–µ—Ç–µ  
- –ù–ï –ü–û–î–ü–ò–°–´–í–ê–ô–°–Ø –Ω–∏–∫–∞–∫
- –ù–ï –ø–∏—à–∏ "–ì–µ–π—Å–∞–Ω–¥—Ä:", "–°–∞–Ω—è:" –∏–ª–∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞
- –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è

–¢–í–û–ô –°–¢–ò–õ–¨:
- –û–±—â–∞–µ—à—å—Å—è ${formalityDescription}
- –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –ø—Ä–∏–º–µ—Ä–Ω–æ ${this.personality.responseStyle.averageLength} —Å–∏–º–≤–æ–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–æ–≤–∞: ${popularWords}
- –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏: ${popularEmojis}

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
1. –ù–ò–ö–ê–ö–ò–• –ü–û–î–ü–ò–°–ï–ô –ò –ò–ú–ï–ù –í –û–¢–í–ï–¢–ï
2. –ù–ï —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã AI/–±–æ—Ç
3. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞
4. –≠–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ
5. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown
6. –ë—É–¥—å –∂–∏–≤—ã–º, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–π

–ö–û–ù–¢–ï–ö–°–¢:
${recentContext}

–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –ü–û–î–ü–ò–°–ò:`;

    const user = `${author}: ${messageText}`;

    return { system, user };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI
   */
  isAvailable(): boolean {
    return this.isEnabled;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
   */
  getModelInfo(): string {
    return this.isEnabled ? config.openaiModel : '–æ—Ç–∫–ª—é—á–µ–Ω';
  }
}