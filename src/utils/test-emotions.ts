#!/usr/bin/env bun

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–≠–¢–ê–ü 8)
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É EmotionAnalyzer –∏ EmotionalAdapter
 */

import { Logger } from './logger.js';
import { EmotionAnalyzer } from '../ai/emotion-analyzer.js';
import { EmotionalAdapter } from '../ai/emotional-adapter.js';
import { MemoryManager } from '../memory/memory-manager.js';
import { MemoryEntry } from '../core/types.js';

const testChatId = '316537427';

class EmotionalTester {
  private analyzer: EmotionAnalyzer;
  private adapter: EmotionalAdapter;
  private memoryManager: MemoryManager;

  constructor() {
    this.analyzer = new EmotionAnalyzer();
    this.adapter = new EmotionalAdapter();
    this.memoryManager = new MemoryManager(testChatId);
  }

  async runAllTests(): Promise<void> {
    Logger.info('üé≠ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    console.log('\n1. –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –≠–ú–û–¶–ò–ô –í –°–û–û–ë–©–ï–ù–ò–Ø–•');
    this.testEmotionAnalysis();
    
    console.log('\n2. –¢–ï–°–¢ –ü–û–°–¢–†–û–ï–ù–ò–Ø –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–• –ü–†–û–§–ò–õ–ï–ô');
    await this.testEmotionalProfiles();
    
    console.log('\n3. –¢–ï–°–¢ –ê–î–ê–ü–¢–ê–¶–ò–ò –ü–û–í–ï–î–ï–ù–ò–Ø');
    await this.testEmotionalAdaptation();
    
    console.log('\n4. –¢–ï–°–¢ –ì–†–£–ü–ü–û–í–û–ì–û –ê–ù–ê–õ–ò–ó–ê');
    await this.testGroupEmotionalState();
    
    this.memoryManager.close();
    Logger.info('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  }

  private testEmotionAnalysis(): void {
    const testMessages = [
      { text: '–ê—Ö–∞—Ö–∞—Ö–∞, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–±–æ–π–Ω–æ! üòÇüòÇüòÇ', author: 'TestUser1', expected: 'joy' },
      { text: '–ë–ª—è—Ç—å, –º–µ–Ω—è —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–µ—Å–∏—Ç!!! üò°', author: 'TestUser2', expected: 'anger' },
      { text: '–ú–Ω–µ —Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ... üò¢', author: 'TestUser3', expected: 'sadness' },
      { text: '–î–∞ –Ω–µ –∑–Ω–∞—é, –ø–æ—Ñ–∏–≥ –∫–∞–∫-—Ç–æ', author: 'TestUser4', expected: 'boredom' },
      { text: '–í–ê–£! –≠—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!!!', author: 'TestUser5', expected: 'surprise' },
      { text: '–ê–≥–∞, –∫–æ–Ω–µ—á–Ω–æ, –æ—á–µ–Ω—å "—É–º–Ω–æ" —Å–∫–∞–∑–∞–Ω–æ', author: 'TestUser6', expected: 'sarcastic' },
      { text: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–µ–±—è! –í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ ü§ó', author: 'TestUser7', expected: 'supportive' }
    ];

    testMessages.forEach(msg => {
      const analysis = this.analyzer.analyzeMessageEmotion(msg.text, msg.author);
      
      console.log(`üìù "${msg.text.substring(0, 30)}..."`);
      console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —ç–º–æ—Ü–∏—è: ${msg.expected}`);
      console.log(`   –ù–∞–π–¥–µ–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è: ${analysis.dominant}`);
      console.log(`   –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${(analysis.intensity * 100).toFixed(0)}%`);
      console.log(`   –ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å: ${analysis.valence > 0 ? '+' : ''}${analysis.valence.toFixed(2)}`);
      console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(0)}%`);
      
      const isCorrect = analysis.dominant === msg.expected || 
                       (msg.expected === 'boredom' && analysis.dominant === 'neutral');
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${isCorrect ? '‚úÖ' : '‚ùå'}\n`);
    });
  }

  private async testEmotionalProfiles(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã
      const memoryContext = await this.memoryManager.buildMemoryContext("—Ç–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π", "system");
      
      if (memoryContext.userRelationships.size === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π');
        return;
      }

      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${memoryContext.userRelationships.size}`);
      
      for (const [userName, relationship] of memoryContext.userRelationships) {
        if (relationship.emotionalProfile) {
          console.log(`\nüë§ ${userName}:`);
          console.log(`   –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: ${relationship.emotionalProfile.temperament}`);
          console.log(`   –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–æ–ª—å: ${relationship.emotionalProfile.socialRole}`);
          console.log(`   –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${(relationship.emotionalProfile.expressiveness * 100).toFixed(0)}%`);
          console.log(`   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${(relationship.emotionalProfile.stability * 100).toFixed(0)}%`);
          console.log(`   –¢–∏–ø–∏—á–Ω—ã–µ —ç–º–æ—Ü–∏–∏: ${relationship.emotionalProfile.typicalEmotions.join(', ')}`);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
    }
  }

  private async testEmotionalAdaptation(): Promise<void> {
    const testScenarios = [
      {
        user: 'TestAngryUser',
        message: '–í—Å–µ –ø–ª–æ—Ö–æ, –º–µ–Ω—è –±–µ—Å–∏—Ç —ç—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏—è!',
        description: '–ó–ª–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      },
      {
        user: 'TestSadUser',
        message: '–ú–Ω–µ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è...',
        description: '–ì—Ä—É—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      },
      {
        user: 'TestHappyUser',
        message: '–ê—Ö–∞—Ö–∞, –∫–ª–∞—Å—Å–Ω–æ! –î–∞–≤–∞–π—Ç–µ –≤–µ—Å–µ–ª–∏—Ç—å—Å—è! üéâ',
        description: '–í–µ—Å–µ–ª—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      }
    ];

    for (const scenario of testScenarios) {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        const mockMemoryContext = {
          recentMessages: [],
          relevantHistory: [],
          conversationSummaries: [],
          userRelationships: new Map(),
          activeTopics: [],
          currentMood: 'neutral'
        };

        const adaptation = this.adapter.adaptToEmotionalState(
          scenario.user,
          scenario.message,
          mockMemoryContext
        );

        console.log(`\nüé≠ ${scenario.description}: "${scenario.message}"`);
        console.log(`   –¢–æ–Ω –æ—Ç–≤–µ—Ç–∞: ${adaptation.responseStyle.tone}`);
        console.log(`   –≠–º–ø–∞—Ç–∏—è: ${(adaptation.responseStyle.empathy * 100).toFixed(0)}%`);
        console.log(`   –≠–Ω–µ—Ä–≥–∏—è: ${(adaptation.responseStyle.energy * 100).toFixed(0)}%`);
        console.log(`   –Æ–º–æ—Ä: ${(adaptation.responseStyle.humor * 100).toFixed(0)}%`);
        console.log(`   –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞: ${adaptation.responseModifier.toFixed(2)}x`);
        
        const strategies = Object.entries(adaptation.strategies)
          .filter(([_, value]) => value)
          .map(([key, _]) => key);
        if (strategies.length > 0) {
          console.log(`   –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${strategies.join(', ')}`);
        }
        
        if (adaptation.promptAdjustments.behaviorInstructions) {
          console.log(`   –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${adaptation.promptAdjustments.behaviorInstructions}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è ${scenario.user}:`, error);
      }
    }
  }

  private async testGroupEmotionalState(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
      const memoryContext = await this.memoryManager.buildMemoryContext("—Ç–µ—Å—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", "system");
      
      if (!memoryContext.groupEmotionalState) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–æ–≤–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
        return;
      }

      const groupState = memoryContext.groupEmotionalState;
      
      console.log('\nüèÅ –ì–†–£–ü–ü–û–í–û–ï –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
      console.log(`   –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${groupState.groupMood.dominant}`);
      console.log(`   –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${(groupState.groupMood.intensity * 100).toFixed(0)}%`);
      console.log(`   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${(groupState.groupMood.stability * 100).toFixed(0)}%`);
      
      console.log('\nüîÑ –°–û–¶–ò–ê–õ–¨–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê:');
      console.log(`   –ì–∞—Ä–º–æ–Ω–∏—è: ${(groupState.dynamics.harmony * 100).toFixed(0)}%`);
      console.log(`   –ù–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å: ${(groupState.dynamics.tension * 100).toFixed(0)}%`);
      console.log(`   –≠–Ω–µ—Ä–≥–∏—è: ${(groupState.dynamics.energy * 100).toFixed(0)}%`);
      console.log(`   –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${(groupState.dynamics.engagement * 100).toFixed(0)}%`);
      
      if (groupState.emotionalTopics.length > 0) {
        console.log('\nüí≠ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–ú–´:');
        groupState.emotionalTopics.forEach(topic => {
          console.log(`   ${topic.topic}: ${topic.associatedEmotion} (${topic.participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
        });
      }
      
      if (groupState.conflicts.length > 0) {
        console.log('\n‚öîÔ∏è –ö–û–ù–§–õ–ò–ö–¢–´:');
        groupState.conflicts.forEach(conflict => {
          console.log(`   ${conflict.participants.join(' vs ')}: ${conflict.status} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${(conflict.intensity * 100).toFixed(0)}%)`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new EmotionalTester();
await tester.runAllTests();