#!/usr/bin/env bun

import { cacheManager } from '../core/cache-manager.js';
import { MemoryManager } from '../memory/memory-manager.js';
import { Logger } from '../utils/logger.js';
import { config } from '../core/config.js';

/**
 * CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—ç—à–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
async function analyzeCaches() {
  console.log('üìä –ê–Ω–∞–ª–∏–∑ –∫—ç—à–µ–π –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    const chatId = args[0] || config.allowedChatId || 'test';
    const isDetailed = args.includes('--detailed') || args.includes('-d');
    const shouldCleanup = args.includes('--cleanup') || args.includes('-c');
    const shouldWarmup = args.includes('--warmup') || args.includes('-w');
    const shouldClear = args.includes('--clear');

    if (shouldClear) {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π...');
      cacheManager.clearAll();
      console.log('‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã\n');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    let memoryManager: MemoryManager | null = null;
    if (chatId && chatId !== 'global') {
      try {
        memoryManager = new MemoryManager(chatId);
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞ ${chatId}: ${error}\n`);
      }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    if (shouldCleanup) {
      console.log('üßΩ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...');
      cacheManager.cleanup();
      if (memoryManager) {
        memoryManager.cleanupCaches();
      }
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
    }

    // –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–µ–π
    if (shouldWarmup && memoryManager) {
      console.log('üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–µ–π...');
      await memoryManager.warmupCaches();
      console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω\n');
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–µ–π
    console.log('üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–µ–π:');
    const globalStats = cacheManager.getAllStats();
    const memoryUsage = cacheManager.getMemoryUsage();

    console.log(`‚îú‚îÄ –í—Å–µ–≥–æ –∫—ç—à–µ–π: ${memoryUsage.totalCaches}`);
    console.log(`‚îú‚îÄ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${memoryUsage.totalEntries}`);
    console.log(`‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${(memoryUsage.estimatedMemory / 1024).toFixed(1)} –ö–ë`);
    console.log('‚îî‚îÄ –ü–æ —Ç–∏–ø–∞–º:');

    Object.entries(globalStats).forEach(([name, stats]) => {
      const hitRateStr = stats.hitRate > 0 ? ` (hit rate: ${(stats.hitRate * 100).toFixed(1)}%)` : '';
      console.log(`   ‚îú‚îÄ ${name}: ${stats.totalEntries} –∑–∞–ø–∏—Å–µ–π${hitRateStr}`);
    });

    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    if (memoryManager) {
      console.log(`\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–µ–π —á–∞—Ç–∞ ${chatId}:`);
      
      if (isDetailed) {
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        const performanceReport = memoryManager.getCachePerformanceReport();
        
        console.log('\nüìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:');
        Object.entries(performanceReport.localCaches).forEach(([name, stats]: [string, any]) => {
          console.log(`\n${name.toUpperCase()}:`);
          console.log(`  ‚îú‚îÄ –ó–∞–ø–∏—Å–µ–π: ${stats.totalEntries}`);
          console.log(`  ‚îú‚îÄ Hit rate: ${(stats.hitRate * 100).toFixed(1)}%`);
          console.log(`  ‚îú‚îÄ –ü–æ–ø–∞–¥–∞–Ω–∏–π: ${stats.totalHits}`);
          console.log(`  ‚îú‚îÄ –ü—Ä–æ–º–∞—Ö–æ–≤: ${stats.totalMisses}`);
          console.log(`  ‚îî‚îÄ –ü–∞–º—è—Ç—å: ${(stats.memoryUsage / 1024).toFixed(1)} –ö–ë`);
        });

        console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        performanceReport.recommendations.forEach((rec: string) => {
          console.log(`  ‚Ä¢ ${rec}`);
        });
      } else {
        // –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const cacheStats = memoryManager.getCacheStats();
        Object.entries(cacheStats).forEach(([name, stats]: [string, any]) => {
          const hitRate = stats.hitRate > 0 ? `${(stats.hitRate * 100).toFixed(1)}%` : 'N/A';
          console.log(`‚îú‚îÄ ${name}: ${stats.totalEntries} –∑–∞–ø–∏—Å–µ–π (hit rate: ${hitRate})`);
        });
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫—ç—à–µ–π
    console.log('\nüî• –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—ç—à–µ–π:');
    const sortedCaches = Object.entries(globalStats)
      .sort(([,a], [,b]) => (b.totalHits + b.totalMisses) - (a.totalHits + a.totalMisses))
      .slice(0, 5);

    sortedCaches.forEach(([name, stats], index) => {
      const totalRequests = stats.totalHits + stats.totalMisses;
      const prefix = index === sortedCaches.length - 1 ? '‚îî‚îÄ' : '‚îú‚îÄ';
      console.log(`${prefix} ${index + 1}. ${name}: ${totalRequests} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    });

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    console.log('\nüö® –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º:');
    const issues = analyzePerformanceIssues(globalStats, memoryUsage);
    if (issues.length === 0) {
      console.log('‚îî‚îÄ ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    } else {
      issues.forEach((issue, index) => {
        const prefix = index === issues.length - 1 ? '‚îî‚îÄ' : '‚îú‚îÄ';
        console.log(`${prefix} ${issue}`);
      });
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (memoryManager) {
      memoryManager.close();
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—ç—à–µ–π:', error);
    process.exit(1);
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã
 */
function analyzePerformanceIssues(globalStats: any, memoryUsage: any): string[] {
  const issues: string[] = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
  const memoryMB = memoryUsage.estimatedMemory / (1024 * 1024);
  if (memoryMB > 50) {
    issues.push(`üü° –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫—ç—à–∞–º–∏: ${memoryMB.toFixed(1)} –ú–ë`);
  }
  if (memoryMB > 100) {
    issues.push(`üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memoryMB.toFixed(1)} –ú–ë`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º hit rate
  Object.entries(globalStats).forEach(([name, stats]: [string, any]) => {
    if (stats.totalHits + stats.totalMisses > 100) { // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—ç—à–µ–π
      if (stats.hitRate < 0.3) {
        issues.push(`üî¥ –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π hit rate –¥–ª—è ${name}: ${(stats.hitRate * 100).toFixed(1)}%`);
      } else if (stats.hitRate < 0.5) {
        issues.push(`üü° –ù–∏–∑–∫–∏–π hit rate –¥–ª—è ${name}: ${(stats.hitRate * 100).toFixed(1)}%`);
      }
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—ç—à–µ–π
  Object.entries(globalStats).forEach(([name, stats]: [string, any]) => {
    if (stats.totalEntries > 800) {
      issues.push(`üü° –ö—ç—à ${name} –±–ª–∏–∑–æ–∫ –∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é: ${stats.totalEntries} –∑–∞–ø–∏—Å–µ–π`);
    }
  });

  return issues;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
 */
function showHelp() {
  console.log(`
üìä –ê–Ω–∞–ª–∏–∑ –∫—ç—à–µ–π –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  bun run cache-stats [chat_id] [–æ–ø—Ü–∏–∏]

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  chat_id          ID —á–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)

–û–ø—Ü–∏–∏:
  --detailed, -d   –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  --cleanup, -c    –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  --warmup, -w     –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–µ–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  --clear          –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
  --help, -h       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  bun run cache-stats                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  bun run cache-stats 123456789 -d      # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —á–∞—Ç–∞
  bun run cache-stats --cleanup          # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  bun run cache-stats --warmup           # –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–µ–π
  bun run cache-stats --clear            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
  Hit rate > 70%     - –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  Hit rate 50-70%    - –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
  Hit rate 30-50%    - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  Hit rate < 30%     - –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  showHelp();
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeCaches().catch((error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
