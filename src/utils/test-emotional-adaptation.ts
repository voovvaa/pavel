#!/usr/bin/env bun

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö (–≠–¢–ê–ü 8)
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞
 */

import { Logger } from './logger.js';
import { ResponseEngine } from '../ai/response-engine.js';
import { BotPersonality } from '../core/types.js';
import { MemoryManager } from '../memory/memory-manager.js';
import { promises as fs } from 'fs';

const testChatId = '316537427';

class AdaptationTester {
  private responseEngine: ResponseEngine;
  private memoryManager: MemoryManager;
  private personality: BotPersonality;

  constructor() {
    this.personality = {
      patterns: [],
      responseStyle: {
        averageLength: 50,
        commonWords: [],
        commonEmojis: [],
        formalityLevel: 0.3,
        activityLevel: 0.7
      },
      schedule: {
        activeHours: Array.from({length: 24}, (_, i) => i),
        activeDays: [0, 1, 2, 3, 4, 5, 6]
      }
    };
    
    this.responseEngine = new ResponseEngine(this.personality, testChatId);
    this.memoryManager = new MemoryManager(testChatId);
  }

  async runAdaptationTests(): Promise<void> {
    Logger.info('üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏...');
    
    console.log('\n=== –¢–ï–°–¢ –ê–î–ê–ü–¢–ê–¶–ò–ò –ö –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ú –°–¶–ï–ù–ê–†–ò–Ø–ú ===');
    
    const scenarios = [
      {
        name: '–ì—Ä—É—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        author: '–ì—Ä—É—Å—Ç–Ω—ã–π–Æ–∑–µ—Ä',
        messages: [
          '–ú–Ω–µ —Å–µ–≥–æ–¥–Ω—è –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ...',
          '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –≤—Å–µ –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è',
          '–ö–∞–∂–µ—Ç—Å—è, –Ω–∏–∫–æ–º—É –Ω–µ—Ç –¥–æ –º–µ–Ω—è –¥–µ–ª–∞'
        ]
      },
      {
        name: '–ó–ª–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        author: '–ó–ª–æ–π–Æ–∑–µ—Ä',
        messages: [
          '–ë–ª—è—Ç—å, –º–µ–Ω—è –≤—Å–µ –¥–æ—Å—Ç–∞–ª–æ!',
          '–≠—Ç–∏ –ø—Ä–∏–¥—É—Ä–∫–∏ –æ–ø—è—Ç—å –≤—Å–µ –∏—Å–ø–æ—Ä—Ç–∏–ª–∏!',
          '–•–æ—á–µ—Ç—Å—è –≤—Å–µ—Ö –ø–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π!'
        ]
      },
      {
        name: '–í–µ—Å–µ–ª—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        author: '–í–µ—Å–µ–ª—ã–π–Æ–∑–µ—Ä',
        messages: [
          '–ê—Ö–∞—Ö–∞—Ö–∞, —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫–æ–π –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π –¥–µ–Ω—å! üòÇ',
          '–î–∞–≤–∞–π—Ç–µ —É—Å—Ç—Ä–æ–∏–º –≤–µ—á–µ—Ä–∏–Ω–∫—É! üéâ',
          '–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞, –¥—Ä—É–∑—å—è! ‚ú®'
        ]
      },
      {
        name: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
        author: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π–Æ–∑–µ—Ä',
        messages: [
          '–ò–≤–∞–Ω, —Ç—ã –Ω–µ—Å–µ—à—å –ø–æ–ª–Ω—É—é —á—É—à—å!',
          '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫–∏–º —Ç—É–ø—ã–º?',
          '–õ—É—á—à–µ –±—ã –º–æ–ª—á–∞–ª, —á–µ–º —Ç–∞–∫—É—é –µ—Ä—É–Ω–¥—É –ø–∏—Å–∞—Ç—å'
        ]
      }
    ];

    for (const scenario of scenarios) {
      console.log(`\nüé¨ –°–¶–ï–ù–ê–†–ò–ô: ${scenario.name}`);
      console.log('‚îÄ'.repeat(50));
      
      for (let i = 0; i < scenario.messages.length; i++) {
        const message = scenario.messages[i];
        console.log(`\nüí¨ ${scenario.author}: "${message}"`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.responseEngine.updateContext(scenario.author, message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å
        const shouldRespond = this.responseEngine.shouldRespond(message, scenario.author);
        console.log(`ü§î –î–æ–ª–∂–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å: ${shouldRespond ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (shouldRespond) {
          try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            const response = await this.responseEngine.generateResponse(message, scenario.author);
            
            if (response) {
              console.log(`ü§ñ –ì–µ–π—Å–∞–Ω–¥—Ä: "${response}"`);
              
              // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
              this.analyzeResponse(response, scenario.name);
            } else {
              console.log('ü§ñ –ì–µ–π—Å–∞–Ω–¥—Ä: [–Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç]');
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
          }
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    
    console.log('\n=== –ê–ù–ê–õ–ò–ó –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–• –ü–†–û–§–ò–õ–ï–ô ===');
    await this.analyzeEmotionalProfiles();
    
    this.memoryManager.close();
    Logger.info('‚úÖ –¢–µ—Å—Ç—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  }

  private analyzeResponse(response: string, scenarioName: string): void {
    const length = response.length;
    const hasEmojis = /[\u{1F600}-\u{1F64F}]|\u{1F300}-\u{1F5FF}|\u{1F680}-\u{1F6FF}|\u{1F700}-\u{1F77F}|\u{1F780}-\u{1F7FF}|\u{1F800}-\u{1F8FF}|\u{2600}-\u{26FF}|\u{2700}-\u{27BF}/u.test(response);
    const hasSwearing = /–±–ª—è—Ç—å|–Ω–∞—Ö—É–π|–ø–∏–∑–¥–µ—Ü|–¥–µ—Ä—å–º–æ/i.test(response);
    const isSupporting = /–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞|–ø–æ–Ω–∏–º–∞|—Å–æ—á—É–≤—Å—Ç–≤|–ø–æ–º–æ–≥|–≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ/i.test(response);
    const isCalming = /—É—Å–ø–æ–∫–æ–π|–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π|—Ä–∞—Å—Å–ª–∞–±—å|–≤—Å–µ –æ–∫/i.test(response);
    const isPlayful = /–∞—Ö–∞—Ö|–ª–æ–ª|–∫–µ–∫|–ø—Ä–∏–∫–æ–ª|–≤–µ—Å–µ–ª/i.test(response);
    const isEmpathetic = /—á—É–≤—Å—Ç–≤—É|–ø–æ–Ω–∏–º–∞|—Å–æ—á—É–≤—Å—Ç–≤|–ø–µ—Ä–µ–∂–∏–≤–∞/i.test(response);
    
    console.log('üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
    console.log(`   –î–ª–∏–Ω–∞: ${length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`   –≠–º–æ–¥–∑–∏: ${hasEmojis ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ú–∞—Ç: ${hasSwearing ? '‚ö†Ô∏è' : '‚úÖ'}`);
    console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${isSupporting ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –£—Å–ø–æ–∫–∞–∏–≤–∞–Ω–∏–µ: ${isCalming ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ò–≥—Ä–∏–≤–æ—Å—Ç—å: ${isPlayful ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –≠–º–ø–∞—Ç–∏—è: ${isEmpathetic ? '‚úÖ' : '‚ùå'}`);
  }

  private async analyzeEmotionalProfiles(): Promise<void> {
    try {
      const memoryContext = await this.memoryManager.buildMemoryContext("–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π", "system");
      
      console.log(`\nüë• –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${memoryContext.userRelationships.size}):`);
      
      for (const [userName, relationship] of memoryContext.userRelationships) {
        if (relationship.emotionalProfile) {
          console.log(`\nüé≠ ${userName}:`);
          console.log(`   üìä –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: ${relationship.emotionalProfile.temperament}`);
          console.log(`   üé≠ –†–æ–ª—å: ${relationship.emotionalProfile.socialRole}`);
          console.log(`   üí´ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${(relationship.emotionalProfile.expressiveness * 100).toFixed(0)}%`);
          console.log(`   üéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${(relationship.emotionalProfile.stability * 100).toFixed(0)}%`);
          
          if (relationship.emotionalProfile.typicalEmotions.length > 0) {
            console.log(`   üòä –ß–∞—Å—Ç—ã–µ —ç–º–æ—Ü–∏–∏: ${relationship.emotionalProfile.typicalEmotions.join(', ')}`);
          }
          
          if (relationship.emotionalProfile.recentMoods.length > 0) {
            const recentMood = relationship.emotionalProfile.recentMoods[0];
            console.log(`   üìà –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${recentMood.dominantEmotion} (${(recentMood.intensity * 100).toFixed(0)}%)`);
          }
        }
      }
      
      // –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (memoryContext.groupEmotionalState) {
        const groupState = memoryContext.groupEmotionalState;
        console.log('\nüåê –ì–†–£–ü–ü–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
        console.log(`   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${groupState.groupMood.dominant} (${(groupState.groupMood.intensity * 100).toFixed(0)}%)`);
        console.log(`   –ì–∞—Ä–º–æ–Ω–∏—è: ${(groupState.dynamics.harmony * 100).toFixed(0)}%`);
        console.log(`   –ù–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å: ${(groupState.dynamics.tension * 100).toFixed(0)}%`);
        console.log(`   –≠–Ω–µ—Ä–≥–∏—è: ${(groupState.dynamics.energy * 100).toFixed(0)}%`);
        
        if (groupState.conflicts.length > 0) {
          console.log(`   ‚öîÔ∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã: ${groupState.conflicts.length}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new AdaptationTester();
await tester.runAdaptationTests();