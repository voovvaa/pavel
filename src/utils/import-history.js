import fs from 'fs';
import { Database } from 'bun:sqlite';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
const isProduction = process.env.NODE_ENV === 'production' || process.argv.includes('--production');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
const historyFile = isProduction
  ? '/app/chat/result.json' 
  : './chat/result.json';
const dbPath = isProduction
  ? '/app/data/memory.db' 
  : './memory.db';
  
console.log(`üîç NODE_ENV: ${process.env.NODE_ENV} (production: ${isProduction})`);
console.log(`üóÉÔ∏è Database path: ${dbPath}`);

console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...');
const history = JSON.parse(fs.readFileSync(historyFile, 'utf8'));

// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é  
try {
  fs.unlinkSync(dbPath);
  console.log('üóëÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');
} catch (error) {
  // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
}

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database(dbPath);

console.log('üóÉÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
db.exec(`
  CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id TEXT NOT NULL,
    message_id INTEGER NOT NULL,
    author TEXT NOT NULL,
    content TEXT NOT NULL,
    timestamp DATETIME NOT NULL,
    message_type TEXT DEFAULT 'text',
    is_from_bot BOOLEAN DEFAULT 0,
    importance REAL DEFAULT 0.5,
    emotion TEXT DEFAULT 'neutral',
    topics TEXT DEFAULT '[]',
    mentions TEXT DEFAULT '[]',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(chat_id, message_id)
  );

  CREATE TABLE IF NOT EXISTS chat_topics (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id TEXT NOT NULL,
    topic TEXT NOT NULL,
    first_mentioned DATETIME NOT NULL,
    last_mentioned DATETIME NOT NULL,
    mention_count INTEGER DEFAULT 1,
    related_users TEXT DEFAULT '[]',
    importance REAL DEFAULT 0.5,
    status TEXT DEFAULT 'active',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(chat_id, topic)
  );

  CREATE TABLE IF NOT EXISTS user_relationships (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id TEXT NOT NULL,
    user_name TEXT NOT NULL,
    interaction_count INTEGER DEFAULT 0,
    last_interaction DATETIME,
    relationship_type TEXT DEFAULT 'neutral',
    shared_topics TEXT DEFAULT '[]',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(chat_id, user_name)
  );
`);

console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
const insertMessage = db.prepare(`
  INSERT OR IGNORE INTO messages (
    chat_id, message_id, author, content, timestamp, 
    message_type, is_from_bot, importance, emotion, topics, mentions
  ) VALUES ($chat_id, $message_id, $author, $content, $timestamp, 'text', 0, $importance, $emotion, $topics, $mentions)
`);

const insertTopic = db.prepare(`
  INSERT OR IGNORE INTO chat_topics (
    chat_id, topic, first_mentioned, last_mentioned,
    mention_count, related_users, importance, status
  ) VALUES ($chat_id, $topic, $first_mentioned, $last_mentioned, 1, $related_users, 0.5, 'active')
`);

const updateTopic = db.prepare(`
  UPDATE chat_topics 
  SET last_mentioned = $last_mentioned, mention_count = mention_count + 1,
      importance = MIN(1.0, importance + 0.05)
  WHERE chat_id = $chat_id AND topic = $topic
`);

const insertUser = db.prepare(`
  INSERT OR IGNORE INTO user_relationships (
    chat_id, user_name, relationship_type, last_interaction,
    interaction_count, shared_topics
  ) VALUES ($chat_id, $user_name, 'friend', $last_interaction, 1, '[]')
`);

const updateUser = db.prepare(`
  UPDATE user_relationships 
  SET last_interaction = $last_interaction, interaction_count = interaction_count + 1,
      updated_at = CURRENT_TIMESTAMP
  WHERE chat_id = $chat_id AND user_name = $user_name
`);

// –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞)
console.log('üìÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...');

const messages = history.messages.filter(msg => {
  if (msg.type !== 'message') return false;
  if (!msg.text || typeof msg.text !== 'string') return false;
  if (msg.text.trim().length < 3) return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ
  
  return true; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
});

console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);

// –ú–∞–ø–∏–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ–±—ã "–í–æ–ª–æ–¥—è" = "–í–æ–ª–æ–¥—è")
const nameMap = {
  '–í–æ–ª–æ–¥—è': '–í–æ–ª–æ–¥—è',
  '–õ–µ–æ–Ω–∏–¥ –ö–æ–ª–º–∞–∫–æ–≤': '–õ–µ–æ–Ω–∏–¥',
  '–ë–æ–¥—è': '–ë–æ–¥—è',
  '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á': '–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractTopics(text) {
  const words = text.toLowerCase()
    .replace(/[^\w\s–∞-—è—ë]/gi, ' ')
    .split(/\s+/)
    .filter(word => word.length >= 4);
  
  const stopWords = new Set([
    '—Å–∞–Ω—è', '–≥–µ–π—Å–∞–Ω–¥—Ä', '–∫—É–ª–æ–≤–∏—á', '–≤—Ä–æ–¥–µ', '–¥—É–º–∞—é', '–Ω–æ—Ä–º', '–≤–∞—â–µ',
    '–±–æ–≥–¥–∞–Ω', '–æ–Ω–ª–∞–π–Ω', '—Ä–µ–∞–ª—å–Ω–æ', '—Ç–æ–ª—å–∫–æ', '–≥–æ–≤–æ—Ä–∏–ª', '–ø–æ–º–Ω—é',
    '–º–∞–∫—Å', '—É—à–µ–ª', '–±—ã–ª–∞', '–±—ã–ª–∏', '–µ—Å—Ç—å', '–±—É–¥–µ—Ç', '–º–æ–∂–µ—Ç', '–æ—á–µ–Ω—å',
    '–≤–æ–ª–æ–¥—è', '–ª–µ–æ–Ω–∏–¥', '–±–æ–¥—è'
  ]);
  
  return words
    .filter(word => !stopWords.has(word) && word.length >= 5)
    .slice(0, 3); // –¢–æ–ª—å–∫–æ —Ç–æ–ø-3 —Ç–µ–º—ã
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏
function detectEmotion(text) {
  const lowerText = text.toLowerCase();
  
  const emotions = {
    positive: ['–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å', '—Å—É–ø–µ—Ä', '–æ—Ç–ª–∏—á–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '–Ω–æ—Ä–º', '–∑–±—Å', '–∫–∞–π—Ñ'],
    negative: ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å', '–±–µ—Å–∏—Ç', '–≥—Ä—É—Å—Ç–Ω–æ', '–±–ª—è—Ç—å', '–ø–∏–∑–¥–µ—Ü', '—Ö–µ—Ä–Ω—è'],
    excited: ['–≤–∞—É', '–æ—Ñ–∏–≥–µ—Ç—å', '–æ—Ö—É–µ—Ç—å', '–ø–∏–∑–¥–∞—Ç–æ', '–∞—Ö—É–µ–Ω–Ω–æ'],
    friendly: ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤–∞', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å']
  };
  
  for (const [emotion, words] of Object.entries(emotions)) {
    if (words.some(word => lowerText.includes(word))) {
      return emotion;
    }
  }
  
  return 'neutral';
}

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
function calculateImportance(text, author) {
  let importance = 0.3;
  
  // –ü—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ
  if (text.toLowerCase().includes('–≥–µ–π—Å–∞–Ω–¥—Ä') || text.toLowerCase().includes('—Å–∞–Ω—è')) {
    importance += 0.4;
  }
  
  // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ
  if (text.length > 100) importance += 0.2;
  if (text.includes('?')) importance += 0.1;
  
  return Math.min(1.0, importance);
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...');

const chatId = '1460632856'; // ID —á–∞—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
let importedCount = 0;
let skippedCount = 0;

db.run('BEGIN TRANSACTION');

for (const msg of messages) {
  try {
    const author = nameMap[msg.from] || msg.from;
    const text = msg.text.trim();
    const timestamp = new Date(msg.date).toISOString();
    const topics = extractTopics(text);
    const emotion = detectEmotion(text);
    const importance = calculateImportance(text, author);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    insertMessage.run({
      $chat_id: chatId,
      $message_id: msg.id,
      $author: author,
      $content: text,
      $timestamp: timestamp,
      $importance: importance,
      $emotion: emotion,
      $topics: JSON.stringify(topics),
      $mentions: JSON.stringify([])
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã
    topics.forEach(topic => {
      try {
        const result = updateTopic.run({
          $last_mentioned: timestamp,
          $chat_id: chatId,
          $topic: topic
        });
        if (result.changes === 0) {
          insertTopic.run({
            $chat_id: chatId,
            $topic: topic,
            $first_mentioned: timestamp,
            $last_mentioned: timestamp,
            $related_users: JSON.stringify([author])
          });
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const result = updateUser.run({
        $last_interaction: timestamp,
        $chat_id: chatId,
        $user_name: author
      });
      if (result.changes === 0) {
        insertUser.run({
          $chat_id: chatId,
          $user_name: author,
          $last_interaction: timestamp
        });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    }
    
    importedCount++;
    
    if (importedCount % 1000 === 0) {
      console.log(`üìà –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} —Å–æ–æ–±—â–µ–Ω–∏–π...`);
    }
    
  } catch (error) {
    skippedCount++;
    if (skippedCount < 10) {
      console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${msg.id}:`, error.message);
    }
  }
}

db.run('COMMIT');

console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
console.log('üíæ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
db.run('PRAGMA synchronous = FULL');
db.run('VACUUM');
console.log(`üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
const totalMessages = db.prepare('SELECT COUNT(*) as count FROM messages WHERE chat_id = $chat_id').get({ $chat_id: chatId });
const totalTopics = db.prepare('SELECT COUNT(*) as count FROM chat_topics WHERE chat_id = $chat_id').get({ $chat_id: chatId });
const totalUsers = db.prepare('SELECT COUNT(*) as count FROM user_relationships WHERE chat_id = $chat_id').get({ $chat_id: chatId });

console.log(`\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:`);
console.log(`üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalMessages.count}`);
console.log(`üè∑Ô∏è –í—Å–µ–≥–æ —Ç–µ–º: ${totalTopics.count}`);
console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.count}`);

console.log('üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
db.run('PRAGMA wal_checkpoint(FULL)'); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º WAL —Ñ–∞–π–ª
db.run('PRAGMA optimize');
console.log(`üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: ${dbPath}`);
const dbExists = require('fs').existsSync(dbPath);
console.log(`üìä –§–∞–π–ª –±–∞–∑—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${dbExists}`);
if (dbExists) {
  const stats = require('fs').statSync(dbPath);
  console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(stats.size / 1024)}KB`);
}
db.close();
console.log('üéâ –ì–æ—Ç–æ–≤–æ! –ì–µ–π—Å–∞–Ω–¥—Ä —Ç–µ–ø–µ—Ä—å –ø–æ–º–Ω–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞!');