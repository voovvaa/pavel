name: üöÄ Deploy –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      retrain:
        description: 'Force personality retraining'
        required: false
        default: 'false'
        type: boolean


jobs:
  # –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
  test:
    name: üß™ Tests & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check
        run: bun run type-check

      - name: Health check (–±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤)
        run: timeout 10s bun run health-check --quick || echo "Expected timeout - OK"

  # –≠—Ç–∞–ø 2: –î–µ–ø–ª–æ–π –Ω–∞ Synology NAS (—Ç–æ–ª—å–∫–æ –¥–ª—è main branch)
  deploy:
    name: üè† Deploy to Synology NAS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/
            docker-compose.yml
            .env.docker.example

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SYNOLOGY_SSH_KEY }}

      - name: Deploy to Synology NAS
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ALLOWED_CHAT_ID: ${{ secrets.ALLOWED_CHAT_ID }}
        run: |
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ NAS
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            mkdir -p /volume1/docker/geysandr-bot
          "
          
          # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–µ–ø–ª–æ—è
          scp -o StrictHostKeyChecking=no docker-compose.yml $SYNOLOGY_USER@$SYNOLOGY_HOST:/volume1/docker/geysandr-bot/
          scp -o StrictHostKeyChecking=no -r scripts/ $SYNOLOGY_USER@$SYNOLOGY_HOST:/volume1/docker/geysandr-bot/
          
          # –°–æ–∑–¥–∞–µ–º .env.docker –Ω–∞ NAS
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            cat > .env.docker << EOF
          TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN
          OPENAI_API_KEY=$OPENAI_API_KEY
          ALLOWED_CHAT_ID=$ALLOWED_CHAT_ID
          OPENAI_MODEL=gpt-5-nano
          AI_MODE=hybrid
          AI_PROBABILITY=0.8
          DATABASE_PATH=/app/data/memory.db
          MEMORY_DAYS=30
          DEV_MODE=false
          NODE_ENV=production
          PERSONALITY_FILE=/app/chat/result_personality.json
          EOF
          "
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–æ–π
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            chmod +x scripts/*.sh
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ NAS
            echo 'üê≥ –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ...'
            docker build -t geysandr-bot:latest .
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π —Å–∫—Ä–∏–ø—Ç
            ./scripts/deploy.sh
          "

  # –≠—Ç–∞–ø 4: –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  retrain:
    name: üß† Retrain Personality
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.retrain == 'true' || contains(github.event.head_commit.message, '[retrain]')
    environment: production
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SYNOLOGY_SSH_KEY }}

      - name: Trigger retraining on NAS
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
            if [ -f chat/result.json ]; then
              echo 'üß† –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏...'
              docker compose exec geysandr-bot bun run analyze /app/chat/result.json
              docker compose exec geysandr-bot bun run patterns /app/chat/result_analysis.json
              docker compose restart geysandr-bot
              echo '‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
            else
              echo '‚ö†Ô∏è –§–∞–π–ª chat/result.json –Ω–µ –Ω–∞–π–¥–µ–Ω'
            fi
          "

  # –≠—Ç–∞–ø 5: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    name: üì¢ Notify Status
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    steps:
      - name: Get deployment status
        id: status
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=‚úÖ –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå –û—à–∏–±–∫–∞" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Send Telegram notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALLOWED_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ü§ñ **–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á - –î–µ–ø–ª–æ–π ${{ steps.status.outputs.status }}**
            
            üìã **–î–µ—Ç–∞–ª–∏:**
            ‚Ä¢ –ö–æ–º–º–∏—Ç: `${{ github.sha }}`
            ‚Ä¢ –í–µ—Ç–∫–∞: `${{ github.ref_name }}`
            ‚Ä¢ –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            
            üìä **–°—Ç–∞—Ç—É—Å—ã —ç—Ç–∞–ø–æ–≤:**
            ‚Ä¢ –¢–µ—Å—Ç—ã: ${{ needs.test.result == 'success' && '‚úÖ' || '‚ùå' }}
            ‚Ä¢ –°–±–æ—Ä–∫–∞: ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ –Ω–∞ NAS
            ‚Ä¢ –î–µ–ø–ª–æ–π: ${{ needs.deploy.result == 'success' && '‚úÖ' || '‚ùå' }}
            
            üîó [–î–µ—Ç–∞–ª–∏](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})