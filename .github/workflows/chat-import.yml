name: üì¶ Chat History Import

on:
  push:
    paths:
      - 'chat/result.json'
      - 'chat/result_analysis.json'
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_retrain:
        description: 'Force complete retraining'
        required: false
        default: 'false'
        type: boolean

jobs:
  # –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
  analyze-chat:
    name: üß† Analyze Chat Data
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.force_retrain == 'true'
    outputs:
      has-analysis: ${{ steps.check.outputs.has-analysis }}
      patterns-count: ${{ steps.analyze.outputs.patterns-count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check for chat data
        id: check
        run: |
          if [ -f "chat/result.json" ]; then
            FILE_SIZE=$(stat -c%s chat/result.json)
            echo "has-analysis=true" >> $GITHUB_OUTPUT
            echo "üìä Chat file found: $(($FILE_SIZE / 1024 / 1024)) MB"
          else
            echo "has-analysis=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No chat file found"
          fi

      - name: Analyze chat data
        id: analyze
        if: steps.check.outputs.has-analysis == 'true'
        run: |
          echo "üîç Analyzing chat data..."
          bun run analyze chat/result.json
          
          if [ -f "chat/result_analysis.json" ]; then
            echo "‚úÖ Analysis completed"
            
            # Extract patterns
            echo "üé≠ Extracting personality patterns..."
            bun run patterns chat/result_analysis.json
            
            if [ -f "chat/result_personality.json" ]; then
              PATTERNS_COUNT=$(grep -o '"id"' chat/result_personality.json | wc -l)
              echo "patterns-count=$PATTERNS_COUNT" >> $GITHUB_OUTPUT
              echo "‚úÖ Extracted $PATTERNS_COUNT personality patterns"
            else
              echo "patterns-count=0" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è No personality patterns extracted"
            fi
          else
            echo "‚ùå Analysis failed"
            exit 1
          fi

      - name: Upload analysis artifacts
        if: steps.check.outputs.has-analysis == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: chat-analysis
          path: |
            chat/result_analysis.json
            chat/result_personality.json
          retention-days: 30

  # –ò–º–ø–æ—Ä—Ç –Ω–∞ NAS
  import-to-nas:
    name: üì§ Import to NAS
    runs-on: ubuntu-latest
    needs: analyze-chat
    if: always() && (needs.analyze-chat.outputs.has-analysis == 'true' || github.event_name == 'workflow_dispatch')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download analysis artifacts
        if: needs.analyze-chat.outputs.has-analysis == 'true'
        uses: actions/download-artifact@v3
        with:
          name: chat-analysis
          path: chat/

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SYNOLOGY_SSH_KEY }}

      - name: Import chat history to NAS
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          echo "üì¶ Importing chat history to NAS..."
          
          # Create backup of current personality
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            if [ -f chat/result_personality.json ]; then
              cp chat/result_personality.json chat/result_personality.json.backup.$(date +%Y%m%d_%H%M%S)
              echo '‚úÖ Backup of current personality created'
            fi
          "
          
          # Copy chat files to NAS
          if [ -f "chat/result.json" ]; then
            echo "üì§ Copying chat data..."
            scp -o StrictHostKeyChecking=no chat/result.json $SYNOLOGY_USER@$SYNOLOGY_HOST:/volume1/docker/geysandr-bot/chat/
          fi
          
          if [ -f "chat/result_analysis.json" ]; then
            echo "üìä Copying analysis..."
            scp -o StrictHostKeyChecking=no chat/result_analysis.json $SYNOLOGY_USER@$SYNOLOGY_HOST:/volume1/docker/geysandr-bot/chat/
          fi
          
          if [ -f "chat/result_personality.json" ]; then
            echo "üé≠ Copying personality..."
            scp -o StrictHostKeyChecking=no chat/result_personality.json $SYNOLOGY_USER@$SYNOLOGY_HOST:/volume1/docker/geysandr-bot/chat/
          fi

      - name: Restart bot with new personality
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          echo "üîÑ Restarting bot with new personality..."
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            
            # Graceful restart if bot is running
            if docker compose ps | grep -q 'Up'; then
              echo 'üîÑ Restarting bot...'
              docker compose restart geysandr-bot
              
              # Wait for restart
              sleep 15
              
              # Health check
              docker compose exec -T geysandr-bot bun run health-check --quick || echo 'Health check warning after restart'
            else
              echo '‚ÑπÔ∏è Bot not running, will use new personality on next start'
            fi
          "

  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify-import:
    name: üì¢ Notify Import Status
    runs-on: ubuntu-latest
    needs: [analyze-chat, import-to-nas]
    if: always()
    steps:
      - name: Send import notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALLOWED_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            üß† **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞**
            
            üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**
            ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${{ needs.analyze-chat.result == 'success' && '‚úÖ –£—Å–ø–µ—à–Ω–æ' || '‚ùå –û—à–∏–±–∫–∞' }}
            ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${{ needs.analyze-chat.outputs.patterns-count || 'N/A' }}
            
            üì§ **–ò–º–ø–æ—Ä—Ç –Ω–∞ NAS:**
            ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${{ needs.import-to-nas.result == 'success' && '‚úÖ –£—Å–ø–µ—à–Ω–æ' || '‚ùå –û—à–∏–±–∫–∞' }}
            
            ${{ needs.import-to-nas.result == 'success' && 'ü§ñ **–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é!**' || '' }}
            
            üîó **–î–µ—Ç–∞–ª–∏**: [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ PR —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  create-update-pr:
    name: üìù Create Update PR
    runs-on: ubuntu-latest
    needs: [analyze-chat, import-to-nas]
    if: needs.analyze-chat.outputs.has-analysis == 'true' && needs.import-to-nas.result == 'success' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download analysis artifacts
        uses: actions/download-artifact@v3
        with:
          name: chat-analysis
          path: chat/

      - name: Create PR with updated personality
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'feat: update bot personality with ${{ needs.analyze-chat.outputs.patterns-count }} patterns'
          title: 'üß† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞: ${{ needs.analyze-chat.outputs.patterns-count }} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'
          body: |
            ## üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞
            
            ### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:
            - **–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ**: ${{ needs.analyze-chat.outputs.patterns-count }}
            - **–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞**: ${{ github.event.head_commit.timestamp }}
            - **–ö–æ–º–º–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞**: ${{ github.sha }}
            
            ### üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
            - `chat/result_analysis.json` - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            - `chat/result_personality.json` - –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ª–∏—á–Ω–æ—Å—Ç–∏
            
            ### üöÄ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è:
            - ‚úÖ –ò–º–ø–æ—Ä—Ç –Ω–∞ NAS –∑–∞–≤–µ—Ä—à–µ–Ω
            - ‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
            
            ### ü§ñ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!
            –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é.
            
            ---
            *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ GitHub Actions*
          branch: update-personality-${{ github.run_number }}
          delete-branch: true