name: üì¶ Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
  create-release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$LAST_TAG" ]]; then
            echo "Generating changelog from $LAST_TAG to HEAD"
            CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            echo "No previous tag found, using last 10 commits"
            CHANGELOG=$(git log --pretty=format:"- %s" -n 10)
          fi
          
          # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è GitHub
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: ü§ñ –ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á ${{ steps.version.outputs.version }}
          body: |
            ## üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞!
            
            ### üìã –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:
            ${{ steps.changelog.outputs.changelog }}
            
            ### üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
            ```bash
            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            git clone https://github.com/${{ github.repository }}.git
            cd geysandr-bot
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π
            ./scripts/deploy.sh
            ```
            
            ### üê≥ Docker Image:
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ```
            
            ### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:
            - TypeScript –∫–æ–¥ —Å –ø–æ–ª–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
            - Docker –æ–±—Ä–∞–∑ —Ä–∞–∑–º–µ—Ä–æ–º ~211MB (Alpine)  
            - Multi-stage —Å–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∏ health checks
            - CI/CD pipeline —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            
            ### üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
            –°–º–æ—Ç—Ä–∏ [DOCKER.md](./DOCKER.md) –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º —Ä–µ–ª–∏–∑–∞
  build-release:
    name: üê≥ Build Release Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}
            ghcr.io/${{ github.repository }}:stable
          labels: |
            org.opencontainers.image.title=–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á Bot
            org.opencontainers.image.description=Advanced Telegram AI Bot with emotional intelligence
            org.opencontainers.image.version=${{ needs.create-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —Ä–µ–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  deploy-release:
    name: üöÄ Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: github.event.inputs.prerelease != 'true'
    environment: production
    steps:
      - name: Checkout deployment files
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/
            docker-compose.yml

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SYNOLOGY_SSH_KEY }}

      - name: Deploy release to production
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
          RELEASE_TAG: ${{ needs.create-release.outputs.version }}
        run: |
          # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ NAS –Ω–∞ —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ä—Å–∏—é
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            
            echo 'üöÄ –î–µ–ø–ª–æ–π —Ä–µ–ª–∏–∑–∞ $RELEASE_TAG...'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º docker-compose.yml –Ω–∞ —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ä—Å–∏—é
            sed -i 's|ghcr.io/.*/geysandr-bot:.*|ghcr.io/${{ github.repository }}:$RELEASE_TAG|' docker-compose.yml
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            ./scripts/backup.sh
            
            # –î–µ–ø–ª–æ–∏–º —Ä–µ–ª–∏–∑
            docker pull ghcr.io/${{ github.repository }}:$RELEASE_TAG
            docker compose up -d --force-recreate
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
            sleep 30
            docker compose exec -T geysandr-bot bun run health-check --quick || echo 'Warning: Health check failed'
            
            echo '‚úÖ –†–µ–ª–∏–∑ $RELEASE_TAG —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç'
          "

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ
  notify-release:
    name: üì¢ Release Notification
    runs-on: ubuntu-latest
    needs: [create-release, build-release, deploy-release]
    if: always()
    steps:
      - name: Send release notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALLOWED_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            üéâ **–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ –ì–µ–π—Å–∞–Ω–¥—Ä–∞ –ö—É–ª–æ–≤–∏—á–∞!**
            
            üì¶ **–í–µ—Ä—Å–∏—è**: `${{ needs.create-release.outputs.version }}`
            üè∑Ô∏è **–¢–∏–ø**: ${{ github.event.inputs.prerelease == 'true' && 'Pre-release' || 'Stable Release' }}
            
            üìä **–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è**:
            ‚Ä¢ –°–±–æ—Ä–∫–∞: ${{ needs.build-release.result == 'success' && '‚úÖ' || '‚ùå' }}
            ‚Ä¢ –î–µ–ø–ª–æ–π: ${{ needs.deploy-release.result == 'success' && '‚úÖ' || needs.deploy-release.result == 'skipped' && '‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω' || '‚ùå' }}
            
            üê≥ **Docker Image**: 
            `ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}`
            
            üîó **–î–µ—Ç–∞–ª–∏**: [GitHub Release](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }})
            
            ${{ needs.deploy-release.result == 'success' && 'üöÄ **–ì–µ–π—Å–∞–Ω–¥—Ä –ö—É–ª–æ–≤–∏—á –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**' || '' }}