name: ü©∫ Health Check & Monitoring

on:
  schedule:
    # –ö–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      deep_check:
        description: 'Run deep health check'
        required: false
        default: 'false'
        type: boolean

jobs:
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SYNOLOGY_SSH_KEY }}

      - name: Check bot health
        id: health
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          # –í—ã–ø–æ–ª–Ω—è–µ–º health check –Ω–∞ NAS
          HEALTH_OUTPUT=$(ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            docker compose exec -T geysandr-bot bun run health-check --quick --json 2>/dev/null || echo '{\"status\":\"error\",\"message\":\"Container not responding\"}'
          ")
          
          echo "health_output=$HEALTH_OUTPUT" >> $GITHUB_OUTPUT
          
          # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å
          STATUS=$(echo "$HEALTH_OUTPUT" | jq -r '.status // "error"')
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          
          MESSAGE=$(echo "$HEALTH_OUTPUT" | jq -r '.message // "Unknown error"')
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Deep health check (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if: github.event.inputs.deep_check == 'true'
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            echo 'üìä Container stats:'
            docker stats --no-stream geysandr-kylovich-bot
            
            echo 'üìú Recent logs:'
            docker compose logs --tail=10 geysandr-bot
            
            echo 'üíæ Memory stats:'
            docker compose exec -T geysandr-bot bun run memory-stats || true
            
            echo '‚ö° Cache stats:'
            docker compose exec -T geysandr-bot bun run cache-stats || true
          "

      - name: Restart bot if unhealthy
        if: steps.health.outputs.status == 'unhealthy'
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          echo "üö® Bot is unhealthy, attempting restart..."
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            docker compose restart geysandr-bot
            sleep 30
            docker compose exec -T geysandr-bot bun run health-check --quick
          "

      - name: Send health status notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALLOWED_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ü©∫ **Health Check Report**
            
            üìä **–°—Ç–∞—Ç—É—Å**: ${{ steps.health.outputs.status == 'healthy' && '‚úÖ Healthy' || steps.health.outputs.status == 'degraded' && '‚ö†Ô∏è Degraded' || '‚ùå Unhealthy' }}
            üìù **–°–æ–æ–±—â–µ–Ω–∏–µ**: ${{ steps.health.outputs.message }}
            ‚è∞ **–í—Ä–µ–º—è**: $(date)
            
            ${{ steps.health.outputs.status == 'unhealthy' && 'üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω**' || '' }}

  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
  resource-monitoring:
    name: üìä Resource Monitoring
    runs-on: ubuntu-latest
    environment: production
    if: github.event.schedule || github.event.inputs.deep_check == 'true'
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SYNOLOGY_SSH_KEY }}

      - name: Collect resource metrics
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            cd /volume1/docker/geysandr-bot
            
            echo 'üìä –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...'
            
            # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            echo 'CONTAINER_STATS:' 
            docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}' geysandr-kylovich-bot
            
            # –†–∞–∑–º–µ—Ä volumes
            echo 'VOLUME_SIZES:'
            docker system df -v | grep geysandr
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã NAS
            echo 'SYSTEM_RESOURCES:'
            free -h
            df -h /volume1
            
            # –õ–æ–≥–∏ —Ä–∞–∑–º–µ—Ä
            echo 'LOGS_SIZE:'
            du -sh /var/lib/docker/containers/*/geysandr-*.log 2>/dev/null || echo 'No log files found'
          " || echo "Failed to collect some metrics"

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    environment: production
    if: github.event.schedule == '0 0 * * 0' # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ –ø–æ–ª–Ω–æ—á—å
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SYNOLOGY_SSH_KEY }}

      - name: Cleanup old Docker images and data
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USER: ${{ secrets.SYNOLOGY_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $SYNOLOGY_USER@$SYNOLOGY_HOST "
            echo 'üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...'
            
            cd /volume1/docker/geysandr-bot
            
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            ./scripts/backup.sh
            
            # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã
            docker image prune -f
            docker system prune -f --volumes
            
            # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            find /var/lib/docker/containers -name '*geysandr-*.log*' -mtime +7 -delete 2>/dev/null || true
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            cd backups 2>/dev/null && ls -t *.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm -- || true
            
            echo '‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
          "

      - name: Send cleanup report
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALLOWED_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            üßπ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞**
            
            ‚úÖ –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker –æ–±—Ä–∞–∑—ã
            ‚úÖ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
            ‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –±—ç–∫–∞–ø—ã
            ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ